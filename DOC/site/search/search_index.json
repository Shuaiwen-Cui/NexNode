{"config":{"lang":["en","zh"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"NexNode","text":"<p>This project dedicates to the development of an EdgeAI-powered MCU level IoT node for future-oriented applications.</p> <p>\"Nex\" is stemmed from both \"Next\" and \"Nexus\", which implies the next generation of IoT devices and the connection between the physical and digital worlds.</p> <p></p>"},{"location":"DNESP32S3/dnesp32s3/","title":"ALIENTEK DNESP32S3","text":"<p>Alientek DNESP32S3 Development Board</p> <p></p> <p></p> <p>\ud83c\udfd7\ufe0f</p>"},{"location":"DNESP32S3M/dnesp32s3m/","title":"ALIENTEK DNESP32S3M","text":""},{"location":"DNESP32S3M/dnesp32s3m/#hardware-architecture","title":"HARDWARE ARCHITECTURE","text":"<p>Hardware Architecture</p> <p>MAIN CONTROL + PERCEPTION + COMMUNICATION + ACTUATION + POWER</p> <p>Alientek DNESP32S3M Main Control Board</p> <p></p> <p></p>"},{"location":"DNESP32S3M/dnesp32s3m/#code-architecture","title":"CODE ARCHITECTURE","text":"<p>General ESP32 Project Structure</p> <pre><code>- myProject/\n             - CMakeLists.txt\n             - sdkconfig\n             - components/ - component1/ - CMakeLists.txt\n                                         - Kconfig\n                                         - src1.c\n                           - component2/ - CMakeLists.txt\n                                         - Kconfig\n                                         - src1.c\n                                         - include/ - component2.h\n             - main/       - CMakeLists.txt\n                           - src1.c\n                           - src2.c\n             - build/\n</code></pre> <p>DNESP32S3M TEMPLATE PROJECT STRUCTURE</p> <pre><code>- DNESP32S3M-XXX/\n             - .vscode/ (vscode \u8bbe\u7f6e\u6587\u4ef6\uff0c\u53ef\u4ee5\u5ffd\u7565)\n             - CMakeLists.txt (\u9879\u76ee\u7ea7 cmake \u6587\u4ef6)\n             - sdkconfig (\u9879\u76ee\u7ea7 sdkconfig \u6587\u4ef6\uff0c\u901a\u8fc7 idf.py menuconfig \u751f\u6210)\n             - sdkconfig.old (sdkconfig \u5907\u4efd)\n             - partitions-16MiB.csv (16MiB flash \u8c03\u6574\u7684\u5206\u533a\u8868\u6587\u4ef6)\n             - dependencies.lock (\u4f9d\u8d56\u5e93\u7248\u672c\u9501\u5b9a\u6587\u4ef6)\n             - application/         - component1/ - CMakeLists.txt\n                                                  - Kconfig\n                                                  - src1.c\n                                    - component2/ - CMakeLists.txt\n                                                  - Kconfig\n                                                  - src1.c\n                                                  - include/ - component2.h\n             - middleware/          - component1/ - CMakeLists.txt\n                                                  - Kconfig\n                                                  - src1.c\n                                    - component2/ - CMakeLists.txt\n                                                  - Kconfig\n                                                  - src1.c\n                                                  - include/ - component2.h\n             - driver/              - component1/ - CMakeLists.txt\n                                                  - Kconfig\n                                                  - src1.c\n                                    - component2/ - CMakeLists.txt\n                                                  - Kconfig\n                                                  - src1.c\n                                                  - include/ - component2.h\n             - main/                - CMakeLists.txt\n                                    - src1.c\n                                    - src2.c\n             - build/\n</code></pre> <p>CODE ARCHITECTURE</p> <ul> <li>application: Application layer, including the main program and the application layer components.</li> <li>middleware: Middleware layer, including middleware components.</li> <li>driver: Driver layer, including driver components.</li> <li>main: Main program, including the main program and the main program components.</li> </ul>"},{"location":"DNESP32S3M/dnesp32s3m/#recommended-order","title":"RECOMMENDED ORDER","text":"<p>In short, you can refer to the dependency relationship in each chapter. Ensure all the prerequisites are met before proceeding to the current chapter.</p> <ol> <li>PROJECT CONSTRRUCTION</li> <li>ACTUATION&gt;LED</li> <li>MAIN-CONTROL&gt;EXIT (External Interrupt)</li> <li>MAIN-CONTROL&gt;TIMER</li> <li>MAIN-CONTROL&gt;RTC</li> <li>MAIN-CONTROL&gt;RNG</li> <li>MAIN-CONTROL&gt;SPI &amp; ACTUATION LCD</li> <li>MAIN-CONTROL&gt;SPI &amp; SD-CARD</li> </ol>"},{"location":"DNESP32S3M/ACTUATION/actuation/","title":"ACTUATION","text":""},{"location":"DNESP32S3M/ACTUATION/KEY%28EXIT%29/code/","title":"KEY(EXIT) CODE","text":""},{"location":"DNESP32S3M/ACTUATION/KEY%28EXIT%29/code/#component-architecture","title":"Component Architecture","text":"<pre><code>- driver\n    - exit\n        - include\n            - exit.h\n        - exit.c\n        - CMakeLists.txt\n</code></pre>"},{"location":"DNESP32S3M/ACTUATION/KEY%28EXIT%29/code/#driverexitcmakeliststxt","title":"driver/exit/CMakeLists.txt","text":"<pre><code>set(src_dirs\n    .\n)\n\nset(include_dirs\n    include\n)\n\nset(requires\n    driver\n    led\n)\n\nidf_component_register(SRC_DIRS ${src_dirs} INCLUDE_DIRS ${include_dirs} REQUIRES ${requires})\n</code></pre> <p>Note</p> <p>Note that in the drivers, we used gpio from the ESP-IDF builtin <code>driver</code> library, therefore, we need to indicate this dependency in the <code>REQUIRES</code> field of the <code>CMakeLists.txt</code> file. Also, we use the LED to show the effect of the external interrupt, so we need to add <code>led</code> in the <code>REQUIRES</code> field.</p>"},{"location":"DNESP32S3M/ACTUATION/KEY%28EXIT%29/code/#exith","title":"exit.h","text":"<pre><code>/**\n * @file exit.h\n * @author\n * @brief This file is for the external interrupt initialization and configuration.\n * @version 1.0\n * @date 2024-11-17\n *\n * @copyright Copyright (c) 2024\n *\n */\n\n#ifndef __EXIT_H__\n#define __EXIT_H__\n\n#include \"esp_system.h\"\n#include \"driver/gpio.h\"\n#include \"led.h\"\n\n/* Pin definition */\n#define BOOT_INT_GPIO_PIN GPIO_NUM_0\n\n/* IO operation */\n#define BOOT_EXIT gpio_get_level(BOOT_INT_GPIO_PIN)\n\n/* Function declarations */\n/**\n * @brief       External interrupt initialization function\n * @param       None\n * @retval      None\n */\nvoid exit_init(void); /* External interrupt initialization function */\n\n#endif\n</code></pre>"},{"location":"DNESP32S3M/ACTUATION/KEY%28EXIT%29/code/#exitc","title":"exit.c","text":"<pre><code>/**\n * @file exit.c\n * @author \n * @brief This file is for the external interrupt initialization and configuration.\n * @version 1.0\n * @date 2024-11-17\n * \n * @copyright Copyright (c) 2024\n * \n */\n\n#include \"exit.h\"\n\n/**\n * @brief       External interrupt service routine\n * @param       arg: Interrupt pin number\n * @note        IRAM_ATTR: The IRAM_ATTR attribute is used to store the interrupt handler in internal RAM to reduce latency\n * @retval      None\n */\nstatic void IRAM_ATTR exit_gpio_isr_handler(void *arg)\n{\n    uint32_t gpio_num = (uint32_t) arg;\n\n    if (gpio_num == BOOT_INT_GPIO_PIN)\n    {\n        exit_toggle();\n    }\n}\n\n/**\n * @brief       External interrupt initialization function\n * @param       None\n * @retval      None\n */\nvoid exit_init(void)\n{\n    gpio_config_t gpio_init_struct;\n\n    /* Configure BOOT pin and external interrupt */\n    gpio_init_struct.mode = GPIO_MODE_INPUT;                    /* Set as input mode */\n    gpio_init_struct.pull_up_en = GPIO_PULLUP_ENABLE;           /* Enable pull-up */\n    gpio_init_struct.pull_down_en = GPIO_PULLDOWN_DISABLE;      /* Disable pull-down */\n    gpio_init_struct.intr_type = GPIO_INTR_NEGEDGE;             /* Trigger on falling edge */\n    gpio_init_struct.pin_bit_mask = 1ull &lt;&lt; BOOT_INT_GPIO_PIN;  /* Configure BOOT key pin */\n    gpio_config(&amp;gpio_init_struct);                             /* Apply configuration */\n\n    /* Register interrupt service */\n    gpio_install_isr_service(0);\n\n    /* Set GPIO interrupt callback function */\n    gpio_isr_handler_add(BOOT_INT_GPIO_PIN, exit_gpio_isr_handler, (void*) BOOT_INT_GPIO_PIN);\n\n    /* Enable GPIO interrupt */\n    gpio_intr_enable(BOOT_INT_GPIO_PIN);\n}\n</code></pre>"},{"location":"DNESP32S3M/ACTUATION/KEY%28EXIT%29/code/#mainc","title":"main.c","text":"<pre><code>/**\n * @file main.c\n * @author SHUAIWEN CUI (SHUAIWEN001@e.ntu.edu.sg)\n * @brief \n * @version 1.0\n * @date 2024-11-17\n * \n * @copyright Copyright (c) 2024\n * \n */\n\n/* Dependencies */\n// Basic\n#include \"esp_system.h\"\n#include \"esp_chip_info.h\"\n#include \"esp_psram.h\"\n#include \"esp_flash.h\"\n#include \"nvs_flash.h\"\n#include \"esp_log.h\"\n\n// RTOS\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n\n// BSP\n#include \"led.h\"\n#include \"exit.h\"\n\n/**\n * @brief Entry point of the program\n * @param None\n * @retval None\n */\nvoid app_main(void)\n{\n    esp_err_t ret;\n    uint32_t flash_size;\n    esp_chip_info_t chip_info;\n\n    // Initialize NVS\n    ret = nvs_flash_init();\n    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)\n    {\n        ESP_ERROR_CHECK(nvs_flash_erase()); // Erase if needed\n        ret = nvs_flash_init();\n    }\n\n    // Get FLASH size\n    esp_flash_get_size(NULL, &amp;flash_size);\n    esp_chip_info(&amp;chip_info);\n\n    // Display CPU core count\n    printf(\"CPU Cores: %d\\n\", chip_info.cores);\n\n    // Display FLASH size\n    printf(\"Flash size: %ld MB flash\\n\", flash_size / (1024 * 1024));\n\n    // Display PSRAM size\n    printf(\"PSRAM size: %d bytes\\n\", esp_psram_get_size());\n\n    // BSP\n    led_init();\n\n    // key_init();\n    exit_init();\n\n    while (1)\n    {\n        vTaskDelay(10);\n\n    }\n\n}\n</code></pre>"},{"location":"DNESP32S3M/ACTUATION/KEY%28EXIT%29/integration/","title":"INTEGRATION","text":""},{"location":"DNESP32S3M/ACTUATION/KEY%28EXIT%29/integration/#introduction","title":"Introduction","text":"<p>Note</p> <p>In this section, we introduce how to integrate the KEY(exit) driver into the project.</p>"},{"location":"DNESP32S3M/ACTUATION/KEY%28EXIT%29/integration/#create-a-new-component","title":"Create a New Component","text":"<p>Warning</p> <p>Before you create a component in the <code>driver</code> directory, make sure you have incorporated the <code>driver</code> directory into the project by adding the path to the <code>driver</code> directory to the <code>EXTRA_COMPONENT_DIRS</code> variable in the project-level <code>CMakeLists.txt</code> file.</p> <p>Open the project in VSCode, open the integrated terminal, and type in</p> <p><pre><code>get_idf \n</code></pre> to actiate the ESP-IDF environment. Then type in the following command to create a new component named exit`:</p> <pre><code>idf.py -C driver create-component exit\n</code></pre> <p>The command above means to create a new component named exit<code>in the</code>driver<code>directory. After executing the command, you will see a new directory named exit</code> in the <code>driver</code> directory. And the command will automatically generate the <code>CMakeLists.txt</code> file for the new component, as well as the <code>exit.h</code> and <code>exit.c</code> files.</p> <p>Alternatively, you can mannually create the exit<code>directory in the</code>driver<code>directory, and then create the</code>CMakeLists.txt<code>,</code>exit.h<code>, and</code>exit.c<code>files in the exit</code> directory.</p>"},{"location":"DNESP32S3M/ACTUATION/KEY%28EXIT%29/integration/#replace-the-code","title":"Replace the Code","text":"<p>Component Level</p> <p>Replace the code in this section into the <code>CMakelists.txt</code>, <code>exit.h</code>, and <code>exit.c</code> files under the component.</p> <p>Project Level</p> <p>Replace the code in <code>main.c</code> with the corresponding code. No need to change the <code>CMakeLists.txt</code> file at the project level.</p>"},{"location":"DNESP32S3M/ACTUATION/KEY%28EXIT%29/integration/#compile-and-flash-the-project","title":"Compile and Flash the Project","text":"<p>Open the project in VSCode, open the integrated terminal, and type in</p> <pre><code>idf.py build flash monitor\n</code></pre> <p>Now, press the button, and the LED status flips.</p>"},{"location":"DNESP32S3M/ACTUATION/KEY%28EXIT%29/note/","title":"KEY (EXIT) NOTES","text":""},{"location":"DNESP32S3M/ACTUATION/KEY%28EXIT%29/note/#introduction","title":"Introduction","text":"<p>Note</p> <p>In this section, we will talk about the onboard key on the DNESP32S3M development board, for convenience, the key is not used in block mode but rather in interrupt mode. We use external interrupts to detect the key press. In fact, we are discussing the external interrups, and we use the key to show the effect of external interrupts.</p>"},{"location":"DNESP32S3M/ACTUATION/KEY%28EXIT%29/note/#the-key","title":"The KEY","text":""},{"location":"DNESP32S3M/ACTUATION/KEY%28EXIT%29/note/#the-circuit-onboard","title":"The Circuit Onboard","text":""},{"location":"DNESP32S3M/ACTUATION/KEY%28EXIT%29/note/#dependencies","title":"Dependencies","text":""},{"location":"DNESP32S3M/ACTUATION/KEY%28EXIT%29/note/#key-functions","title":"Key Functions","text":"Function Prototype Explanation Example static void IRAM_ATTR exit_gpio_isr_handler(void *arg) External interrupt service routine, put the action you want to conduct once an event is detected here put your actions here esp_err_t gpio_install_isr_service(int intr_alloc_flags) Install the driver's GPIO ISR service, which allows you to register the ISR handler for the GPIO pin gpio_install_isr_service(0); esp_err_t gpio_isr_handler_add(gpio_num_t gpio_num, gpio_isr_t isr_handler, void *args) Add the handler for the GPIO pin gpio_isr_handler_add(BOOT_INT_GPIO_PIN, exit_gpio_isr_handler, (void*) BOOT_INT_GPIO_PIN); esp_err_t gpio_intr_enable(gpio_num_t gpio_num) Enable the GPIO interrupt gpio_intr_enable(BOOT_INT_GPIO_PIN); <p>Tip</p> <p>Once you setup the handler function, you do not need to call the funciton in your main loop, as the interrupt will be triggered automatically once the event is detected.</p>"},{"location":"DNESP32S3M/ACTUATION/LCD/code/","title":"LCD CODE","text":""},{"location":"DNESP32S3M/ACTUATION/LCD/code/#component-architecture","title":"Component Architecture","text":"<pre><code>- driver\n    - lcd\n        - include\n            - lcd.h\n        - lcd.c\n        - CMakeLists.txt\n</code></pre>"},{"location":"DNESP32S3M/ACTUATION/LCD/code/#driverlcdcmakeliststxt","title":"driver/lcd/CMakeLists.txt","text":"<pre><code>set(src_dirs\n    .\n)\n\nset(include_dirs\n    include\n)\n\nset(requires\n    driver\n    spi\n)\n\nidf_component_register(SRC_DIRS ${src_dirs} INCLUDE_DIRS ${include_dirs} REQUIRES ${requires})\n</code></pre> <p>Note</p> <p>Note that in the drivers, we used gpio from the ESP-IDF builtin <code>driver</code> library, therefore, we need to indicate this dependency in the <code>REQUIRES</code> field of the <code>CMakeLists.txt</code> file. We also need to add the <code>spi</code> library as a dependency.</p>"},{"location":"DNESP32S3M/ACTUATION/LCD/code/#lcdfonth","title":"lcdfont.h","text":"<pre><code>/**\n * @file lcdfont.h\n * @author SHUAIWEN CUI (SHUAIWEN001@e.ntu.edu.sg)\n * @brief lcd font\n * @version 1.0\n * @date 2024-11-18\n * @ref Alientek LCD Driver\n * @copyright Copyright (c) 2024\n *\n */\n\n#ifndef __LCDFONT_H__\n#define __LCDFONT_H__\n\n/* Common ASCII Table\n * Offset: 32\n * ASCII Character Set: !\"#$%&amp;'()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\n * PC2LCD2002 Modulation Setting: Negative Code + Column-wise + Forward Direction + C51 Format\n * Total: 4 Character Sets (12x12, 16x16, 24x24, and 32x32). Users can add other resolutions as needed.\n * Bytes per Character: (size/8 + ((size%8) ? 1 : 0)) * (size/2), where size is the dot matrix size (e.g., 12/16/24/32...) defined when generating the font library.\n */\n\n/* 12x12 ASCII Character Set Dot Matrix */\nconst unsigned char asc2_1206[95][12] = {\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\" \",0*/\n    {0x00, 0x00, 0x00, 0x00, 0x3F, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"!\",1*/\n    {0x00, 0x00, 0x30, 0x00, 0x40, 0x00, 0x30, 0x00, 0x40, 0x00, 0x00, 0x00}, /*\"\"\",2*/\n    {0x09, 0x00, 0x0B, 0xC0, 0x3D, 0x00, 0x0B, 0xC0, 0x3D, 0x00, 0x09, 0x00}, /*\"#\",3*/\n    {0x18, 0xC0, 0x24, 0x40, 0x7F, 0xE0, 0x22, 0x40, 0x31, 0x80, 0x00, 0x00}, /*\"$\",4*/\n    {0x18, 0x00, 0x24, 0xC0, 0x1B, 0x00, 0x0D, 0x80, 0x32, 0x40, 0x01, 0x80}, /*\"%\",5*/\n    {0x03, 0x80, 0x1C, 0x40, 0x27, 0x40, 0x1C, 0x80, 0x07, 0x40, 0x00, 0x40}, /*\"&amp;\",6*/\n    {0x10, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"'\",7*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x80, 0x20, 0x40, 0x40, 0x20}, /*\"(\",8*/\n    {0x00, 0x00, 0x40, 0x20, 0x20, 0x40, 0x1F, 0x80, 0x00, 0x00, 0x00, 0x00}, /*\")\",9*/\n    {0x09, 0x00, 0x06, 0x00, 0x1F, 0x80, 0x06, 0x00, 0x09, 0x00, 0x00, 0x00}, /*\"*\",10*/\n    {0x04, 0x00, 0x04, 0x00, 0x3F, 0x80, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00}, /*\"+\",11*/\n    {0x00, 0x10, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\",\",12*/\n    {0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00}, /*\"-\",13*/\n    {0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\".\",14*/\n    {0x00, 0x20, 0x01, 0xC0, 0x06, 0x00, 0x38, 0x00, 0x40, 0x00, 0x00, 0x00}, /*\"/\",15*/\n    {0x1F, 0x80, 0x20, 0x40, 0x20, 0x40, 0x20, 0x40, 0x1F, 0x80, 0x00, 0x00}, /*\"0\",16*/\n    {0x00, 0x00, 0x10, 0x40, 0x3F, 0xC0, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00}, /*\"1\",17*/\n    {0x18, 0xC0, 0x21, 0x40, 0x22, 0x40, 0x24, 0x40, 0x18, 0x40, 0x00, 0x00}, /*\"2\",18*/\n    {0x10, 0x80, 0x20, 0x40, 0x24, 0x40, 0x24, 0x40, 0x1B, 0x80, 0x00, 0x00}, /*\"3\",19*/\n    {0x02, 0x00, 0x0D, 0x00, 0x11, 0x00, 0x3F, 0xC0, 0x01, 0x40, 0x00, 0x00}, /*\"4\",20*/\n    {0x3C, 0x80, 0x24, 0x40, 0x24, 0x40, 0x24, 0x40, 0x23, 0x80, 0x00, 0x00}, /*\"5\",21*/\n    {0x1F, 0x80, 0x24, 0x40, 0x24, 0x40, 0x34, 0x40, 0x03, 0x80, 0x00, 0x00}, /*\"6\",22*/\n    {0x30, 0x00, 0x20, 0x00, 0x27, 0xC0, 0x38, 0x00, 0x20, 0x00, 0x00, 0x00}, /*\"7\",23*/\n    {0x1B, 0x80, 0x24, 0x40, 0x24, 0x40, 0x24, 0x40, 0x1B, 0x80, 0x00, 0x00}, /*\"8\",24*/\n    {0x1C, 0x00, 0x22, 0xC0, 0x22, 0x40, 0x22, 0x40, 0x1F, 0x80, 0x00, 0x00}, /*\"9\",25*/\n    {0x00, 0x00, 0x00, 0x00, 0x08, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\":\",26*/\n    {0x00, 0x00, 0x00, 0x00, 0x04, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\";\",27*/\n    {0x00, 0x00, 0x04, 0x00, 0x0A, 0x00, 0x11, 0x00, 0x20, 0x80, 0x40, 0x40}, /*\"&lt;\",28*/\n    {0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x00, 0x00}, /*\"=\",29*/\n    {0x00, 0x00, 0x40, 0x40, 0x20, 0x80, 0x11, 0x00, 0x0A, 0x00, 0x04, 0x00}, /*\"&gt;\",30*/\n    {0x18, 0x00, 0x20, 0x00, 0x23, 0x40, 0x24, 0x00, 0x18, 0x00, 0x00, 0x00}, /*\"?\",31*/\n    {0x1F, 0x80, 0x20, 0x40, 0x27, 0x40, 0x29, 0x40, 0x1F, 0x40, 0x00, 0x00}, /*\"@\",32*/\n    {0x00, 0x40, 0x07, 0xC0, 0x39, 0x00, 0x0F, 0x00, 0x01, 0xC0, 0x00, 0x40}, /*\"A\",33*/\n    {0x20, 0x40, 0x3F, 0xC0, 0x24, 0x40, 0x24, 0x40, 0x1B, 0x80, 0x00, 0x00}, /*\"B\",34*/\n    {0x1F, 0x80, 0x20, 0x40, 0x20, 0x40, 0x20, 0x40, 0x30, 0x80, 0x00, 0x00}, /*\"C\",35*/\n    {0x20, 0x40, 0x3F, 0xC0, 0x20, 0x40, 0x20, 0x40, 0x1F, 0x80, 0x00, 0x00}, /*\"D\",36*/\n    {0x20, 0x40, 0x3F, 0xC0, 0x24, 0x40, 0x2E, 0x40, 0x30, 0xC0, 0x00, 0x00}, /*\"E\",37*/\n    {0x20, 0x40, 0x3F, 0xC0, 0x24, 0x40, 0x2E, 0x00, 0x30, 0x00, 0x00, 0x00}, /*\"F\",38*/\n    {0x0F, 0x00, 0x10, 0x80, 0x20, 0x40, 0x22, 0x40, 0x33, 0x80, 0x02, 0x00}, /*\"G\",39*/\n    {0x20, 0x40, 0x3F, 0xC0, 0x04, 0x00, 0x04, 0x00, 0x3F, 0xC0, 0x20, 0x40}, /*\"H\",40*/\n    {0x20, 0x40, 0x20, 0x40, 0x3F, 0xC0, 0x20, 0x40, 0x20, 0x40, 0x00, 0x00}, /*\"I\",41*/\n    {0x00, 0x60, 0x20, 0x20, 0x20, 0x20, 0x3F, 0xC0, 0x20, 0x00, 0x20, 0x00}, /*\"J\",42*/\n    {0x20, 0x40, 0x3F, 0xC0, 0x24, 0x40, 0x0B, 0x00, 0x30, 0xC0, 0x20, 0x40}, /*\"K\",43*/\n    {0x20, 0x40, 0x3F, 0xC0, 0x20, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0xC0}, /*\"L\",44*/\n    {0x3F, 0xC0, 0x3C, 0x00, 0x03, 0xC0, 0x3C, 0x00, 0x3F, 0xC0, 0x00, 0x00}, /*\"M\",45*/\n    {0x20, 0x40, 0x3F, 0xC0, 0x0C, 0x40, 0x23, 0x00, 0x3F, 0xC0, 0x20, 0x00}, /*\"N\",46*/\n    {0x1F, 0x80, 0x20, 0x40, 0x20, 0x40, 0x20, 0x40, 0x1F, 0x80, 0x00, 0x00}, /*\"O\",47*/\n    {0x20, 0x40, 0x3F, 0xC0, 0x24, 0x40, 0x24, 0x00, 0x18, 0x00, 0x00, 0x00}, /*\"P\",48*/\n    {0x1F, 0x80, 0x21, 0x40, 0x21, 0x40, 0x20, 0xE0, 0x1F, 0xA0, 0x00, 0x00}, /*\"Q\",49*/\n    {0x20, 0x40, 0x3F, 0xC0, 0x24, 0x40, 0x26, 0x00, 0x19, 0xC0, 0x00, 0x40}, /*\"R\",50*/\n    {0x18, 0xC0, 0x24, 0x40, 0x24, 0x40, 0x22, 0x40, 0x31, 0x80, 0x00, 0x00}, /*\"S\",51*/\n    {0x30, 0x00, 0x20, 0x40, 0x3F, 0xC0, 0x20, 0x40, 0x30, 0x00, 0x00, 0x00}, /*\"T\",52*/\n    {0x20, 0x00, 0x3F, 0x80, 0x00, 0x40, 0x00, 0x40, 0x3F, 0x80, 0x20, 0x00}, /*\"U\",53*/\n    {0x20, 0x00, 0x3E, 0x00, 0x01, 0xC0, 0x07, 0x00, 0x38, 0x00, 0x20, 0x00}, /*\"V\",54*/\n    {0x38, 0x00, 0x07, 0xC0, 0x3C, 0x00, 0x07, 0xC0, 0x38, 0x00, 0x00, 0x00}, /*\"W\",55*/\n    {0x20, 0x40, 0x39, 0xC0, 0x06, 0x00, 0x39, 0xC0, 0x20, 0x40, 0x00, 0x00}, /*\"X\",56*/\n    {0x20, 0x00, 0x38, 0x40, 0x07, 0xC0, 0x38, 0x40, 0x20, 0x00, 0x00, 0x00}, /*\"Y\",57*/\n    {0x30, 0x40, 0x21, 0xC0, 0x26, 0x40, 0x38, 0x40, 0x20, 0xC0, 0x00, 0x00}, /*\"Z\",58*/\n    {0x00, 0x00, 0x00, 0x00, 0x7F, 0xE0, 0x40, 0x20, 0x40, 0x20, 0x00, 0x00}, /*\"[\",59*/\n    {0x00, 0x00, 0x70, 0x00, 0x0C, 0x00, 0x03, 0x80, 0x00, 0x40, 0x00, 0x00}, /*\"\\\",60*/\n    {0x00, 0x00, 0x40, 0x20, 0x40, 0x20, 0x7F, 0xE0, 0x00, 0x00, 0x00, 0x00}, /*\"]\",61*/\n    {0x00, 0x00, 0x20, 0x00, 0x40, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"^\",62*/\n    {0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10}, /*\"_\",63*/\n    {0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"`\",64*/\n    {0x00, 0x00, 0x02, 0x80, 0x05, 0x40, 0x05, 0x40, 0x03, 0xC0, 0x00, 0x40}, /*\"a\",65*/\n    {0x20, 0x00, 0x3F, 0xC0, 0x04, 0x40, 0x04, 0x40, 0x03, 0x80, 0x00, 0x00}, /*\"b\",66*/\n    {0x00, 0x00, 0x03, 0x80, 0x04, 0x40, 0x04, 0x40, 0x06, 0x40, 0x00, 0x00}, /*\"c\",67*/\n    {0x00, 0x00, 0x03, 0x80, 0x04, 0x40, 0x24, 0x40, 0x3F, 0xC0, 0x00, 0x40}, /*\"d\",68*/\n    {0x00, 0x00, 0x03, 0x80, 0x05, 0x40, 0x05, 0x40, 0x03, 0x40, 0x00, 0x00}, /*\"e\",69*/\n    {0x00, 0x00, 0x04, 0x40, 0x1F, 0xC0, 0x24, 0x40, 0x24, 0x40, 0x20, 0x00}, /*\"f\",70*/\n    {0x00, 0x00, 0x02, 0xE0, 0x05, 0x50, 0x05, 0x50, 0x06, 0x50, 0x04, 0x20}, /*\"g\",71*/\n    {0x20, 0x40, 0x3F, 0xC0, 0x04, 0x40, 0x04, 0x00, 0x03, 0xC0, 0x00, 0x40}, /*\"h\",72*/\n    {0x00, 0x00, 0x04, 0x40, 0x27, 0xC0, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00}, /*\"i\",73*/\n    {0x00, 0x10, 0x00, 0x10, 0x04, 0x10, 0x27, 0xE0, 0x00, 0x00, 0x00, 0x00}, /*\"j\",74*/\n    {0x20, 0x40, 0x3F, 0xC0, 0x01, 0x40, 0x07, 0x00, 0x04, 0xC0, 0x04, 0x40}, /*\"k\",75*/\n    {0x20, 0x40, 0x20, 0x40, 0x3F, 0xC0, 0x00, 0x40, 0x00, 0x40, 0x00, 0x00}, /*\"l\",76*/\n    {0x07, 0xC0, 0x04, 0x00, 0x07, 0xC0, 0x04, 0x00, 0x03, 0xC0, 0x00, 0x00}, /*\"m\",77*/\n    {0x04, 0x40, 0x07, 0xC0, 0x04, 0x40, 0x04, 0x00, 0x03, 0xC0, 0x00, 0x40}, /*\"n\",78*/\n    {0x00, 0x00, 0x03, 0x80, 0x04, 0x40, 0x04, 0x40, 0x03, 0x80, 0x00, 0x00}, /*\"o\",79*/\n    {0x04, 0x10, 0x07, 0xF0, 0x04, 0x50, 0x04, 0x40, 0x03, 0x80, 0x00, 0x00}, /*\"p\",80*/\n    {0x00, 0x00, 0x03, 0x80, 0x04, 0x40, 0x04, 0x50, 0x07, 0xF0, 0x00, 0x10}, /*\"q\",81*/\n    {0x04, 0x40, 0x07, 0xC0, 0x02, 0x40, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00}, /*\"r\",82*/\n    {0x00, 0x00, 0x06, 0x40, 0x05, 0x40, 0x05, 0x40, 0x04, 0xC0, 0x00, 0x00}, /*\"s\",83*/\n    {0x00, 0x00, 0x04, 0x00, 0x1F, 0x80, 0x04, 0x40, 0x00, 0x40, 0x00, 0x00}, /*\"t\",84*/\n    {0x04, 0x00, 0x07, 0x80, 0x00, 0x40, 0x04, 0x40, 0x07, 0xC0, 0x00, 0x40}, /*\"u\",85*/\n    {0x04, 0x00, 0x07, 0x00, 0x04, 0xC0, 0x01, 0x80, 0x06, 0x00, 0x04, 0x00}, /*\"v\",86*/\n    {0x06, 0x00, 0x01, 0xC0, 0x07, 0x00, 0x01, 0xC0, 0x06, 0x00, 0x00, 0x00}, /*\"w\",87*/\n    {0x04, 0x40, 0x06, 0xC0, 0x01, 0x00, 0x06, 0xC0, 0x04, 0x40, 0x00, 0x00}, /*\"x\",88*/\n    {0x04, 0x10, 0x07, 0x10, 0x04, 0xE0, 0x01, 0x80, 0x06, 0x00, 0x04, 0x00}, /*\"y\",89*/\n    {0x00, 0x00, 0x04, 0x40, 0x05, 0xC0, 0x06, 0x40, 0x04, 0x40, 0x00, 0x00}, /*\"z\",90*/\n    {0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x7B, 0xE0, 0x40, 0x20, 0x00, 0x00}, /*\"{\",91*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00}, /*\"|\",92*/\n    {0x00, 0x00, 0x40, 0x20, 0x7B, 0xE0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"}\",93*/\n    {0x40, 0x00, 0x80, 0x00, 0x40, 0x00, 0x20, 0x00, 0x20, 0x00, 0x40, 0x00}, /*\"~\",94*/\n};\n\n/* 16x16 ASCII Character Set Dot Matrix */\nconst unsigned char asc2_1608[95][16] = {\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\" \",0*/\n    {0x00, 0x00, 0x00, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00}, /*\"!\",1*/\n    {0x00, 0x12, 0x24, 0x24, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"\"\",2*/\n    {0x00, 0x00, 0x00, 0x12, 0x12, 0x12, 0x7E, 0x24, 0x24, 0x24, 0x7E, 0x24, 0x24, 0x24, 0x00, 0x00}, /*\"#\",3*/\n    {0x00, 0x00, 0x08, 0x3C, 0x4A, 0x4A, 0x48, 0x38, 0x0C, 0x0A, 0x0A, 0x4A, 0x4A, 0x3C, 0x08, 0x08}, /*\"$\",4*/\n    {0x00, 0x00, 0x00, 0x44, 0xA4, 0xA8, 0xA8, 0xB0, 0x54, 0x1A, 0x2A, 0x2A, 0x4A, 0x44, 0x00, 0x00}, /*\"%\",5*/\n    {0x00, 0x00, 0x00, 0x30, 0x48, 0x48, 0x48, 0x50, 0x6E, 0xA4, 0x94, 0x98, 0x89, 0x76, 0x00, 0x00}, /*\"&amp;\",6*/\n    {0x00, 0x60, 0x20, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"'\",7*/\n    {0x00, 0x02, 0x04, 0x08, 0x08, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x08, 0x04, 0x02, 0x00}, /*\"(\",8*/\n    {0x00, 0x40, 0x20, 0x10, 0x10, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x10, 0x20, 0x40, 0x00}, /*\")\",9*/\n    {0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0xD6, 0x38, 0x38, 0xD6, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00}, /*\"*\",10*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x7F, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00}, /*\"+\",11*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x20, 0x20, 0x40}, /*\",\",12*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"-\",13*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x60, 0x00, 0x00}, /*\".\",14*/\n    {0x00, 0x00, 0x02, 0x04, 0x04, 0x04, 0x08, 0x08, 0x10, 0x10, 0x10, 0x20, 0x20, 0x40, 0x40, 0x00}, /*\"/\",15*/\n    {0x00, 0x00, 0x00, 0x18, 0x24, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x24, 0x18, 0x00, 0x00}, /*\"0\",16*/\n    {0x00, 0x00, 0x00, 0x08, 0x38, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x3E, 0x00, 0x00}, /*\"1\",17*/\n    {0x00, 0x00, 0x00, 0x3C, 0x42, 0x42, 0x42, 0x02, 0x04, 0x08, 0x10, 0x20, 0x42, 0x7E, 0x00, 0x00}, /*\"2\",18*/\n    {0x00, 0x00, 0x00, 0x3C, 0x42, 0x42, 0x02, 0x04, 0x18, 0x04, 0x02, 0x42, 0x42, 0x3C, 0x00, 0x00}, /*\"3\",19*/\n    {0x00, 0x00, 0x00, 0x04, 0x0C, 0x0C, 0x14, 0x24, 0x24, 0x44, 0x7F, 0x04, 0x04, 0x1F, 0x00, 0x00}, /*\"4\",20*/\n    {0x00, 0x00, 0x00, 0x7E, 0x40, 0x40, 0x40, 0x78, 0x44, 0x02, 0x02, 0x42, 0x44, 0x38, 0x00, 0x00}, /*\"5\",21*/\n    {0x00, 0x00, 0x00, 0x18, 0x24, 0x40, 0x40, 0x5C, 0x62, 0x42, 0x42, 0x42, 0x22, 0x1C, 0x00, 0x00}, /*\"6\",22*/\n    {0x00, 0x00, 0x00, 0x7E, 0x42, 0x04, 0x04, 0x08, 0x08, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00}, /*\"7\",23*/\n    {0x00, 0x00, 0x00, 0x3C, 0x42, 0x42, 0x42, 0x24, 0x18, 0x24, 0x42, 0x42, 0x42, 0x3C, 0x00, 0x00}, /*\"8\",24*/\n    {0x00, 0x00, 0x00, 0x38, 0x44, 0x42, 0x42, 0x42, 0x46, 0x3A, 0x02, 0x02, 0x24, 0x18, 0x00, 0x00}, /*\"9\",25*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00}, /*\":\",26*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10}, /*\";\",27*/\n    {0x00, 0x00, 0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x00, 0x00}, /*\"&lt;\",28*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"=\",29*/\n    {0x00, 0x00, 0x00, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x00, 0x00}, /*\"&gt;\",30*/\n    {0x00, 0x00, 0x00, 0x3C, 0x42, 0x42, 0x62, 0x04, 0x08, 0x08, 0x08, 0x00, 0x18, 0x18, 0x00, 0x00}, /*\"?\",31*/\n    {0x00, 0x00, 0x00, 0x38, 0x44, 0x5A, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x5C, 0x42, 0x3C, 0x00, 0x00}, /*\"@\",32*/\n    {0x00, 0x00, 0x00, 0x10, 0x10, 0x18, 0x28, 0x28, 0x24, 0x3C, 0x44, 0x42, 0x42, 0xE7, 0x00, 0x00}, /*\"A\",33*/\n    {0x00, 0x00, 0x00, 0xF8, 0x44, 0x44, 0x44, 0x78, 0x44, 0x42, 0x42, 0x42, 0x44, 0xF8, 0x00, 0x00}, /*\"B\",34*/\n    {0x00, 0x00, 0x00, 0x3E, 0x42, 0x42, 0x80, 0x80, 0x80, 0x80, 0x80, 0x42, 0x44, 0x38, 0x00, 0x00}, /*\"C\",35*/\n    {0x00, 0x00, 0x00, 0xF8, 0x44, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x44, 0xF8, 0x00, 0x00}, /*\"D\",36*/\n    {0x00, 0x00, 0x00, 0xFC, 0x42, 0x48, 0x48, 0x78, 0x48, 0x48, 0x40, 0x42, 0x42, 0xFC, 0x00, 0x00}, /*\"E\",37*/\n    {0x00, 0x00, 0x00, 0xFC, 0x42, 0x48, 0x48, 0x78, 0x48, 0x48, 0x40, 0x40, 0x40, 0xE0, 0x00, 0x00}, /*\"F\",38*/\n    {0x00, 0x00, 0x00, 0x3C, 0x44, 0x44, 0x80, 0x80, 0x80, 0x8E, 0x84, 0x44, 0x44, 0x38, 0x00, 0x00}, /*\"G\",39*/\n    {0x00, 0x00, 0x00, 0xE7, 0x42, 0x42, 0x42, 0x42, 0x7E, 0x42, 0x42, 0x42, 0x42, 0xE7, 0x00, 0x00}, /*\"H\",40*/\n    {0x00, 0x00, 0x00, 0x7C, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x7C, 0x00, 0x00}, /*\"I\",41*/\n    {0x00, 0x00, 0x00, 0x3E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x88, 0xF0}, /*\"J\",42*/\n    {0x00, 0x00, 0x00, 0xEE, 0x44, 0x48, 0x50, 0x70, 0x50, 0x48, 0x48, 0x44, 0x44, 0xEE, 0x00, 0x00}, /*\"K\",43*/\n    {0x00, 0x00, 0x00, 0xE0, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x42, 0xFE, 0x00, 0x00}, /*\"L\",44*/\n    {0x00, 0x00, 0x00, 0xEE, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x54, 0x54, 0x54, 0x54, 0xD6, 0x00, 0x00}, /*\"M\",45*/\n    {0x00, 0x00, 0x00, 0xC7, 0x62, 0x62, 0x52, 0x52, 0x4A, 0x4A, 0x4A, 0x46, 0x46, 0xE2, 0x00, 0x00}, /*\"N\",46*/\n    {0x00, 0x00, 0x00, 0x38, 0x44, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x44, 0x38, 0x00, 0x00}, /*\"O\",47*/\n    {0x00, 0x00, 0x00, 0xFC, 0x42, 0x42, 0x42, 0x42, 0x7C, 0x40, 0x40, 0x40, 0x40, 0xE0, 0x00, 0x00}, /*\"P\",48*/\n    {0x00, 0x00, 0x00, 0x38, 0x44, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0xB2, 0x4C, 0x38, 0x06, 0x00}, /*\"Q\",49*/\n    {0x00, 0x00, 0x00, 0xFC, 0x42, 0x42, 0x42, 0x7C, 0x48, 0x48, 0x44, 0x44, 0x42, 0xE3, 0x00, 0x00}, /*\"R\",50*/\n    {0x00, 0x00, 0x00, 0x3E, 0x42, 0x42, 0x40, 0x20, 0x18, 0x04, 0x02, 0x42, 0x42, 0x7C, 0x00, 0x00}, /*\"S\",51*/\n    {0x00, 0x00, 0x00, 0xFE, 0x92, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x38, 0x00, 0x00}, /*\"T\",52*/\n    {0x00, 0x00, 0x00, 0xE7, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3C, 0x00, 0x00}, /*\"U\",53*/\n    {0x00, 0x00, 0x00, 0xE7, 0x42, 0x42, 0x44, 0x24, 0x24, 0x28, 0x28, 0x18, 0x10, 0x10, 0x00, 0x00}, /*\"V\",54*/\n    {0x00, 0x00, 0x00, 0xD6, 0x54, 0x54, 0x54, 0x54, 0x54, 0x6C, 0x28, 0x28, 0x28, 0x28, 0x00, 0x00}, /*\"W\",55*/\n    {0x00, 0x00, 0x00, 0xE7, 0x42, 0x24, 0x24, 0x18, 0x18, 0x18, 0x24, 0x24, 0x42, 0xE7, 0x00, 0x00}, /*\"X\",56*/\n    {0x00, 0x00, 0x00, 0xEE, 0x44, 0x44, 0x28, 0x28, 0x10, 0x10, 0x10, 0x10, 0x10, 0x38, 0x00, 0x00}, /*\"Y\",57*/\n    {0x00, 0x00, 0x00, 0x7E, 0x84, 0x04, 0x08, 0x08, 0x10, 0x20, 0x20, 0x42, 0x42, 0xFC, 0x00, 0x00}, /*\"Z\",58*/\n    {0x00, 0x1E, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1E, 0x00}, /*\"[\",59*/\n    {0x00, 0x00, 0x40, 0x20, 0x20, 0x20, 0x10, 0x10, 0x10, 0x08, 0x08, 0x04, 0x04, 0x04, 0x02, 0x02}, /*\"\\\",60*/\n    {0x00, 0x78, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x78, 0x00}, /*\"]\",61*/\n    {0x00, 0x18, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"^\",62*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF}, /*\"_\",63*/\n    {0x00, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"`\",64*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x44, 0x0C, 0x34, 0x44, 0x4C, 0x36, 0x00, 0x00}, /*\"a\",65*/\n    {0x00, 0x00, 0x00, 0x00, 0xC0, 0x40, 0x40, 0x58, 0x64, 0x42, 0x42, 0x42, 0x64, 0x58, 0x00, 0x00}, /*\"b\",66*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x22, 0x40, 0x40, 0x40, 0x22, 0x1C, 0x00, 0x00}, /*\"c\",67*/\n    {0x00, 0x00, 0x00, 0x00, 0x06, 0x02, 0x02, 0x3E, 0x42, 0x42, 0x42, 0x42, 0x46, 0x3B, 0x00, 0x00}, /*\"d\",68*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x42, 0x42, 0x7E, 0x40, 0x42, 0x3C, 0x00, 0x00}, /*\"e\",69*/\n    {0x00, 0x00, 0x00, 0x00, 0x0C, 0x12, 0x10, 0x7C, 0x10, 0x10, 0x10, 0x10, 0x10, 0x7C, 0x00, 0x00}, /*\"f\",70*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x44, 0x44, 0x38, 0x40, 0x3C, 0x42, 0x42, 0x3C}, /*\"g\",71*/\n    {0x00, 0x00, 0x00, 0x00, 0xC0, 0x40, 0x40, 0x5C, 0x62, 0x42, 0x42, 0x42, 0x42, 0xE7, 0x00, 0x00}, /*\"h\",72*/\n    {0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x70, 0x10, 0x10, 0x10, 0x10, 0x10, 0x7C, 0x00, 0x00}, /*\"i\",73*/\n    {0x00, 0x00, 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x1C, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x44, 0x78}, /*\"j\",74*/\n    {0x00, 0x00, 0x00, 0x00, 0xC0, 0x40, 0x40, 0x4E, 0x48, 0x50, 0x70, 0x48, 0x44, 0xEE, 0x00, 0x00}, /*\"k\",75*/\n    {0x00, 0x00, 0x00, 0x10, 0x70, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x7C, 0x00, 0x00}, /*\"l\",76*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x49, 0x49, 0x49, 0x49, 0x49, 0xED, 0x00, 0x00}, /*\"m\",77*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDC, 0x62, 0x42, 0x42, 0x42, 0x42, 0xE7, 0x00, 0x00}, /*\"n\",78*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3C, 0x00, 0x00}, /*\"o\",79*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD8, 0x64, 0x42, 0x42, 0x42, 0x64, 0x58, 0x40, 0xE0}, /*\"p\",80*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1A, 0x26, 0x42, 0x42, 0x42, 0x26, 0x1A, 0x02, 0x07}, /*\"q\",81*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEE, 0x32, 0x20, 0x20, 0x20, 0x20, 0xF8, 0x00, 0x00}, /*\"r\",82*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x42, 0x40, 0x3C, 0x02, 0x42, 0x7C, 0x00, 0x00}, /*\"s\",83*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x7C, 0x10, 0x10, 0x10, 0x10, 0x12, 0x0C, 0x00, 0x00}, /*\"t\",84*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0x42, 0x42, 0x42, 0x42, 0x46, 0x3B, 0x00, 0x00}, /*\"u\",85*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEE, 0x44, 0x44, 0x28, 0x28, 0x10, 0x10, 0x00, 0x00}, /*\"v\",86*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDB, 0x89, 0x4A, 0x5A, 0x54, 0x24, 0x24, 0x00, 0x00}, /*\"w\",87*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x24, 0x18, 0x18, 0x18, 0x24, 0x6E, 0x00, 0x00}, /*\"x\",88*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE7, 0x42, 0x24, 0x24, 0x18, 0x18, 0x10, 0x10, 0x60}, /*\"y\",89*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x44, 0x08, 0x10, 0x10, 0x22, 0x7E, 0x00, 0x00}, /*\"z\",90*/\n    {0x00, 0x03, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x08, 0x04, 0x04, 0x04, 0x04, 0x04, 0x03, 0x00}, /*\"{\",91*/\n    {0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08}, /*\"|\",92*/\n    {0x00, 0xC0, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x10, 0x20, 0x20, 0x20, 0x20, 0x20, 0xC0, 0x00}, /*\"}\",93*/\n    {0x20, 0x5A, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"~\",94*/\n};\n\n/* 24x24 ASCII Character Set Dot Matrix */\nconst unsigned char asc2_2412[95][48] = {\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\" \",0*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x02, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"!\",1*/\n    {0x00, 0x00, 0x00, 0x00, 0x06, 0x60, 0x06, 0x60, 0x0C, 0xC0, 0x19, 0x80, 0x11, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"\"\",2*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x40, 0x08, 0x40, 0x08, 0x40, 0x08, 0x40, 0x7F, 0xE0, 0x7F, 0xE0, 0x10, 0x40, 0x10, 0x80, 0x10, 0x80, 0x10, 0x80, 0x10, 0x80, 0x7F, 0xE0, 0x7F, 0xE0, 0x20, 0x80, 0x20, 0x80, 0x20, 0x80, 0x20, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"#\",3*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x0F, 0x80, 0x1A, 0xC0, 0x32, 0xC0, 0x33, 0xC0, 0x32, 0x00, 0x1A, 0x00, 0x0E, 0x00, 0x07, 0x00, 0x03, 0x80, 0x03, 0x80, 0x02, 0xC0, 0x32, 0xC0, 0x3A, 0xC0, 0x32, 0xC0, 0x12, 0x80, 0x0F, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00}, /*\"$\",4*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x80, 0x50, 0x80, 0x89, 0x00, 0x89, 0x00, 0x89, 0x00, 0x8A, 0x00, 0x8A, 0x00, 0x5C, 0x00, 0x75, 0xC0, 0x05, 0x40, 0x0A, 0x20, 0x0A, 0x20, 0x12, 0x20, 0x12, 0x20, 0x12, 0x20, 0x21, 0x40, 0x21, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"%\",5*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x36, 0x00, 0x36, 0x00, 0x36, 0x00, 0x36, 0x00, 0x36, 0x00, 0x34, 0x00, 0x19, 0xE0, 0x38, 0x80, 0x58, 0x80, 0xCC, 0x80, 0xCC, 0x80, 0xC6, 0x80, 0xC7, 0x00, 0xC3, 0x10, 0x63, 0x90, 0x3C, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"&amp;\",6*/\n    {0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x38, 0x00, 0x08, 0x00, 0x08, 0x00, 0x10, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"'\",7*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x40, 0x00, 0x80, 0x01, 0x00, 0x01, 0x00, 0x02, 0x00, 0x02, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x02, 0x00, 0x02, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x80, 0x00, 0x40, 0x00, 0x20, 0x00, 0x00}, /*\"(\",8*/\n    {0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x20, 0x00, 0x10, 0x00, 0x08, 0x00, 0x08, 0x00, 0x04, 0x00, 0x04, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x04, 0x00, 0x04, 0x00, 0x08, 0x00, 0x08, 0x00, 0x10, 0x00, 0x20, 0x00, 0x40, 0x00, 0x00, 0x00}, /*\")\",9*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x03, 0x00, 0x02, 0x00, 0x62, 0x30, 0x72, 0xF0, 0x0B, 0x80, 0x0F, 0x80, 0x7A, 0xF0, 0x62, 0x30, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"*\",10*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x7F, 0xF0, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"+\",11*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x38, 0x00, 0x08, 0x00, 0x08, 0x00, 0x10, 0x00, 0x20, 0x00}, /*\",\",12*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"-\",13*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x38, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\".\",14*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x60, 0x00, 0x40, 0x00, 0xC0, 0x00, 0x80, 0x00, 0x80, 0x01, 0x00, 0x01, 0x00, 0x02, 0x00, 0x02, 0x00, 0x06, 0x00, 0x04, 0x00, 0x04, 0x00, 0x08, 0x00, 0x08, 0x00, 0x10, 0x00, 0x10, 0x00, 0x30, 0x00, 0x20, 0x00, 0x60, 0x00, 0x40, 0x00, 0x00, 0x00}, /*\"/\",15*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x19, 0x80, 0x30, 0xC0, 0x30, 0xC0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x30, 0xC0, 0x30, 0xC0, 0x19, 0x80, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"0\",16*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x3E, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x3F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"1\",17*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x21, 0x80, 0x40, 0xC0, 0x60, 0xC0, 0x60, 0xC0, 0x00, 0xC0, 0x00, 0x80, 0x01, 0x80, 0x03, 0x00, 0x06, 0x00, 0x04, 0x00, 0x08, 0x00, 0x10, 0x40, 0x20, 0x40, 0x60, 0x40, 0x7F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"2\",18*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x63, 0x00, 0x61, 0x80, 0x61, 0x80, 0x01, 0x80, 0x01, 0x80, 0x03, 0x00, 0x0E, 0x00, 0x01, 0x80, 0x00, 0x80, 0x00, 0xC0, 0x00, 0xC0, 0x60, 0xC0, 0x60, 0xC0, 0x61, 0x80, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"3\",19*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x01, 0x80, 0x03, 0x80, 0x05, 0x80, 0x05, 0x80, 0x09, 0x80, 0x11, 0x80, 0x11, 0x80, 0x21, 0x80, 0x41, 0x80, 0x7F, 0xF0, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x07, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"4\",20*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xC0, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x2F, 0x00, 0x31, 0x80, 0x20, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x60, 0xC0, 0x60, 0xC0, 0x41, 0x80, 0x21, 0x80, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"5\",21*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x18, 0xC0, 0x30, 0xC0, 0x30, 0x00, 0x20, 0x00, 0x60, 0x00, 0x67, 0x80, 0x68, 0xC0, 0x70, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x20, 0x60, 0x30, 0x40, 0x18, 0xC0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"6\",22*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xE0, 0x30, 0x60, 0x20, 0x40, 0x20, 0x80, 0x00, 0x80, 0x00, 0x80, 0x01, 0x00, 0x01, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"7\",23*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x80, 0x30, 0xC0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x30, 0x40, 0x38, 0xC0, 0x0F, 0x00, 0x13, 0x80, 0x30, 0xC0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x30, 0xC0, 0x0F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"8\",24*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x30, 0x80, 0x30, 0xC0, 0x60, 0x40, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0xE0, 0x31, 0x60, 0x1E, 0x60, 0x00, 0x60, 0x00, 0xC0, 0x00, 0xC0, 0x30, 0x80, 0x31, 0x80, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"9\",25*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\":\",26*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x06, 0x00, 0x02, 0x00, 0x04, 0x00, 0x04, 0x00}, /*\";\",27*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x40, 0x00, 0x80, 0x01, 0x00, 0x02, 0x00, 0x04, 0x00, 0x08, 0x00, 0x10, 0x00, 0x20, 0x00, 0x10, 0x00, 0x08, 0x00, 0x04, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x80, 0x00, 0x40, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"&lt;\",28*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"=\",29*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x10, 0x00, 0x08, 0x00, 0x04, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x80, 0x00, 0x40, 0x00, 0x20, 0x00, 0x40, 0x00, 0x80, 0x01, 0x00, 0x02, 0x00, 0x04, 0x00, 0x08, 0x00, 0x10, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"&gt;\",30*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xC0, 0x18, 0x60, 0x20, 0x30, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x00, 0xE0, 0x01, 0x80, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"?\",31*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x18, 0xC0, 0x30, 0x40, 0x33, 0xA0, 0x26, 0xA0, 0x66, 0xA0, 0x65, 0xA0, 0x6D, 0x20, 0x6D, 0x20, 0x6D, 0x20, 0x6D, 0x20, 0x6D, 0x40, 0x27, 0x80, 0x30, 0x20, 0x30, 0x40, 0x18, 0xC0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"@\",32*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x06, 0x00, 0x0A, 0x00, 0x0B, 0x00, 0x09, 0x00, 0x09, 0x00, 0x11, 0x00, 0x11, 0x80, 0x10, 0x80, 0x1F, 0x80, 0x20, 0xC0, 0x20, 0xC0, 0x20, 0x40, 0x40, 0x40, 0x40, 0x60, 0xF0, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"A\",33*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x31, 0xC0, 0x30, 0xC0, 0x30, 0xC0, 0x30, 0xC0, 0x30, 0xC0, 0x31, 0x80, 0x3F, 0x00, 0x30, 0xC0, 0x30, 0x40, 0x30, 0x60, 0x30, 0x60, 0x30, 0x60, 0x30, 0x60, 0x30, 0xC0, 0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"B\",34*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xC0, 0x18, 0xC0, 0x30, 0x60, 0x30, 0x20, 0x20, 0x20, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x20, 0x30, 0x20, 0x30, 0x40, 0x18, 0xC0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"C\",35*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x31, 0x80, 0x30, 0xC0, 0x30, 0xC0, 0x30, 0x60, 0x30, 0x60, 0x30, 0x60, 0x30, 0x60, 0x30, 0x60, 0x30, 0x60, 0x30, 0x60, 0x30, 0x60, 0x30, 0xC0, 0x30, 0xC0, 0x31, 0x80, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"D\",36*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xC0, 0x60, 0xC0, 0x60, 0x20, 0x60, 0x20, 0x60, 0x00, 0x61, 0x00, 0x61, 0x00, 0x7F, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x60, 0x00, 0x60, 0x20, 0x60, 0x20, 0x60, 0x40, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"E\",37*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xC0, 0x60, 0xC0, 0x60, 0x20, 0x60, 0x20, 0x60, 0x00, 0x61, 0x00, 0x61, 0x00, 0x7F, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"F\",38*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x18, 0x80, 0x30, 0x40, 0x30, 0x40, 0x20, 0x40, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x63, 0xF0, 0x60, 0xC0, 0x60, 0xC0, 0x30, 0xC0, 0x30, 0xC0, 0x18, 0xC0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"G\",39*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7F, 0xE0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0xF0, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"H\",40*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xC0, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x3F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"I\",41*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xE0, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x63, 0x00, 0x66, 0x00, 0x3C, 0x00}, /*\"J\",42*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF3, 0xC0, 0x61, 0x80, 0x63, 0x00, 0x62, 0x00, 0x64, 0x00, 0x68, 0x00, 0x6C, 0x00, 0x74, 0x00, 0x76, 0x00, 0x62, 0x00, 0x63, 0x00, 0x61, 0x00, 0x61, 0x80, 0x60, 0x80, 0x60, 0xC0, 0xF1, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"K\",43*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x20, 0x60, 0x20, 0x60, 0x40, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"L\",44*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xE0, 0x61, 0xC0, 0x61, 0xC0, 0x71, 0xC0, 0x71, 0xC0, 0x72, 0xC0, 0x72, 0xC0, 0x52, 0xC0, 0x5A, 0xC0, 0x5A, 0xC0, 0x5C, 0xC0, 0x4C, 0xC0, 0x4C, 0xC0, 0x4C, 0xC0, 0x48, 0xC0, 0xE1, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"M\",45*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x71, 0xF0, 0x30, 0x40, 0x38, 0x40, 0x38, 0x40, 0x2C, 0x40, 0x2C, 0x40, 0x26, 0x40, 0x26, 0x40, 0x22, 0x40, 0x23, 0x40, 0x21, 0x40, 0x21, 0xC0, 0x21, 0xC0, 0x20, 0xC0, 0x20, 0xC0, 0xF8, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"N\",46*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x19, 0x80, 0x30, 0xC0, 0x30, 0x40, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x30, 0x40, 0x30, 0xC0, 0x19, 0x80, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"O\",47*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x60, 0xC0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x61, 0xC0, 0x7F, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"P\",48*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x19, 0x80, 0x30, 0xC0, 0x30, 0x40, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x6E, 0x60, 0x32, 0x40, 0x33, 0xC0, 0x19, 0x80, 0x0F, 0x00, 0x01, 0xE0, 0x00, 0xC0, 0x00, 0x00}, /*\"Q\",49*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x60, 0xC0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0xC0, 0x7F, 0x00, 0x62, 0x00, 0x63, 0x00, 0x61, 0x00, 0x61, 0x80, 0x60, 0xC0, 0x60, 0xC0, 0x60, 0x60, 0xF0, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"R\",50*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x40, 0x30, 0xC0, 0x60, 0x40, 0x60, 0x40, 0x60, 0x00, 0x70, 0x00, 0x3C, 0x00, 0x1F, 0x00, 0x07, 0xC0, 0x01, 0xC0, 0x00, 0xE0, 0x40, 0x60, 0x40, 0x60, 0x60, 0x60, 0x30, 0xC0, 0x0F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"S\",51*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xE0, 0x46, 0x20, 0x86, 0x10, 0x86, 0x10, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x1F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"T\",52*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0xE0, 0x30, 0x40, 0x30, 0x40, 0x30, 0x40, 0x30, 0x40, 0x30, 0x40, 0x30, 0x40, 0x30, 0x40, 0x30, 0x40, 0x30, 0x40, 0x30, 0x40, 0x30, 0x40, 0x30, 0x40, 0x30, 0x40, 0x18, 0x80, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"U\",53*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xE0, 0x60, 0x40, 0x20, 0x80, 0x20, 0x80, 0x30, 0x80, 0x30, 0x80, 0x11, 0x00, 0x11, 0x00, 0x19, 0x00, 0x19, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x0E, 0x00, 0x0C, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"V\",54*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEF, 0x70, 0x46, 0x20, 0x42, 0x20, 0x62, 0x20, 0x62, 0x20, 0x26, 0x40, 0x26, 0x40, 0x27, 0x40, 0x27, 0x40, 0x39, 0x40, 0x39, 0x80, 0x19, 0x80, 0x19, 0x80, 0x11, 0x80, 0x11, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"W\",55*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x79, 0xE0, 0x30, 0x80, 0x10, 0x80, 0x18, 0x80, 0x09, 0x00, 0x0D, 0x00, 0x06, 0x00, 0x04, 0x00, 0x06, 0x00, 0x06, 0x00, 0x0B, 0x00, 0x09, 0x00, 0x11, 0x80, 0x10, 0x80, 0x20, 0xC0, 0x71, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"X\",56*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF0, 0x60, 0x20, 0x20, 0x40, 0x30, 0x40, 0x10, 0x80, 0x18, 0x80, 0x1D, 0x00, 0x0D, 0x00, 0x0E, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x1F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"Y\",57*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xE0, 0x30, 0x40, 0x60, 0xC0, 0x40, 0x80, 0x01, 0x80, 0x01, 0x00, 0x02, 0x00, 0x02, 0x00, 0x04, 0x00, 0x04, 0x00, 0x08, 0x00, 0x18, 0x00, 0x10, 0x20, 0x30, 0x20, 0x20, 0x40, 0x7F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"Z\",58*/\n    {0x00, 0x00, 0x00, 0x00, 0x07, 0xC0, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x07, 0xC0, 0x00, 0x00}, /*\"[\",59*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x20, 0x00, 0x10, 0x00, 0x10, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x04, 0x00, 0x04, 0x00, 0x02, 0x00, 0x02, 0x00, 0x03, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x20}, /*\"\\\",60*/\n    {0x00, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x3E, 0x00, 0x00, 0x00}, /*\"]\",61*/\n    {0x00, 0x00, 0x06, 0x00, 0x09, 0x00, 0x10, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"^\",62*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xF0}, /*\"_\",63*/\n    {0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"`\",64*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x80, 0x30, 0xC0, 0x30, 0xC0, 0x00, 0xC0, 0x07, 0xC0, 0x38, 0xC0, 0x70, 0xC0, 0x60, 0xC0, 0x60, 0xC0, 0x71, 0xD0, 0x3E, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"a\",65*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x70, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x33, 0x80, 0x3C, 0xC0, 0x38, 0x60, 0x30, 0x60, 0x30, 0x60, 0x30, 0x60, 0x30, 0x60, 0x30, 0x60, 0x30, 0x40, 0x38, 0xC0, 0x27, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"b\",66*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x31, 0x80, 0x31, 0x80, 0x61, 0x80, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x40, 0x30, 0x40, 0x30, 0x80, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"c\",67*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x03, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x1E, 0xC0, 0x31, 0xC0, 0x30, 0xC0, 0x60, 0xC0, 0x60, 0xC0, 0x60, 0xC0, 0x60, 0xC0, 0x60, 0xC0, 0x20, 0xC0, 0x31, 0xE0, 0x1E, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"d\",68*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x18, 0xC0, 0x10, 0x40, 0x30, 0x60, 0x30, 0x60, 0x3F, 0xE0, 0x30, 0x00, 0x30, 0x00, 0x18, 0x20, 0x18, 0x40, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"e\",69*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x06, 0x60, 0x0C, 0x60, 0x0C, 0x00, 0x0C, 0x00, 0x7F, 0x80, 0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"f\",70*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xE0, 0x1B, 0x60, 0x31, 0x80, 0x31, 0x80, 0x31, 0x80, 0x19, 0x80, 0x1F, 0x00, 0x30, 0x00, 0x3F, 0x00, 0x33, 0xC0, 0x60, 0xC0, 0x60, 0xC0, 0x71, 0xC0, 0x1F, 0x00}, /*\"g\",71*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x70, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x37, 0x80, 0x38, 0xC0, 0x30, 0xC0, 0x30, 0xC0, 0x30, 0xC0, 0x30, 0xC0, 0x30, 0xC0, 0x30, 0xC0, 0x30, 0xC0, 0x30, 0xC0, 0x79, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"h\",72*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x3E, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x3F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"i\",73*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x0F, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x33, 0x00, 0x3E, 0x00}, /*\"j\",74*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x70, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0xC0, 0x31, 0x00, 0x31, 0x00, 0x32, 0x00, 0x36, 0x00, 0x3A, 0x00, 0x31, 0x00, 0x31, 0x80, 0x30, 0x80, 0x30, 0xC0, 0x79, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"k\",75*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x3E, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x3F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"l\",76*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEC, 0xE0, 0x77, 0x60, 0x66, 0x60, 0x66, 0x60, 0x66, 0x60, 0x66, 0x60, 0x66, 0x60, 0x66, 0x60, 0x66, 0x60, 0x66, 0x60, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"m\",77*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x80, 0x38, 0xC0, 0x30, 0xC0, 0x30, 0xC0, 0x30, 0xC0, 0x30, 0xC0, 0x30, 0xC0, 0x30, 0xC0, 0x30, 0xC0, 0x30, 0xC0, 0x79, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"n\",78*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x19, 0x80, 0x30, 0xC0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x30, 0xC0, 0x30, 0xC0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"o\",79*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x80, 0x38, 0xC0, 0x30, 0x60, 0x30, 0x60, 0x30, 0x60, 0x30, 0x60, 0x30, 0x60, 0x30, 0x60, 0x30, 0xC0, 0x38, 0xC0, 0x37, 0x80, 0x30, 0x00, 0x30, 0x00, 0x7C, 0x00}, /*\"p\",80*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x40, 0x31, 0xC0, 0x30, 0xC0, 0x60, 0xC0, 0x60, 0xC0, 0x60, 0xC0, 0x60, 0xC0, 0x60, 0xC0, 0x20, 0xC0, 0x31, 0xC0, 0x1E, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x03, 0xE0}, /*\"q\",81*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF9, 0xC0, 0x1A, 0x60, 0x1C, 0x60, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"r\",82*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xC0, 0x38, 0xC0, 0x30, 0x40, 0x30, 0x40, 0x1C, 0x00, 0x0F, 0x00, 0x03, 0xC0, 0x20, 0xC0, 0x20, 0xC0, 0x31, 0xC0, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"s\",83*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x04, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x7F, 0x80, 0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x40, 0x0C, 0x40, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"t\",84*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x40, 0x71, 0xC0, 0x30, 0xC0, 0x30, 0xC0, 0x30, 0xC0, 0x30, 0xC0, 0x30, 0xC0, 0x30, 0xC0, 0x30, 0xC0, 0x30, 0xC0, 0x39, 0xE0, 0x1E, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"u\",85*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0xE0, 0x30, 0x40, 0x10, 0x80, 0x10, 0x80, 0x18, 0x80, 0x09, 0x00, 0x0D, 0x00, 0x0D, 0x00, 0x06, 0x00, 0x06, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"v\",86*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEF, 0x70, 0x46, 0x20, 0x62, 0x20, 0x26, 0x40, 0x26, 0x40, 0x37, 0x40, 0x39, 0x80, 0x19, 0x80, 0x19, 0x80, 0x19, 0x80, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"w\",87*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3D, 0xE0, 0x18, 0x80, 0x08, 0x80, 0x0D, 0x00, 0x06, 0x00, 0x06, 0x00, 0x07, 0x00, 0x09, 0x00, 0x10, 0x80, 0x10, 0xC0, 0x79, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"x\",88*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x79, 0xE0, 0x10, 0x80, 0x10, 0x80, 0x10, 0x80, 0x09, 0x00, 0x09, 0x00, 0x0D, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x04, 0x00, 0x04, 0x00, 0x24, 0x00, 0x38, 0x00}, /*\"y\",89*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x21, 0x80, 0x23, 0x00, 0x22, 0x00, 0x06, 0x00, 0x04, 0x00, 0x0C, 0x00, 0x18, 0x40, 0x10, 0x40, 0x30, 0xC0, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"z\",90*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x02, 0x00, 0x04, 0x00, 0x02, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0xC0, 0x00, 0x00}, /*\"{\",91*/\n    {0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00}, /*\"|\",92*/\n    {0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x04, 0x00, 0x02, 0x00, 0x04, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x30, 0x00, 0x00, 0x00}, /*\"}\",93*/\n    {0x00, 0x00, 0x38, 0x00, 0x44, 0x20, 0x43, 0x20, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"~\",94*/\n};\n\n/* 32x32 ASCII Character Set Dot Matrix */\nconst unsigned char asc2_3216[95][128] = {\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\" \",0*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x03, 0xC0, 0x03, 0xC0, 0x03, 0xC0, 0x03, 0xC0, 0x03, 0xC0, 0x01, 0xC0, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x03, 0xC0, 0x03, 0xC0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"!\",1*/\n    {0x00, 0x00, 0x00, 0x00, 0x03, 0x18, 0x07, 0x38, 0x07, 0x38, 0x0E, 0x70, 0x0C, 0x60, 0x18, 0xC0, 0x31, 0x80, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"\"\",2*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x08, 0x04, 0x08, 0x04, 0x08, 0x04, 0x08, 0x04, 0x08, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x08, 0x10, 0x08, 0x10, 0x08, 0x10, 0x08, 0x10, 0x08, 0x10, 0x08, 0x10, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x18, 0x30, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"#\",3*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x03, 0xC0, 0x0D, 0x30, 0x09, 0x18, 0x19, 0x18, 0x19, 0x38, 0x19, 0x38, 0x1D, 0x00, 0x0D, 0x00, 0x0F, 0x00, 0x07, 0x00, 0x03, 0xC0, 0x01, 0xE0, 0x01, 0xF0, 0x01, 0x30, 0x01, 0x38, 0x01, 0x18, 0x39, 0x18, 0x39, 0x18, 0x31, 0x18, 0x31, 0x30, 0x19, 0x60, 0x07, 0xC0, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00}, /*\"$\",4*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x10, 0x6C, 0x10, 0x44, 0x20, 0xC6, 0x20, 0xC6, 0x40, 0xC6, 0x40, 0xC6, 0x40, 0xC6, 0x80, 0xC6, 0x80, 0x44, 0x80, 0x6D, 0x38, 0x39, 0x6C, 0x02, 0x44, 0x02, 0xC6, 0x02, 0xC6, 0x04, 0xC6, 0x04, 0xC6, 0x08, 0xC6, 0x08, 0xC6, 0x08, 0x44, 0x10, 0x6C, 0x10, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"%\",5*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x19, 0x00, 0x31, 0x80, 0x31, 0x80, 0x31, 0x80, 0x31, 0x80, 0x31, 0x00, 0x33, 0x00, 0x3A, 0x00, 0x1C, 0x00, 0x38, 0x7C, 0x3C, 0x10, 0x4C, 0x10, 0xCE, 0x10, 0xC6, 0x20, 0xC7, 0x20, 0xC3, 0x20, 0xC1, 0xC0, 0xC1, 0xC2, 0x60, 0xE6, 0x31, 0x7C, 0x1E, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"&amp;\",6*/\n    {0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x08, 0x00, 0x30, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"'\",7*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x04, 0x00, 0x08, 0x00, 0x18, 0x00, 0x30, 0x00, 0x20, 0x00, 0x60, 0x00, 0x40, 0x00, 0xC0, 0x00, 0xC0, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0x40, 0x00, 0x60, 0x00, 0x20, 0x00, 0x30, 0x00, 0x18, 0x00, 0x08, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00}, /*\"(\",8*/\n    {0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x20, 0x00, 0x10, 0x00, 0x18, 0x00, 0x0C, 0x00, 0x04, 0x00, 0x06, 0x00, 0x02, 0x00, 0x03, 0x00, 0x03, 0x00, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x06, 0x00, 0x04, 0x00, 0x0C, 0x00, 0x18, 0x00, 0x10, 0x00, 0x20, 0x00, 0x40, 0x00, 0x00, 0x00}, /*\")\",9*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x01, 0xC0, 0x01, 0xC0, 0x30, 0xC6, 0x38, 0x8E, 0x1C, 0x9C, 0x06, 0xB0, 0x01, 0xC0, 0x01, 0xC0, 0x06, 0xB0, 0x1C, 0x9C, 0x38, 0x8E, 0x31, 0x86, 0x01, 0xC0, 0x01, 0xC0, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"*\",10*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x3F, 0xFE, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"+\",11*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x08, 0x00, 0x30, 0x00, 0x60, 0x00}, /*\",\",12*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"-\",13*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\".\",14*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x06, 0x00, 0x04, 0x00, 0x0C, 0x00, 0x08, 0x00, 0x18, 0x00, 0x10, 0x00, 0x30, 0x00, 0x20, 0x00, 0x60, 0x00, 0x40, 0x00, 0xC0, 0x00, 0x80, 0x01, 0x80, 0x01, 0x00, 0x03, 0x00, 0x02, 0x00, 0x06, 0x00, 0x04, 0x00, 0x0C, 0x00, 0x08, 0x00, 0x18, 0x00, 0x10, 0x00, 0x30, 0x00, 0x20, 0x00, 0x60, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"/\",15*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x06, 0x20, 0x0C, 0x30, 0x18, 0x18, 0x18, 0x18, 0x18, 0x08, 0x30, 0x0C, 0x30, 0x0C, 0x30, 0x0C, 0x30, 0x0C, 0x30, 0x0C, 0x30, 0x0C, 0x30, 0x0C, 0x30, 0x0C, 0x30, 0x0C, 0x30, 0x0C, 0x18, 0x08, 0x18, 0x18, 0x18, 0x18, 0x0C, 0x30, 0x06, 0x20, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"0\",16*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x80, 0x1F, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x03, 0xC0, 0x1F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"1\",17*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xE0, 0x08, 0x38, 0x10, 0x18, 0x20, 0x0C, 0x20, 0x0C, 0x30, 0x0C, 0x30, 0x0C, 0x00, 0x0C, 0x00, 0x18, 0x00, 0x18, 0x00, 0x30, 0x00, 0x60, 0x00, 0xC0, 0x01, 0x80, 0x03, 0x00, 0x02, 0x00, 0x04, 0x04, 0x08, 0x04, 0x10, 0x04, 0x20, 0x0C, 0x3F, 0xF8, 0x3F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"2\",18*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xC0, 0x18, 0x60, 0x30, 0x30, 0x30, 0x18, 0x30, 0x18, 0x30, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x30, 0x00, 0x60, 0x03, 0xC0, 0x00, 0x70, 0x00, 0x18, 0x00, 0x08, 0x00, 0x0C, 0x00, 0x0C, 0x30, 0x0C, 0x30, 0x0C, 0x30, 0x08, 0x30, 0x18, 0x18, 0x30, 0x07, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"3\",19*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x60, 0x00, 0xE0, 0x00, 0xE0, 0x01, 0x60, 0x01, 0x60, 0x02, 0x60, 0x04, 0x60, 0x04, 0x60, 0x08, 0x60, 0x08, 0x60, 0x10, 0x60, 0x30, 0x60, 0x20, 0x60, 0x40, 0x60, 0x7F, 0xFC, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"4\",20*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFC, 0x0F, 0xFC, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x13, 0xE0, 0x14, 0x30, 0x18, 0x18, 0x10, 0x08, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x30, 0x0C, 0x30, 0x0C, 0x20, 0x18, 0x20, 0x18, 0x18, 0x30, 0x07, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"5\",21*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE0, 0x06, 0x18, 0x0C, 0x18, 0x08, 0x18, 0x18, 0x00, 0x10, 0x00, 0x10, 0x00, 0x30, 0x00, 0x33, 0xE0, 0x36, 0x30, 0x38, 0x18, 0x38, 0x08, 0x30, 0x0C, 0x30, 0x0C, 0x30, 0x0C, 0x30, 0x0C, 0x30, 0x0C, 0x18, 0x0C, 0x18, 0x08, 0x0C, 0x18, 0x0E, 0x30, 0x03, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"6\",22*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFC, 0x1F, 0xFC, 0x10, 0x08, 0x30, 0x10, 0x20, 0x10, 0x20, 0x20, 0x00, 0x20, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x80, 0x00, 0x80, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"7\",23*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xE0, 0x0C, 0x30, 0x18, 0x18, 0x30, 0x0C, 0x30, 0x0C, 0x30, 0x0C, 0x38, 0x0C, 0x38, 0x08, 0x1E, 0x18, 0x0F, 0x20, 0x07, 0xC0, 0x18, 0xF0, 0x30, 0x78, 0x30, 0x38, 0x60, 0x1C, 0x60, 0x0C, 0x60, 0x0C, 0x60, 0x0C, 0x60, 0x0C, 0x30, 0x18, 0x18, 0x30, 0x07, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"8\",24*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xC0, 0x18, 0x20, 0x30, 0x10, 0x30, 0x18, 0x60, 0x08, 0x60, 0x0C, 0x60, 0x0C, 0x60, 0x0C, 0x60, 0x0C, 0x60, 0x0C, 0x70, 0x1C, 0x30, 0x2C, 0x18, 0x6C, 0x0F, 0x8C, 0x00, 0x0C, 0x00, 0x18, 0x00, 0x18, 0x00, 0x10, 0x30, 0x30, 0x30, 0x60, 0x30, 0xC0, 0x0F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"9\",25*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x03, 0xC0, 0x03, 0xC0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x03, 0xC0, 0x03, 0xC0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\":\",26*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x03, 0x80, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x03, 0x80, 0x03, 0x80, 0x01, 0x80, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00}, /*\";\",27*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x08, 0x00, 0x10, 0x00, 0x20, 0x00, 0x40, 0x00, 0x80, 0x01, 0x00, 0x02, 0x00, 0x04, 0x00, 0x08, 0x00, 0x10, 0x00, 0x10, 0x00, 0x08, 0x00, 0x04, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x80, 0x00, 0x40, 0x00, 0x20, 0x00, 0x10, 0x00, 0x08, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"&lt;\",28*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"=\",29*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x10, 0x00, 0x08, 0x00, 0x04, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x80, 0x00, 0x40, 0x00, 0x20, 0x00, 0x10, 0x00, 0x08, 0x00, 0x08, 0x00, 0x10, 0x00, 0x20, 0x00, 0x40, 0x00, 0x80, 0x01, 0x00, 0x02, 0x00, 0x04, 0x00, 0x08, 0x00, 0x10, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"&gt;\",30*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xE0, 0x0C, 0x18, 0x18, 0x0C, 0x10, 0x06, 0x30, 0x06, 0x38, 0x06, 0x38, 0x06, 0x38, 0x06, 0x00, 0x0C, 0x00, 0x18, 0x00, 0x70, 0x00, 0xC0, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x03, 0xC0, 0x03, 0xC0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"?\",31*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xE0, 0x06, 0x10, 0x0C, 0x08, 0x18, 0x04, 0x30, 0xD4, 0x31, 0xB2, 0x21, 0x32, 0x63, 0x32, 0x63, 0x22, 0x66, 0x22, 0x66, 0x22, 0x66, 0x22, 0x66, 0x62, 0x66, 0x64, 0x66, 0x64, 0x26, 0xE8, 0x33, 0x30, 0x30, 0x02, 0x10, 0x04, 0x18, 0x0C, 0x0C, 0x18, 0x03, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"@\",32*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x03, 0x80, 0x03, 0x80, 0x03, 0x80, 0x04, 0xC0, 0x04, 0xC0, 0x04, 0xC0, 0x04, 0xC0, 0x0C, 0x40, 0x08, 0x60, 0x08, 0x60, 0x08, 0x60, 0x08, 0x20, 0x1F, 0xF0, 0x10, 0x30, 0x10, 0x30, 0x10, 0x30, 0x20, 0x18, 0x20, 0x18, 0x20, 0x18, 0x60, 0x1C, 0xF8, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"A\",33*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xE0, 0x18, 0x38, 0x18, 0x18, 0x18, 0x0C, 0x18, 0x0C, 0x18, 0x0C, 0x18, 0x0C, 0x18, 0x0C, 0x18, 0x18, 0x18, 0x30, 0x1F, 0xE0, 0x18, 0x18, 0x18, 0x0C, 0x18, 0x04, 0x18, 0x06, 0x18, 0x06, 0x18, 0x06, 0x18, 0x06, 0x18, 0x06, 0x18, 0x0C, 0x18, 0x18, 0x7F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"B\",34*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xE0, 0x06, 0x1C, 0x08, 0x0C, 0x18, 0x06, 0x30, 0x02, 0x30, 0x02, 0x30, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x30, 0x02, 0x30, 0x02, 0x10, 0x04, 0x18, 0x08, 0x0C, 0x10, 0x03, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"C\",35*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xC0, 0x18, 0x70, 0x18, 0x18, 0x18, 0x08, 0x18, 0x0C, 0x18, 0x0C, 0x18, 0x06, 0x18, 0x06, 0x18, 0x06, 0x18, 0x06, 0x18, 0x06, 0x18, 0x06, 0x18, 0x06, 0x18, 0x06, 0x18, 0x06, 0x18, 0x04, 0x18, 0x0C, 0x18, 0x0C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x60, 0x7F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"D\",36*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFC, 0x18, 0x0C, 0x18, 0x04, 0x18, 0x02, 0x18, 0x02, 0x18, 0x00, 0x18, 0x00, 0x18, 0x10, 0x18, 0x10, 0x18, 0x30, 0x1F, 0xF0, 0x18, 0x30, 0x18, 0x10, 0x18, 0x10, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x02, 0x18, 0x02, 0x18, 0x04, 0x18, 0x0C, 0x7F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"E\",37*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFC, 0x18, 0x1C, 0x18, 0x04, 0x18, 0x02, 0x18, 0x02, 0x18, 0x00, 0x18, 0x00, 0x18, 0x10, 0x18, 0x10, 0x18, 0x30, 0x1F, 0xF0, 0x18, 0x30, 0x18, 0x10, 0x18, 0x10, 0x18, 0x10, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"F\",38*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x0C, 0x30, 0x08, 0x10, 0x18, 0x18, 0x30, 0x08, 0x30, 0x08, 0x20, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x7E, 0x60, 0x18, 0x60, 0x18, 0x20, 0x18, 0x30, 0x18, 0x30, 0x18, 0x10, 0x18, 0x18, 0x18, 0x0C, 0x20, 0x07, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"G\",39*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x3F, 0x30, 0x0C, 0x30, 0x0C, 0x30, 0x0C, 0x30, 0x0C, 0x30, 0x0C, 0x30, 0x0C, 0x30, 0x0C, 0x30, 0x0C, 0x30, 0x0C, 0x3F, 0xFC, 0x30, 0x0C, 0x30, 0x0C, 0x30, 0x0C, 0x30, 0x0C, 0x30, 0x0C, 0x30, 0x0C, 0x30, 0x0C, 0x30, 0x0C, 0x30, 0x0C, 0x30, 0x0C, 0xFC, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"H\",40*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xF8, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x1F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"I\",41*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFE, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x70, 0x60, 0x70, 0xC0, 0x71, 0x80, 0x3F, 0x00}, /*\"J\",42*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x7C, 0x18, 0x30, 0x18, 0x20, 0x18, 0x60, 0x18, 0x40, 0x18, 0x80, 0x18, 0x80, 0x19, 0x00, 0x19, 0x00, 0x1B, 0x00, 0x1D, 0x80, 0x1D, 0x80, 0x18, 0xC0, 0x18, 0xC0, 0x18, 0x60, 0x18, 0x60, 0x18, 0x30, 0x18, 0x30, 0x18, 0x30, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"K\",43*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x02, 0x18, 0x02, 0x18, 0x04, 0x18, 0x0C, 0x7F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"L\",44*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x0F, 0x38, 0x1C, 0x38, 0x1C, 0x38, 0x1C, 0x38, 0x1C, 0x38, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x4C, 0x2C, 0x4C, 0x26, 0x4C, 0x26, 0x4C, 0x26, 0x4C, 0x26, 0x8C, 0x22, 0x8C, 0x23, 0x8C, 0x23, 0x8C, 0x23, 0x0C, 0x23, 0x0C, 0x21, 0x0C, 0xF1, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"M\",45*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x1F, 0x38, 0x04, 0x38, 0x04, 0x2C, 0x04, 0x2C, 0x04, 0x26, 0x04, 0x26, 0x04, 0x23, 0x04, 0x23, 0x04, 0x21, 0x84, 0x21, 0x84, 0x20, 0xC4, 0x20, 0xC4, 0x20, 0x64, 0x20, 0x64, 0x20, 0x34, 0x20, 0x34, 0x20, 0x1C, 0x20, 0x1C, 0x20, 0x0C, 0x20, 0x0C, 0xF8, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"N\",46*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x0C, 0x30, 0x18, 0x18, 0x10, 0x08, 0x30, 0x0C, 0x30, 0x0C, 0x60, 0x04, 0x60, 0x06, 0x60, 0x06, 0x60, 0x06, 0x60, 0x06, 0x60, 0x06, 0x60, 0x06, 0x60, 0x06, 0x60, 0x06, 0x20, 0x06, 0x30, 0x0C, 0x30, 0x0C, 0x10, 0x08, 0x18, 0x18, 0x0C, 0x30, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"O\",47*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xF0, 0x18, 0x18, 0x18, 0x0C, 0x18, 0x06, 0x18, 0x06, 0x18, 0x06, 0x18, 0x06, 0x18, 0x06, 0x18, 0x06, 0x18, 0x0C, 0x18, 0x18, 0x1F, 0xE0, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"P\",48*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x0C, 0x30, 0x18, 0x18, 0x10, 0x08, 0x30, 0x0C, 0x30, 0x0C, 0x60, 0x06, 0x60, 0x06, 0x60, 0x06, 0x60, 0x06, 0x60, 0x06, 0x60, 0x06, 0x60, 0x06, 0x60, 0x06, 0x60, 0x06, 0x60, 0x06, 0x27, 0x84, 0x38, 0xCC, 0x38, 0x6C, 0x18, 0x78, 0x0C, 0x70, 0x03, 0xE0, 0x00, 0x32, 0x00, 0x3C, 0x00, 0x1C, 0x00, 0x00}, /*\"Q\",49*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xE0, 0x18, 0x38, 0x18, 0x18, 0x18, 0x0C, 0x18, 0x0C, 0x18, 0x0C, 0x18, 0x0C, 0x18, 0x0C, 0x18, 0x18, 0x18, 0x30, 0x1F, 0xE0, 0x18, 0xC0, 0x18, 0xC0, 0x18, 0x60, 0x18, 0x60, 0x18, 0x60, 0x18, 0x30, 0x18, 0x30, 0x18, 0x30, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"R\",50*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xC8, 0x18, 0x78, 0x30, 0x18, 0x60, 0x18, 0x60, 0x08, 0x60, 0x08, 0x60, 0x00, 0x70, 0x00, 0x3C, 0x00, 0x1F, 0x00, 0x07, 0xC0, 0x01, 0xF0, 0x00, 0x78, 0x00, 0x18, 0x00, 0x1C, 0x40, 0x0C, 0x40, 0x0C, 0x60, 0x0C, 0x20, 0x0C, 0x30, 0x18, 0x38, 0x30, 0x27, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"S\",51*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x31, 0x84, 0x21, 0x86, 0x41, 0x82, 0x41, 0x82, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x07, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"T\",52*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x3E, 0x30, 0x08, 0x30, 0x08, 0x30, 0x08, 0x30, 0x08, 0x30, 0x08, 0x30, 0x08, 0x30, 0x08, 0x30, 0x08, 0x30, 0x08, 0x30, 0x08, 0x30, 0x08, 0x30, 0x08, 0x30, 0x08, 0x30, 0x08, 0x30, 0x08, 0x30, 0x08, 0x30, 0x08, 0x30, 0x08, 0x18, 0x10, 0x1C, 0x20, 0x07, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"U\",53*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x1E, 0x18, 0x0C, 0x18, 0x08, 0x18, 0x08, 0x18, 0x08, 0x0C, 0x10, 0x0C, 0x10, 0x0C, 0x10, 0x0C, 0x10, 0x0C, 0x20, 0x06, 0x20, 0x06, 0x20, 0x06, 0x20, 0x06, 0x40, 0x03, 0x40, 0x03, 0x40, 0x03, 0x40, 0x03, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"V\",54*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF3, 0xCF, 0x61, 0x86, 0x61, 0x84, 0x21, 0x84, 0x20, 0x84, 0x30, 0xC4, 0x31, 0xC4, 0x31, 0xC4, 0x31, 0xC8, 0x31, 0xC8, 0x11, 0xC8, 0x12, 0x48, 0x1A, 0x68, 0x1A, 0x68, 0x1A, 0x70, 0x1C, 0x70, 0x0C, 0x70, 0x0C, 0x70, 0x0C, 0x30, 0x0C, 0x20, 0x08, 0x20, 0x08, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"W\",55*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x3E, 0x18, 0x08, 0x18, 0x10, 0x0C, 0x10, 0x0C, 0x20, 0x06, 0x20, 0x06, 0x40, 0x03, 0x40, 0x03, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0xC0, 0x02, 0xC0, 0x02, 0x60, 0x04, 0x60, 0x04, 0x70, 0x08, 0x30, 0x08, 0x30, 0x18, 0x18, 0x10, 0x1C, 0x7C, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"X\",56*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x3E, 0x38, 0x08, 0x18, 0x08, 0x18, 0x10, 0x0C, 0x10, 0x0C, 0x10, 0x0C, 0x20, 0x06, 0x20, 0x06, 0x20, 0x03, 0x40, 0x03, 0x40, 0x03, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x07, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"Y\",57*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFE, 0x1C, 0x0C, 0x18, 0x0C, 0x30, 0x18, 0x20, 0x18, 0x00, 0x30, 0x00, 0x60, 0x00, 0x60, 0x00, 0xC0, 0x00, 0xC0, 0x01, 0x80, 0x01, 0x80, 0x03, 0x00, 0x03, 0x00, 0x06, 0x00, 0x06, 0x00, 0x0C, 0x00, 0x18, 0x02, 0x18, 0x06, 0x30, 0x04, 0x30, 0x1C, 0x7F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"Z\",58*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00}, /*\"[\",59*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x18, 0x00, 0x08, 0x00, 0x0C, 0x00, 0x04, 0x00, 0x06, 0x00, 0x06, 0x00, 0x02, 0x00, 0x03, 0x00, 0x01, 0x00, 0x01, 0x80, 0x01, 0x80, 0x00, 0x80, 0x00, 0xC0, 0x00, 0x40, 0x00, 0x60, 0x00, 0x60, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x18, 0x00, 0x18, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x06, 0x00, 0x00}, /*\"\\\",60*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x3F, 0xC0, 0x00, 0x00, 0x00, 0x00}, /*\"]\",61*/\n    {0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x03, 0xE0, 0x06, 0x20, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"^\",62*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF}, /*\"_\",63*/\n    {0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x03, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"`\",64*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xE0, 0x18, 0x30, 0x30, 0x18, 0x30, 0x18, 0x30, 0x18, 0x00, 0x38, 0x07, 0xD8, 0x1C, 0x18, 0x30, 0x18, 0x60, 0x18, 0x60, 0x18, 0x60, 0x18, 0x60, 0x19, 0x30, 0x79, 0x1F, 0x8E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"a\",65*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x78, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x19, 0xE0, 0x1A, 0x38, 0x1C, 0x18, 0x1C, 0x0C, 0x18, 0x0C, 0x18, 0x0C, 0x18, 0x0C, 0x18, 0x0C, 0x18, 0x0C, 0x18, 0x0C, 0x18, 0x0C, 0x18, 0x08, 0x1C, 0x18, 0x1C, 0x30, 0x13, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"b\",66*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xE0, 0x0E, 0x10, 0x0C, 0x18, 0x18, 0x18, 0x30, 0x18, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x04, 0x18, 0x04, 0x18, 0x08, 0x0C, 0x10, 0x03, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"c\",67*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x78, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x07, 0xD8, 0x0C, 0x38, 0x18, 0x18, 0x18, 0x18, 0x30, 0x18, 0x30, 0x18, 0x30, 0x18, 0x30, 0x18, 0x30, 0x18, 0x30, 0x18, 0x30, 0x18, 0x10, 0x18, 0x18, 0x38, 0x0C, 0x5E, 0x07, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"d\",68*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x0C, 0x30, 0x08, 0x18, 0x18, 0x08, 0x30, 0x0C, 0x30, 0x0C, 0x30, 0x0C, 0x3F, 0xFC, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x18, 0x04, 0x18, 0x08, 0x0E, 0x18, 0x03, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"e\",69*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x01, 0x86, 0x01, 0x06, 0x03, 0x06, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x3F, 0xF8, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x1F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"f\",70*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xEE, 0x0C, 0x36, 0x08, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x08, 0x18, 0x0C, 0x30, 0x0F, 0xE0, 0x18, 0x00, 0x18, 0x00, 0x1F, 0xC0, 0x0F, 0xF8, 0x18, 0x1C, 0x30, 0x0C, 0x30, 0x0C, 0x30, 0x0C, 0x18, 0x18, 0x07, 0xE0}, /*\"g\",71*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x78, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x19, 0xE0, 0x1A, 0x30, 0x1C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"h\",72*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x03, 0xC0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x1F, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x1F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"i\",73*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x78, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x03, 0xF0, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x18, 0x60, 0x18, 0x40, 0x0F, 0x80}, /*\"j\",74*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x78, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x7C, 0x18, 0x30, 0x18, 0x20, 0x18, 0x40, 0x18, 0x80, 0x19, 0x80, 0x1B, 0x80, 0x1E, 0xC0, 0x1C, 0xC0, 0x18, 0x60, 0x18, 0x30, 0x18, 0x30, 0x18, 0x18, 0x18, 0x1C, 0x7E, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"k\",75*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x1F, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x1F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"l\",76*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0xEF, 0x3C, 0x71, 0xC6, 0x61, 0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 0x86, 0x61, 0x86, 0xF3, 0xCF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"m\",77*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0xE0, 0x7A, 0x30, 0x1C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"n\",78*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x0C, 0x30, 0x08, 0x18, 0x18, 0x18, 0x10, 0x0C, 0x30, 0x0C, 0x30, 0x0C, 0x30, 0x0C, 0x30, 0x0C, 0x30, 0x0C, 0x30, 0x0C, 0x18, 0x18, 0x18, 0x18, 0x0C, 0x30, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"o\",79*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0xE0, 0x7A, 0x30, 0x1C, 0x18, 0x18, 0x08, 0x18, 0x0C, 0x18, 0x0C, 0x18, 0x0C, 0x18, 0x0C, 0x18, 0x0C, 0x18, 0x0C, 0x18, 0x0C, 0x18, 0x18, 0x1C, 0x18, 0x1E, 0x30, 0x19, 0xE0, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x7E, 0x00}, /*\"p\",80*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC8, 0x0C, 0x78, 0x18, 0x38, 0x18, 0x18, 0x30, 0x18, 0x30, 0x18, 0x30, 0x18, 0x30, 0x18, 0x30, 0x18, 0x30, 0x18, 0x30, 0x18, 0x10, 0x18, 0x18, 0x38, 0x0C, 0x78, 0x07, 0x98, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x7E}, /*\"q\",81*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x1C, 0x7E, 0x66, 0x06, 0x86, 0x07, 0x80, 0x07, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x7F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"r\",82*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xE4, 0x06, 0x1C, 0x0C, 0x0C, 0x0C, 0x04, 0x0C, 0x04, 0x0E, 0x00, 0x07, 0xC0, 0x01, 0xF0, 0x00, 0x78, 0x00, 0x1C, 0x10, 0x0C, 0x10, 0x0C, 0x18, 0x0C, 0x1C, 0x18, 0x13, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"s\",83*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x03, 0x00, 0x07, 0x00, 0x3F, 0xF8, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x04, 0x03, 0x04, 0x01, 0x88, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"t\",84*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x78, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x38, 0x0C, 0x5E, 0x07, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"u\",85*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x3E, 0x18, 0x0C, 0x18, 0x08, 0x18, 0x18, 0x0C, 0x10, 0x0C, 0x10, 0x04, 0x20, 0x06, 0x20, 0x06, 0x20, 0x03, 0x40, 0x03, 0x40, 0x03, 0xC0, 0x01, 0x80, 0x01, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"v\",86*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFB, 0xCF, 0x61, 0x86, 0x21, 0x84, 0x31, 0x84, 0x31, 0x84, 0x31, 0xC8, 0x11, 0xC8, 0x1A, 0xC8, 0x1A, 0x48, 0x1A, 0x70, 0x0E, 0x70, 0x0C, 0x70, 0x0C, 0x30, 0x0C, 0x20, 0x04, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"w\",87*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x7C, 0x0C, 0x10, 0x0E, 0x10, 0x06, 0x20, 0x03, 0x40, 0x03, 0x40, 0x01, 0x80, 0x01, 0x80, 0x01, 0xC0, 0x02, 0x60, 0x04, 0x60, 0x04, 0x30, 0x08, 0x18, 0x18, 0x18, 0x7C, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"x\",88*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x3E, 0x18, 0x18, 0x18, 0x10, 0x08, 0x10, 0x0C, 0x10, 0x04, 0x20, 0x06, 0x20, 0x06, 0x20, 0x02, 0x40, 0x03, 0x40, 0x01, 0x40, 0x01, 0x80, 0x01, 0x80, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x02, 0x00, 0x3E, 0x00, 0x3C, 0x00}, /*\"y\",89*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xF8, 0x30, 0x38, 0x30, 0x30, 0x20, 0x60, 0x20, 0xE0, 0x00, 0xC0, 0x01, 0x80, 0x03, 0x80, 0x03, 0x00, 0x06, 0x00, 0x0E, 0x04, 0x0C, 0x04, 0x18, 0x0C, 0x30, 0x18, 0x3F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"z\",90*/\n    {0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x10, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0xC0, 0x01, 0x80, 0x00, 0x40, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x10, 0x00, 0x0C, 0x00, 0x00}, /*\"{\",91*/\n    {0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80}, /*\"|\",92*/\n    {0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x04, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x01, 0x80, 0x00, 0xC0, 0x01, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x04, 0x00, 0x18, 0x00, 0x00, 0x00}, /*\"}\",93*/\n    {0x00, 0x00, 0x1E, 0x00, 0x23, 0x00, 0x41, 0x82, 0x40, 0x82, 0x00, 0xE4, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*\"~\",94*/\n};\n\n#endif /* LCDFONT_H_ */\n</code></pre>"},{"location":"DNESP32S3M/ACTUATION/LCD/code/#lcdh","title":"lcd.h","text":"<pre><code>/**\n * @file lcd.h\n * @author SHUAIWEN CUI (SHUAIWEN001@e.ntu.edu.sg)\n * @brief LCD driver header file\n * @version 1.0\n * @date 2024-11-18\n * @ref Alinetek LCD driver\n * @copyright Copyright (c) 2024\n */\n\n#ifndef __LCD_H__\n#define __LCD_H__\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"driver/gpio.h\"\n#include \"spi.h\"\n\n/* Pin definitions */\n#define LCD_NUM_BL GPIO_NUM_41  /* Backlight control pin */\n#define LCD_NUM_WR GPIO_NUM_40  /* Write control pin */\n#define LCD_NUM_CS GPIO_NUM_39  /* Chip select pin */\n#define LCD_NUM_RST GPIO_NUM_38 /* Reset pin */\n\n/* IO operations */\n#define LCD_WR(x)                                                              \\\n    do                                                                         \\\n    {                                                                          \\\n        x ? (gpio_set_level(LCD_NUM_WR, 1)) : (gpio_set_level(LCD_NUM_WR, 0)); \\\n    } while (0)\n\n#define LCD_CS(x)                                                              \\\n    do                                                                         \\\n    {                                                                          \\\n        x ? (gpio_set_level(LCD_NUM_CS, 1)) : (gpio_set_level(LCD_NUM_CS, 0)); \\\n    } while (0)\n\n#define LCD_PWR(x)                                                             \\\n    do                                                                         \\\n    {                                                                          \\\n        x ? (gpio_set_level(LCD_NUM_BL, 1)) : (gpio_set_level(LCD_NUM_BL, 0)); \\\n    } while (0)\n\n#define LCD_RST(x)                                                               \\\n    do                                                                           \\\n    {                                                                            \\\n        x ? (gpio_set_level(LCD_NUM_RST, 1)) : (gpio_set_level(LCD_NUM_RST, 0)); \\\n    } while (0)\n\n/* Common color values */\n#define WHITE 0xFFFF   /* White */\n#define BLACK 0x0000   /* Black */\n#define RED 0xF800     /* Red */\n#define GREEN 0x07E0   /* Green */\n#define BLUE 0x001F    /* Blue */\n#define MAGENTA 0XF81F /* Magenta/Purple = BLUE + RED */\n#define YELLOW 0XFFE0  /* Yellow = GREEN + RED */\n#define CYAN 0X07FF    /* Cyan = GREEN + BLUE */\n\n/* Less common color values */\n#define BROWN 0XBC40      /* Brown */\n#define BRRED 0XFC07      /* Brown-red */\n#define GRAY 0X8430       /* Gray */\n#define DARKBLUE 0X01CF   /* Dark blue */\n#define LIGHTBLUE 0X7D7C  /* Light blue */\n#define GRAYBLUE 0X5458   /* Gray-blue */\n#define LIGHTGREEN 0X841F /* Light green */\n#define LGRAY 0XC618      /* Light gray (panel background) */\n#define LGRAYBLUE 0XA651  /* Light gray-blue (middle layer color) */\n#define LBBLUE 0X2B12     /* Light brown-blue (selection bar highlight color) */\n\n/* Scan direction definitions */\n#define L2R_U2D 0 /* Left to right, top to bottom */\n#define L2R_D2U 1 /* Left to right, bottom to top */\n#define R2L_U2D 2 /* Right to left, top to bottom */\n#define R2L_D2U 3 /* Right to left, bottom to top */\n#define U2D_L2R 4 /* Top to bottom, left to right */\n#define U2D_R2L 5 /* Top to bottom, right to left */\n#define D2U_L2R 6 /* Bottom to top, left to right */\n#define D2U_R2L 7 /* Bottom to top, right to left */\n\n#define DFT_SCAN_DIR L2R_U2D /* Default scan direction */\n\n/* LCD information structure */\ntypedef struct _lcd_obj_t\n{\n    uint16_t width;   /* Width */\n    uint16_t height;  /* Height */\n    uint8_t dir;      /* Screen orientation: 0 = vertical, 1 = horizontal */\n    uint16_t wramcmd; /* Write GRAM command */\n    uint16_t setxcmd; /* Set X coordinate command */\n    uint16_t setycmd; /* Set Y coordinate command */\n    uint16_t wr;      /* Command/Data IO */\n    uint16_t cs;      /* Chip select IO */\n    uint16_t bl;      /* Backlight */\n    uint16_t rst;     /* Reset */\n} lcd_obj_t;\n\n/* LCD buffer size settings - modify with caution!\n   Changing these values may affect lcd_clear/lcd_fill/lcd_draw_line functions */\n#define LCD_TOTAL_BUF_SIZE (160 * 80 * 2) /* Total buffer size */\n#define LCD_BUF_SIZE 2560                 /* Partial buffer size */\n\n/* Exported variables */\nextern lcd_obj_t lcd_self;\nextern uint8_t lcd_buf[LCD_TOTAL_BUF_SIZE];\n\n/* Function declarations */\nvoid lcd_init(void);                                                                                                  /* Initialize the LCD */\nvoid lcd_clear(uint16_t color);                                                                                       /* Clear the screen */\nvoid lcd_scan_dir(uint8_t dir);                                                                                       /* Set the LCD auto scan direction */\nvoid lcd_write_data(const uint8_t *data, int len);                                                                    /* Write data to the LCD */\nvoid lcd_write_data16(uint16_t data);                                                                                 /* Write 16-bit data to the LCD */\nvoid lcd_set_cursor(uint16_t xpos, uint16_t ypos);                                                                    /* Set the cursor position */\nvoid lcd_set_window(uint16_t xstar, uint16_t ystar, uint16_t xend, uint16_t yend);                                    /* Set the display window size */\nvoid lcd_fill(uint16_t sx, uint16_t sy, uint16_t ex, uint16_t ey, uint16_t color);                                    /* Fill a specific area with a single color */\nvoid lcd_show_num(uint16_t x, uint16_t y, uint32_t num, uint8_t len, uint8_t size, uint16_t color);                   /* Display a number with len digits */\nvoid lcd_show_xnum(uint16_t x, uint16_t y, uint32_t num, uint8_t len, uint8_t size, uint8_t mode, uint16_t color);    /* Display an extended number with len digits */\nvoid lcd_show_string(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t size, char *p, uint16_t color); /* Display a string */\nvoid lcd_draw_rectangle(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color);                          /* Draw a rectangle */\nvoid lcd_draw_hline(uint16_t x, uint16_t y, uint16_t len, uint16_t color);                                            /* Draw a horizontal line */\nvoid lcd_draw_line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);                               /* Draw a straight or slanted line */\nvoid lcd_draw_pixel(uint16_t x, uint16_t y, uint16_t color);                                                          /* Draw a pixel */\nvoid lcd_show_char(uint16_t x, uint16_t y, uint8_t chr, uint8_t size, uint8_t mode, uint16_t color);                  /* Display a character at a specified position */\n\n#endif /* __LCD_H__ */\n</code></pre>"},{"location":"DNESP32S3M/ACTUATION/LCD/code/#lcdc","title":"lcd.c","text":"<pre><code>/**\n * @file lcd.c\n * @author SHUAIWEN CUI (SHUAIWEN001@e.ntu.edu.sg)\n * @brief  LCD driver source file\n * @version 1.0\n * @date 2024-11-18\n * @ref Alientek LCD Driver\n * @copyright Copyright (c) 2024\n *\n */\n\n#include \"lcd.h\"\n#include \"lcdfont.h\"\n\nspi_device_handle_t MY_LCD_Handle;\nuint8_t lcd_buf[LCD_TOTAL_BUF_SIZE];\nlcd_obj_t lcd_self;\n\n/* The LCD requires a set of initialization commands/parameters.\n   They are stored in this structure. */\ntypedef struct\n{\n    uint8_t cmd;       /* Command byte */\n    uint8_t data[16];  /* Data array for the command */\n    uint8_t databytes; /* Number of data bytes; Bit 7 = post-command delay; 0xFF = end of commands */\n} lcd_init_cmd_t;\n\n/**\n * @brief       Sends a command to the LCD using polling mode.\n *              Blocks until the transmission is complete.\n *              (Since the data transmission is minimal, polling mode improves speed.\n *              The overhead of interrupt handling exceeds that of polling in this case.)\n * @param       cmd 8-bit command data to be transmitted\n * @retval      None\n */\nvoid lcd_write_cmd(const uint8_t cmd)\n{\n    LCD_WR(0);                          // Set write signal to 0\n    spi2_write_cmd(MY_LCD_Handle, cmd); // Transmit the command via SPI\n}\n\n/**\n * @brief       Sends data to the LCD using polling mode.\n *              Blocks until the transmission is complete.\n *              (Since the data transmission is minimal, polling mode improves speed.\n *              The overhead of interrupt handling exceeds that of polling in this case.)\n * @param       data Pointer to the 8-bit data to be transmitted\n * @param       len  Length of the data to be transmitted\n * @retval      None\n */\nvoid lcd_write_data(const uint8_t *data, int len)\n{\n    LCD_WR(1);                                 // Set write signal to 1\n    spi2_write_data(MY_LCD_Handle, data, len); // Transmit the data via SPI\n}\n\n/**\n * @brief       Sends 16-bit data to the LCD using polling mode.\n *              Blocks until the transmission is complete.\n *              (Since the data transmission is minimal, polling mode improves speed.\n *              The overhead of interrupt handling exceeds that of polling in this case.)\n * @param       data 16-bit data to be transmitted\n * @retval      None\n */\nvoid lcd_write_data16(uint16_t data)\n{\n    uint8_t dataBuf[2] = {0, 0};\n    dataBuf[0] = data &gt;&gt; 8;                     // Extract the high byte\n    dataBuf[1] = data &amp; 0xFF;                   // Extract the low byte\n    LCD_WR(1);                                  // Set write signal to 1\n    spi2_write_data(MY_LCD_Handle, dataBuf, 2); // Transmit the 16-bit data via SPI\n}\n\n/**\n * @brief       Set the window size\n * @param       xstar: Top-left corner x-axis coordinate\n * @param       ystar: Top-left corner y-axis coordinate\n * @param       xend: Bottom-right corner x-axis coordinate\n * @param       yend: Bottom-right corner y-axis coordinate\n * @retval      None\n */\nvoid lcd_set_window(uint16_t xstar, uint16_t ystar, uint16_t xend, uint16_t yend)\n{\n    uint8_t databuf[4] = {0, 0, 0, 0};\n\n    if (lcd_self.dir == 1) /* Landscape orientation */\n    {\n        databuf[0] = (xstar + 1) &gt;&gt; 8;\n        databuf[1] = 0xFF &amp; (xstar + 1);\n        databuf[2] = (xend + 1) &gt;&gt; 8;\n        databuf[3] = 0xFF &amp; (xend + 1);\n        lcd_write_cmd(lcd_self.setxcmd);\n        lcd_write_data(databuf, 4);\n\n        databuf[0] = (ystar + 26) &gt;&gt; 8;\n        databuf[1] = 0xFF &amp; (ystar + 26);\n        databuf[2] = (yend + 26) &gt;&gt; 8;\n        databuf[3] = 0xFF &amp; (yend + 26);\n        lcd_write_cmd(lcd_self.setycmd);\n        lcd_write_data(databuf, 4);\n    }\n    else /* Portrait orientation */\n    {\n        databuf[0] = (xstar + 26) &gt;&gt; 8;\n        databuf[1] = 0xFF &amp; (xstar + 26);\n        databuf[2] = (xend + 26) &gt;&gt; 8;\n        databuf[3] = 0xFF &amp; (xend + 26);\n        lcd_write_cmd(lcd_self.setxcmd);\n        lcd_write_data(databuf, 4);\n\n        databuf[0] = (ystar + 1) &gt;&gt; 8;\n        databuf[1] = 0xFF &amp; (ystar + 1);\n        databuf[2] = (yend + 26) &gt;&gt; 8;\n        databuf[3] = 0xFF &amp; (yend + 26);\n        lcd_write_cmd(lcd_self.setycmd);\n        lcd_write_data(databuf, 4);\n    }\n\n    lcd_write_cmd(lcd_self.wramcmd); /* Begin writing to GRAM */\n}\n\n/**\n * @brief       Clear the LCD screen with a specified color\n * @param       color The color to use for clearing the screen\n * @retval      None\n */\nvoid lcd_clear(uint16_t color)\n{\n    uint16_t i, j;\n    uint8_t data[2] = {0};\n\n    data[0] = color &gt;&gt; 8; // High byte of the color\n    data[1] = color;      // Low byte of the color\n\n    lcd_set_window(0, 0, lcd_self.width - 1, lcd_self.height - 1); // Set the full screen as the window\n\n    for (j = 0; j &lt; LCD_BUF_SIZE / 2; j++) // Prepare buffer with the color data\n    {\n        lcd_buf[j * 2] = data[0];\n        lcd_buf[j * 2 + 1] = data[1];\n    }\n\n    for (i = 0; i &lt; (LCD_TOTAL_BUF_SIZE / LCD_BUF_SIZE); i++) // Write the buffer repeatedly to cover the entire screen\n    {\n        lcd_write_data(lcd_buf, LCD_BUF_SIZE);\n    }\n}\n\n/**\n * @brief       Fill a specified area with a single color\n * @param       (sx, sy), (ex, ey): Coordinates of the opposite corners of the rectangle to fill.\n *              The region size is: (ex - sx + 1) * (ey - sy + 1).\n * @param       color: The color to fill the area with (16-bit color for compatibility with LTDC)\n * @retval      None\n */\nvoid lcd_fill(uint16_t sx, uint16_t sy, uint16_t ex, uint16_t ey, uint16_t color)\n{\n    uint16_t i;\n    uint16_t j;\n    uint16_t width;\n    uint16_t height;\n\n    width = ex - sx + 1;            // Calculate the width of the fill area\n    height = ey - sy + 1;           // Calculate the height of the fill area\n    lcd_set_window(sx, sy, ex, ey); // Set the fill area as the active window\n\n    for (i = 0; i &lt; height; i++) // Iterate over the height of the area\n    {\n        for (j = 0; j &lt; width; j++) // Iterate over the width of the area\n        {\n            lcd_write_data16(color); // Write the color data to the LCD\n        }\n    }\n    lcd_set_window(sx, sy, ex, ey); // Reset the window to the original fill area\n}\n\n/**\n * @brief       Set the position of the cursor\n * @param       xpos: X-axis coordinate of the top-left corner\n * @param       ypos: Y-axis coordinate of the top-left corner\n * @retval      None\n */\nvoid lcd_set_cursor(uint16_t xpos, uint16_t ypos)\n{\n    lcd_set_window(xpos, ypos, xpos, ypos); // Set the window to a single pixel at the cursor position\n}\n\n/**\n * @brief       Set the auto-scan direction of the LCD (not applicable for RGB screens)\n * @param       dir: 0~7, representing 8 directions (specific definitions can be found in lcd.h)\n * @retval      None\n */\nvoid lcd_scan_dir(uint8_t dir)\n{\n    uint8_t regval = 0;\n    uint8_t dirreg = 0;\n    uint16_t temp;\n\n    /* For landscape mode, the 1963 IC does not change scan direction, other ICs do.\n       For portrait mode, the 1963 IC changes direction, other ICs do not. */\n    if (lcd_self.dir == 1)\n    {\n        dir = 1;\n    }\n    else\n    {\n        dir = 0;\n    }\n\n    switch (dir)\n    {\n    case 0: /* Portrait mode, top-right corner is (0, 0) */\n        regval |= 0x08;\n        break;\n\n    case 1: /* Landscape mode, top-left corner is (0, 0) */\n        regval |= 0xA8;\n        break;\n\n    case 2: /* Portrait mode, bottom-left corner is (0, 0) */\n        regval |= 0xC8;\n        break;\n\n    case 3: /* Landscape mode, bottom-right corner is (0, 0) */\n        regval |= 0x78;\n        break;\n    }\n\n    dirreg = 0x36; /* For most driver ICs, the 0x36 register controls this setting */\n\n    uint8_t data_send[1] = {regval}; // Data to be sent to the register\n\n    lcd_write_cmd(dirreg);        // Write command to set direction\n    lcd_write_data(data_send, 1); // Send the direction data\n\n    if (regval &amp; 0x20)\n    {\n        if (lcd_self.width &lt; lcd_self.height) /* Swap X and Y dimensions */\n        {\n            temp = lcd_self.width;\n            lcd_self.width = lcd_self.height;\n            lcd_self.height = temp;\n        }\n    }\n    else\n    {\n        if (lcd_self.width &gt; lcd_self.height) /* Swap X and Y dimensions */\n        {\n            temp = lcd_self.width;\n            lcd_self.width = lcd_self.height;\n            lcd_self.height = temp;\n        }\n    }\n\n    lcd_set_window(0, 0, lcd_self.width, lcd_self.height); // Reset the window size\n}\n\n/**\n * @brief       Set the display orientation of the LCD\n * @param       dir: 0 for portrait mode; 1 for landscape mode\n * @retval      None\n */\nvoid lcd_display_dir(uint8_t dir)\n{\n    lcd_self.dir = dir;\n\n    if (lcd_self.dir == 0) /* Portrait mode */\n    {\n        lcd_self.width = 80;     // Default width for portrait\n        lcd_self.height = 160;   // Default height for portrait\n        lcd_self.wramcmd = 0x2C; // Write RAM command\n        lcd_self.setxcmd = 0x2A; // Set X coordinate command\n        lcd_self.setycmd = 0x2B; // Set Y coordinate command\n    }\n    else /* Landscape mode */\n    {\n        lcd_self.width = 160;    // Default width for landscape\n        lcd_self.height = 80;    // Default height for landscape\n        lcd_self.wramcmd = 0x2C; // Write RAM command\n        lcd_self.setxcmd = 0x2A; // Set X coordinate command\n        lcd_self.setycmd = 0x2B; // Set Y coordinate command\n    }\n\n    lcd_scan_dir(lcd_self.dir); // Set default scan direction\n}\n\n/**\n * @brief       Perform a hardware reset on the LCD\n * @param       None\n * @retval      None\n */\nvoid lcd_hard_reset(void)\n{\n    /* Reset the display */\n    LCD_RST(0);      // Pull the reset pin low\n    vTaskDelay(200); // Delay for 200ms\n    LCD_RST(1);      // Pull the reset pin high\n    vTaskDelay(200); // Delay for 200ms\n}\n\n/**\n * @brief       Draw a single pixel on the LCD\n * @param       x: X-axis coordinate of the pixel\n * @param       y: Y-axis coordinate of the pixel\n * @param       color: Color value of the pixel\n * @retval      None\n */\nvoid lcd_draw_pixel(uint16_t x, uint16_t y, uint16_t color)\n{\n    lcd_set_cursor(x, y);    // Set the cursor to the specified coordinates\n    lcd_write_data16(color); // Write the color data for the pixel\n}\n\n/**\n * @brief       Draw a line (straight or diagonal) on the LCD\n * @param       x1, y1: Starting point coordinates\n * @param       x2, y2: Ending point coordinates\n * @param       color: Color value to fill the line\n * @retval      None\n */\nvoid lcd_draw_line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)\n{\n    uint16_t t;\n    int xerr = 0, yerr = 0, delta_x, delta_y, distance;\n    int incx, incy, urow, ucol;\n\n    delta_x = x2 - x1; /* Calculate the x-coordinate increment */\n    delta_y = y2 - y1; /* Calculate the y-coordinate increment */\n    urow = x1;         /* Initialize the current x-coordinate */\n    ucol = y1;         /* Initialize the current y-coordinate */\n\n    if (delta_x &gt; 0)\n    {\n        incx = 1; /* Set step direction for x */\n    }\n    else if (delta_x == 0)\n    {\n        incx = 0; /* Vertical line */\n    }\n    else\n    {\n        incx = -1;\n        delta_x = -delta_x;\n    }\n    if (delta_y &gt; 0)\n    {\n        incy = 1; /* Set step direction for y */\n    }\n    else if (delta_y == 0)\n    {\n        incy = 0; /* Horizontal line */\n    }\n    else\n    {\n        incy = -1;\n        delta_y = -delta_y;\n    }\n\n    if (delta_x &gt; delta_y)\n    {\n        distance = delta_x; /* Use x as the primary axis */\n    }\n    else\n    {\n        distance = delta_y; /* Use y as the primary axis */\n    }\n\n    for (t = 0; t &lt;= distance + 1; t++) /* Draw the line */\n    {\n        lcd_draw_pixel(urow, ucol, color); /* Plot the pixel */\n        xerr += delta_x;\n        yerr += delta_y;\n\n        if (xerr &gt; distance)\n        {\n            xerr -= distance;\n            urow += incx; /* Increment x */\n        }\n\n        if (yerr &gt; distance)\n        {\n            yerr -= distance;\n            ucol += incy; /* Increment y */\n        }\n    }\n}\n\n/**\n * @brief       Draw a horizontal line\n * @param       x: Starting x-coordinate\n * @param       y: Starting y-coordinate\n * @param       len: Length of the line\n * @param       color: Color of the line\n * @retval      None\n */\nvoid lcd_draw_hline(uint16_t x, uint16_t y, uint16_t len, uint16_t color)\n{\n    if ((len == 0) || (x &gt; lcd_self.width) || (y &gt; lcd_self.height))\n        return;\n\n    lcd_fill(x, y, x + len - 1, y, color); // Fill a rectangle with height 1 as the horizontal line\n}\n\n/**\n * @brief       Draw a rectangle\n * @param       x0, y0: Coordinates of the top-left corner\n * @param       x1, y1: Coordinates of the bottom-right corner\n * @param       color: Color of the rectangle\n * @retval      None\n */\nvoid lcd_draw_rectangle(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color)\n{\n    lcd_draw_line(x0, y0, x1, y0, color); // Top edge\n    lcd_draw_line(x0, y0, x0, y1, color); // Left edge\n    lcd_draw_line(x0, y1, x1, y1, color); // Bottom edge\n    lcd_draw_line(x1, y0, x1, y1, color); // Right edge\n}\n\n/**\n * @brief       Draw a circle\n * @param       x0, y0: Coordinates of the circle's center\n * @param       r: Radius of the circle\n * @param       color: Color of the circle\n * @retval      None\n */\nvoid lcd_draw_circle(uint16_t x0, uint16_t y0, uint16_t r, uint16_t color)\n{\n    int a, b;\n    int di;\n\n    a = 0;             // X-coordinate offset\n    b = r;             // Y-coordinate offset\n    di = 3 - (r &lt;&lt; 1); // Decision parameter for midpoint algorithm\n\n    while (a &lt;= b)\n    {\n        lcd_draw_pixel(x0 - b, y0 - a, color); // 8-way symmetry\n        lcd_draw_pixel(x0 + b, y0 - a, color);\n        lcd_draw_pixel(x0 - a, y0 + b, color);\n        lcd_draw_pixel(x0 - b, y0 - a, color);\n        lcd_draw_pixel(x0 - a, y0 - b, color);\n        lcd_draw_pixel(x0 + b, y0 + a, color);\n        lcd_draw_pixel(x0 + a, y0 - b, color);\n        lcd_draw_pixel(x0 + a, y0 + b, color);\n        lcd_draw_pixel(x0 - b, y0 + a, color);\n        a++;\n\n        if (di &lt; 0) // Update decision parameter\n        {\n            di += 4 * a + 6;\n        }\n        else\n        {\n            di += 10 + 4 * (a - b);\n            b--;\n        }\n\n        lcd_draw_pixel(x0 + a, y0 + b, color); // Draw additional point due to symmetry\n    }\n}\n\n/**\n * @brief       Display a character at a specified position\n * @param       x, y  : Coordinates where the character will be displayed\n * @param       chr   : Character to display, from \" \" to \"~\"\n * @param       size  : Font size, options: 12/16/24/32\n * @param       mode  : Overlay mode (1) or non-overlay mode (0)\n * @param       color : Color of the character\n * @retval      None\n */\nvoid lcd_show_char(uint16_t x, uint16_t y, uint8_t chr, uint8_t size, uint8_t mode, uint16_t color)\n{\n    uint8_t temp = 0, t1 = 0, t = 0;\n    uint8_t *pfont = 0;\n    uint8_t csize = 0; /* Number of bytes for the font matrix of one character */\n    uint16_t colortemp = 0;\n    uint8_t sta = 0;\n\n    csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2); /* Calculate font matrix byte size for one character */\n    chr = chr - ' ';                                        /* Offset value (ASCII font starts at space character) */\n\n    if ((x &gt; (lcd_self.width - size / 2)) || (y &gt; (lcd_self.height - size)))\n    {\n        return;\n    }\n\n    lcd_set_window(x, y, x + size / 2 - 1, y + size - 1); /* Set the window area for the character */\n\n    switch (size)\n    {\n    case 12:\n        pfont = (uint8_t *)asc2_1206[chr]; /* Use 12x6 font */\n        break;\n\n    case 16:\n        pfont = (uint8_t *)asc2_1608[chr]; /* Use 16x8 font */\n        break;\n\n    case 24:\n        pfont = (uint8_t *)asc2_2412[chr]; /* Use 24x12 font */\n        break;\n\n    case 32:\n        pfont = (uint8_t *)asc2_3216[chr]; /* Use 32x16 font */\n        break;\n\n    default:\n        return;\n    }\n\n    if (size != 24)\n    {\n        csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);\n\n        for (t = 0; t &lt; csize; t++)\n        {\n            temp = pfont[t]; /* Retrieve font matrix data */\n\n            for (t1 = 0; t1 &lt; 8; t1++)\n            {\n                if (temp &amp; 0x80)\n                {\n                    colortemp = color;\n                }\n                else if (mode == 0) /* Transparent point, do not display */\n                {\n                    colortemp = 0xFFFF;\n                }\n\n                lcd_write_data16(colortemp);\n                temp &lt;&lt;= 1;\n            }\n        }\n    }\n    else\n    {\n        csize = (size * 16) / 8;\n\n        for (t = 0; t &lt; csize; t++)\n        {\n            temp = asc2_2412[chr][t];\n\n            if (t % 2 == 0)\n            {\n                sta = 8;\n            }\n            else\n            {\n                sta = 4;\n            }\n\n            for (t1 = 0; t1 &lt; sta; t1++)\n            {\n                if (temp &amp; 0x80)\n                {\n                    colortemp = color;\n                }\n                else if (mode == 0) /* Transparent point, do not display */\n                {\n                    colortemp = 0xFFFF;\n                }\n\n                lcd_write_data16(colortemp);\n                temp &lt;&lt;= 1;\n            }\n        }\n    }\n}\n\n/**\n * @brief       Function to calculate m raised to the power of n (m^n)\n * @param       m: Base value\n * @param       n: Exponent value\n * @retval      Result of m raised to the power of n (m^n)\n */\nuint32_t lcd_pow(uint8_t m, uint8_t n)\n{\n    uint32_t result = 1;\n\n    while (n--)\n        result *= m; // Multiply the result by m, n times\n\n    return result;\n}\n\n/**\n * @brief       Display a number with a specified length\n * @param       x, y : Starting coordinates\n * @param       num  : Number to display (0 ~ 2^32)\n * @param       len  : Number of digits to display\n * @param       size : Font size (12/16/24/32)\n * @param       color: Color of the number\n * @retval      None\n */\nvoid lcd_show_num(uint16_t x, uint16_t y, uint32_t num, uint8_t len, uint8_t size, uint16_t color)\n{\n    uint8_t t, temp;\n    uint8_t enshow = 0;\n\n    for (t = 0; t &lt; len; t++) /* Loop through the number of digits to display */\n    {\n        temp = (num / lcd_pow(10, len - t - 1)) % 10; /* Extract the digit at the current position */\n\n        if (enshow == 0 &amp;&amp; t &lt; (len - 1)) /* If display not enabled and there are more digits */\n        {\n            if (temp == 0)\n            {\n                lcd_show_char(x + (size / 2) * t, y, ' ', size, 0, color); /* Display a space as a placeholder */\n                continue;                                                  /* Skip to the next digit */\n            }\n            else\n            {\n                enshow = 1; /* Enable display */\n            }\n        }\n\n        lcd_show_char(x + (size / 2) * t, y, temp + '0', size, 0, color); /* Display the digit as a character */\n    }\n}\n\n/**\n * @brief       Extended display of a number with a specified length (including leading zeros)\n * @param       x, y : Starting coordinates\n * @param       num  : Number to display (0 ~ 2^32)\n * @param       len  : Number of digits to display\n * @param       size : Font size (12/16/24/32)\n * @param       mode : Display mode\n *              [7]: 0, no padding; 1, pad with zeros.\n *              [6:1]: Reserved\n *              [0]: 0, non-overlay display; 1, overlay display.\n * @param       color: Color of the number\n * @retval      None\n */\nvoid lcd_show_xnum(uint16_t x, uint16_t y, uint32_t num, uint8_t len, uint8_t size, uint8_t mode, uint16_t color)\n{\n    uint8_t t, temp;\n    uint8_t enshow = 0;\n\n    for (t = 0; t &lt; len; t++) /* Loop through the number of digits to display */\n    {\n        temp = (num / lcd_pow(10, len - t - 1)) % 10; /* Extract the digit at the current position */\n\n        if (enshow == 0 &amp;&amp; t &lt; (len - 1)) /* If display not enabled and there are more digits */\n        {\n            if (temp == 0)\n            {\n                if (mode &amp; 0x80) /* Pad with zero if enabled */\n                {\n                    lcd_show_char(x + (size / 2) * t, y, '0', size, mode &amp; 0x01, color); /* Display '0' as placeholder */\n                }\n                else\n                {\n                    lcd_show_char(x + (size / 2) * t, y, ' ', size, mode &amp; 0x01, color); /* Display space as placeholder */\n                }\n                continue;\n            }\n            else\n            {\n                enshow = 1; /* Enable display */\n            }\n        }\n        lcd_show_char(x + (size / 2) * t, y, temp + '0', size, mode &amp; 0x01, color); /* Display the digit as a character */\n    }\n}\n\n/**\n * @brief       Display a string within a specified area\n * @param       x, y         : Starting coordinates\n * @param       width, height: Dimensions of the display area\n * @param       size         : Font size (12/16/24/32)\n * @param       p            : Pointer to the string\n * @param       color        : Color of the string\n * @retval      None\n */\nvoid lcd_show_string(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t size, char *p, uint16_t color)\n{\n    uint8_t x0 = x; // Save the initial x-coordinate\n    width += x;     // Calculate the maximum x-boundary\n    height += y;    // Calculate the maximum y-boundary\n\n    while ((*p &lt;= '~') &amp;&amp; (*p &gt;= ' ')) /* Check if the character is valid */\n    {\n        if (x &gt;= width) // If the x-coordinate exceeds the width\n        {\n            x = x0;    // Reset to the initial x-coordinate\n            y += size; // Move to the next line\n        }\n\n        if (y &gt;= height) // If the y-coordinate exceeds the height, exit\n            break;\n\n        lcd_show_char(x, y, *p, size, 0, color); // Display the current character\n        x += size / 2;                           // Move to the next character position\n        p++;                                     // Advance the string pointer\n    }\n}\n\n/**\n * @brief       Turn on the LCD\n * @param       None\n * @retval      None (Initialization successful)\n */\nvoid lcd_on(void)\n{\n    LCD_PWR(1);     // Power on the LCD\n    vTaskDelay(10); // Delay for 10 ms\n}\n\n/**\n * @brief       Turn off the LCD\n * @param       None\n * @retval      None (Initialization successful)\n */\nvoid lcd_off(void)\n{\n    LCD_PWR(0);     // Power off the LCD\n    vTaskDelay(10); // Delay for 10 ms\n}\n\n/**\n * @brief       Initialize the LCD\n * @param       None\n * @retval      None\n */\nvoid lcd_init(void)\n{\n    int cmd = 0;\n    esp_err_t ret = 0;\n\n    lcd_self.dir = 0;\n    lcd_self.wr = LCD_NUM_WR;   /* Configure WR pin */\n    lcd_self.cs = LCD_NUM_CS;   /* Configure CS pin */\n    lcd_self.bl = LCD_NUM_BL;   /* Configure BL pin */\n    lcd_self.rst = LCD_NUM_RST; /* Configure RST pin */\n\n    gpio_config_t gpio_init_struct;\n\n    /* SPI driver interface configuration */\n    spi_device_interface_config_t devcfg = {\n        .clock_speed_hz = 60 * 1000 * 1000, /* SPI clock frequency */\n        .mode = 0,                          /* SPI mode 0 */\n        .spics_io_num = lcd_self.cs,        /* SPI device pin */\n        .queue_size = 7,                    /* Transaction queue size */\n    };\n\n    /* Add SPI device to the bus */\n    ret = spi_bus_add_device(SPI2_HOST, &amp;devcfg, &amp;MY_LCD_Handle); /* Configure SPI bus device */\n    ESP_ERROR_CHECK(ret);\n\n    /* Configure WR pin */\n    gpio_init_struct.intr_type = GPIO_INTR_DISABLE;        /* Disable pin interrupt */\n    gpio_init_struct.mode = GPIO_MODE_OUTPUT;              /* Set as output mode */\n    gpio_init_struct.pin_bit_mask = 1ull &lt;&lt; lcd_self.wr;   /* Configure pin bit mask */\n    gpio_init_struct.pull_down_en = GPIO_PULLDOWN_DISABLE; /* Disable pull-down */\n    gpio_init_struct.pull_up_en = GPIO_PULLUP_ENABLE;      /* Enable pull-up */\n    gpio_config(&amp;gpio_init_struct);                        /* Apply pin configuration */\n    /* Configure BL pin */\n    gpio_init_struct.pin_bit_mask = 1ull &lt;&lt; lcd_self.bl;  /* Configure pin bit mask */\n    gpio_init_struct.pull_down_en = GPIO_PULLDOWN_ENABLE; /* Enable pull-down */\n    gpio_init_struct.pull_up_en = GPIO_PULLUP_DISABLE;    /* Disable pull-up */\n    gpio_config(&amp;gpio_init_struct);                       /* Apply pin configuration */\n    /* Configure RST pin */\n    gpio_init_struct.pin_bit_mask = 1ull &lt;&lt; lcd_self.rst;  /* Configure pin bit mask */\n    gpio_init_struct.pull_down_en = GPIO_PULLDOWN_DISABLE; /* Disable pull-down */\n    gpio_init_struct.pull_up_en = GPIO_PULLUP_ENABLE;      /* Enable pull-up */\n    gpio_config(&amp;gpio_init_struct);                        /* Apply pin configuration */\n\n    lcd_off();        /* Turn off the LCD */\n    lcd_hard_reset(); /* Perform hardware reset */\n\n    /* Initialization sequence for 0.96 inch LCD */\n    lcd_init_cmd_t ili_init_cmds[] =\n        {\n            {0x11, {0}, 0x80},\n            {0x21, {0}, 0x80},\n            {0xB1, {0x05, 0x3A, 0x3A}, 3},\n            {0xB2, {0x05, 0x3A, 0x3A}, 3},\n            {0xB3, {0x05, 0x3A, 0x3A, 0x05, 0x3A, 0x3A}, 6},\n            {0xB4, {0x03}, 1},\n            {0xC0, {0x62, 0x02, 0x04}, 3},\n            {0xC1, {0xC0}, 1},\n            {0xC2, {0x0D, 0x00}, 2},\n            {0xC3, {0x8D, 0x6A}, 2},\n            {0xC4, {0x8D, 0xEE}, 2},\n            {0xC5, {0x0E}, 1},\n            {0xE0, {0x10, 0x0E, 0x02, 0x03, 0x0E, 0x07, 0x02, 0x07, 0x0A, 0x12, 0x27, 0x37, 0x00, 0x0D, 0x0E, 0x10}, 16},\n            {0xE1, {0x10, 0x0E, 0x03, 0x03, 0x0F, 0x06, 0x02, 0x08, 0x0A, 0x13, 0x26, 0x36, 0x00, 0x0D, 0x0E, 0x10}, 16},\n            {0x3A, {0x05}, 1},\n            {0x36, {0xA8}, 1},\n            {0x29, {0}, 0x80},\n            {0, {0}, 0xFF},\n        };\n\n    /* Send initialization sequence */\n    while (ili_init_cmds[cmd].databytes != 0xFF)\n    {\n        lcd_write_cmd(ili_init_cmds[cmd].cmd);\n        lcd_write_data(ili_init_cmds[cmd].data, ili_init_cmds[cmd].databytes &amp; 0x1F);\n\n        if (ili_init_cmds[cmd].databytes &amp; 0x80)\n        {\n            vTaskDelay(120);\n        }\n\n        cmd++;\n    }\n\n    lcd_display_dir(1); /* Set screen orientation */\n    lcd_clear(WHITE);   /* Clear the screen */\n    lcd_on();           /* Turn on the LCD */\n}\n</code></pre>"},{"location":"DNESP32S3M/ACTUATION/LCD/code/#mainc","title":"main.c","text":"<pre><code>/**\n * @file main.c\n * @author SHUAIWEN CUI (SHUAIWEN001@e.ntu.edu.sg)\n * @brief \n * @version 1.0\n * @date 2024-11-17\n * \n * @copyright Copyright (c) 2024\n * \n */\n\n/* Dependencies */\n// Basic\n#include \"esp_system.h\"\n#include \"esp_chip_info.h\"\n#include \"esp_psram.h\"\n#include \"esp_flash.h\"\n#include \"nvs_flash.h\"\n#include \"esp_log.h\"\n\n// RTOS\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n\n// BSP\n#include \"led.h\"\n#include \"exit.h\"\n#include \"lcd.h\"\n#include \"spi.h\"\n\n\n/**\n * @brief Entry point of the program\n * @param None\n * @retval None\n */\nvoid app_main(void)\n{\n    uint8_t x = 0;\n    esp_err_t ret;\n\n\n    ret = nvs_flash_init();\n\n    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)\n    {\n        ESP_ERROR_CHECK(nvs_flash_erase());\n        ret = nvs_flash_init();\n    }\n\n    led_init();\n    spi2_init();\n    lcd_init();\n    vTaskDelay(500);\n\n    while (1)\n    {\n        switch (x)\n        {\n            case 0:\n            {\n                lcd_clear(WHITE);\n                break;\n            }\n            case 1:\n            {\n                lcd_clear(BLACK);\n                break;\n            }\n            case 2:\n            {\n                lcd_clear(BLUE);\n                break;\n            }\n            case 3:\n            {\n                lcd_clear(RED);\n                break;\n            }\n            case 4:\n            {\n                lcd_clear(MAGENTA);\n                break;\n            }\n            case 5:\n            {\n                lcd_clear(GREEN);\n                break;\n            }\n            case 6:\n            {\n                lcd_clear(CYAN);\n                break;\n            }\n            case 7:\n            {\n                lcd_clear(YELLOW);\n                break;\n            }\n            case 8:\n            {\n                lcd_clear(BRRED);\n                break;\n            }\n            case 9:\n            {\n                lcd_clear(GRAY);\n                break;\n            }\n            case 10:\n            {\n                lcd_clear(LGRAY);\n                break;\n            }\n            case 11:\n            {\n                lcd_clear(BROWN);\n                break;\n            }\n        }\n\n        lcd_show_string(0, 0, 240, 32, 32, \"ESP32\", RED);\n        lcd_show_string(0, 33, 240, 24, 24, \"SPILCD TEST\", RED);\n        lcd_show_string(0, 60, 240, 16, 16, \"CSW@NTU\", RED);\n        x++;\n\n        if (x == 12)\n        {\n            x = 0;\n        }\n\n        led_toggle();\n        vTaskDelay(500);\n    }\n}\n</code></pre>"},{"location":"DNESP32S3M/ACTUATION/LCD/integration/","title":"INTEGRATION","text":""},{"location":"DNESP32S3M/ACTUATION/LCD/integration/#introduction","title":"Introduction","text":"<p>Note</p> <p>In this section, we introduce how to integrate the lcder driver into the project.</p>"},{"location":"DNESP32S3M/ACTUATION/LCD/integration/#create-a-new-component","title":"Create a New Component","text":"<p>Warning</p> <p>Before you create a component in the <code>driver</code> directory, make sure you have incorporated the <code>driver</code> directory into the project by adding the path to the <code>driver</code> directory to the <code>EXTRA_COMPONENT_DIRS</code> variable in the project-level <code>CMakeLists.txt</code> file.</p> <p>Open the project in VSCode, open the integrated terminal, and type in</p> <p><pre><code>get_idf \n</code></pre> to actiate the ESP-IDF environment. Then type in the following command to create a new component named lcd`:</p> <pre><code>idf.py -C driver create-component lcd\n</code></pre> <p>The command above means to create a new component named <code>lcd</code> in the <code>driver</code> directory. After executing the command, you will see a new directory named <code>lcd</code> in the <code>driver</code> directory. And the command will automatically generate the <code>CMakeLists.txt</code> file for the new component, as well as the <code>lcd.h</code> and <code>lcd.c</code> files.</p> <p>Alternatively, you can mannually create the <code>lcd</code> directory in the <code>driver</code> directory, and then create the <code>CMakeLists.txt</code>, <code>lcd.h</code>, and <code>lcd.c</code> files in the <code>lcd</code> directory.</p> <p>Note</p> <p>There is also an <code>lcdfont.h</code> file in this chapter, which you can put in the <code>include</code> directory of the <code>lcd</code> directory.</p>"},{"location":"DNESP32S3M/ACTUATION/LCD/integration/#replace-the-code","title":"Replace the Code","text":"<p>Component Level</p> <p>Replace the code in this section into the <code>CMakelists.txt</code>, <code>lcdfont.h</code>\u3001<code>lcd.h</code>, and <code>lcd.c</code> files under the component.</p> <p>Project Level</p> <p>Replace the code in <code>main.c</code> with the corresponding code. No need to change the <code>CMakeLists.txt</code> file at the project level.</p>"},{"location":"DNESP32S3M/ACTUATION/LCD/integration/#compile-and-flash-the-project","title":"Compile and Flash the Project","text":"<p>Open the project in VSCode, open the integrated terminal, and type in</p> <pre><code>idf.py build flash monitor\n</code></pre> <p>Now, you will see the LCD screen light up and display content.</p>"},{"location":"DNESP32S3M/ACTUATION/LCD/lcd/","title":"LCD","text":""},{"location":"DNESP32S3M/ACTUATION/LCD/lcd/#esp32s3-minimal-system-board-with-096-inch-hd-ips-lcd-display","title":"ESP32S3 Minimal System Board with 0.96-Inch HD IPS LCD Display","text":"<p>The onboard 0.96-inch HD IPS LCD display has a resolution of 160x80 and supports 16-bit true color display. The display uses the ST7735S driver chip with built-in RAM, eliminating the need for external drivers or memory. The ESP32S3 chip can drive this display via the SPI interface. In 4-wire SPI communication mode, the 0.96-inch LCD screen requires only four signal lines (CS, SCL, SDA, RS (DC)).</p> <p> </p> <p>The screen connects to the PCB circuit via 13 pins. The pin details are as follows:</p> No. Name Description 1 TP0 NC 2 TP1 NC 3 SDA SPI communication MOSI signal line 4 SCL SPI communication SCK signal line 5 RS Command/Data signal line (Low: Command; High: Data) 6 RES Hardware reset pin (active low) 7 CS SPI communication chip select signal (active low) 8 GND Ground 9 NC NC 10 VCC 3.3V power supply 11 LEDK LCD backlight control pin (cathode) 12 LEDA LCD backlight control pin (anode) 13 GND Ground <p> </p> <p>From the above diagrams, it is evident that the write cycle of the 0.96-inch LCD module in 4-wire SPI mode is very fast (TSCYCW = 66ns), whereas the read cycle is relatively slower (TSCYCR = 150ns).</p> <p>The ST7735S LCD driver stores display data directly in its onboard RAM, which has a capacity of 132x162x18 bits. The ST7735S chip automatically displays data from its RAM to the LCD without an external clock, minimizing power consumption.</p>"},{"location":"DNESP32S3M/ACTUATION/LCD/lcd/#hardware-reset-requirements","title":"Hardware Reset Requirements","text":"<p>Before initializing the display module, the RST pin must be used to perform a hardware reset. The RST pin should be pulled low for at least 10 microseconds. After pulling RST high to end the reset, a delay of 120 milliseconds is required before data can be transmitted to the display module.</p>"},{"location":"DNESP32S3M/ACTUATION/LCD/lcd/#backlight-control","title":"Backlight Control","text":"<p>The LEDK pin controls the LCD backlight of the display module. This pin has a built-in pull-down resistor. The backlight is off when the LEDK pin is high or floating and turns on when the LEDK pin is pulled low.</p>"},{"location":"DNESP32S3M/ACTUATION/LCD/lcd/#color-depth","title":"Color Depth","text":"<p>The ST7735S supports a maximum color depth of 18 bits (262K colors), but 16-bit color depth (65K colors) is generally used for maximum speed. In 16-bit mode, the RGB565 format is used to transmit and store color data, as shown below:</p> <ul> <li>High 5 bits represent red.</li> <li>Middle 6 bits represent green.</li> <li>Low 5 bits represent blue.</li> <li>Larger values correspond to darker colors.</li> </ul>"},{"location":"DNESP32S3M/ACTUATION/LCD/lcd/#continuous-ram-readwrite-and-scan-direction-configuration","title":"Continuous RAM Read/Write and Scan Direction Configuration","text":"<p>The ST7735S allows continuous read/write operations in its RAM for color data on the LCD. The scan direction (RAM auto-increment direction) can be configured using command <code>0x36</code>, as shown below:</p> <p></p> <p>Command <code>0x36</code> configures six parameters, but only <code>MY</code>, <code>MX</code>, and <code>MV</code> are relevant for setting the LCD scan direction:</p> MY MX MV LCD Scan Direction (RAM Auto-Increment Direction) 0 0 0 Left to right, top to bottom 1 0 0 Left to right, bottom to top 0 1 0 Right to left, top to bottom 1 1 0 Right to left, bottom to top 0 0 1 Top to bottom, left to right 1 0 1 Bottom to top, left to right 0 1 1 Top to bottom, right to left 1 1 1 Bottom to top, right to left <p>This flexibility allows efficient content rendering, such as displaying BMP images that decode data starting from the bottom-left corner. By setting the LCD scan direction appropriately, data can be filled into the LCD without repeatedly setting coordinates, improving display speed.</p>"},{"location":"DNESP32S3M/ACTUATION/LCD/lcd/#setting-address-for-color-data","title":"Setting Address for Color Data","text":"<p>Before writing color data to the ST7735S, the address must be set to specify which pixel on the LCD will receive the color data. Commands <code>0x2A</code> and <code>0x2B</code> are used to set the column and row addresses, respectively:</p> <ul> <li> <p>Command <code>0x2A</code>: </p> </li> <li> <p>Command <code>0x2B</code>: </p> </li> </ul> <p>With the default LCD scan direction (left to right, top to bottom), the <code>XS</code> and <code>XE</code> parameters of command <code>0x2A</code> and the <code>YS</code> and <code>YE</code> parameters of command <code>0x2B</code> define a region on the LCD. During continuous read/write operations, the ST7735S reads/writes color data in this region following the configured scan direction.</p>"},{"location":"DNESP32S3M/ACTUATION/LCD/lcd/#code","title":"Code","text":""},{"location":"DNESP32S3M/ACTUATION/LCD/lcd/#lcdfonth","title":"lcdfont.h","text":"<pre><code>/**\n * @file lcdfont.h\n * @author SHUAIWEN CUI (SHUAIWEN001@e.ntu.edu.sg)\n * @brief lcd font\n * @version 1.0\n * @date 2024-11-18\n * @ref Alientek LCD Driver\n * @copyright Copyright (c) 2024\n * \n */\n\n#ifndef __LCDFONT_H__\n#define __LCDFONT_H__\n\n/* Common ASCII Table\n * Offset: 32\n * ASCII Character Set: !\"#$%&amp;'()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\n * PC2LCD2002 Modulation Setting: Negative Code + Column-wise + Forward Direction + C51 Format\n * Total: 4 Character Sets (12x12, 16x16, 24x24, and 32x32). Users can add other resolutions as needed.\n * Bytes per Character: (size/8 + ((size%8) ? 1 : 0)) * (size/2), where size is the dot matrix size (e.g., 12/16/24/32...) defined when generating the font library.\n */\n\n\n/* 12x12 ASCII Character Set Dot Matrix */\nconst unsigned char asc2_1206[95][12]={\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\" \",0*/\n{0x00,0x00,0x00,0x00,0x3F,0x40,0x00,0x00,0x00,0x00,0x00,0x00},/*\"!\",1*/\n{0x00,0x00,0x30,0x00,0x40,0x00,0x30,0x00,0x40,0x00,0x00,0x00},/*\"\"\",2*/\n{0x09,0x00,0x0B,0xC0,0x3D,0x00,0x0B,0xC0,0x3D,0x00,0x09,0x00},/*\"#\",3*/\n{0x18,0xC0,0x24,0x40,0x7F,0xE0,0x22,0x40,0x31,0x80,0x00,0x00},/*\"$\",4*/\n{0x18,0x00,0x24,0xC0,0x1B,0x00,0x0D,0x80,0x32,0x40,0x01,0x80},/*\"%\",5*/\n{0x03,0x80,0x1C,0x40,0x27,0x40,0x1C,0x80,0x07,0x40,0x00,0x40},/*\"&amp;\",6*/\n{0x10,0x00,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"'\",7*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0x80,0x20,0x40,0x40,0x20},/*\"(\",8*/\n{0x00,0x00,0x40,0x20,0x20,0x40,0x1F,0x80,0x00,0x00,0x00,0x00},/*\")\",9*/\n{0x09,0x00,0x06,0x00,0x1F,0x80,0x06,0x00,0x09,0x00,0x00,0x00},/*\"*\",10*/\n{0x04,0x00,0x04,0x00,0x3F,0x80,0x04,0x00,0x04,0x00,0x00,0x00},/*\"+\",11*/\n{0x00,0x10,0x00,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\",\",12*/\n{0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x00,0x00},/*\"-\",13*/\n{0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\".\",14*/\n{0x00,0x20,0x01,0xC0,0x06,0x00,0x38,0x00,0x40,0x00,0x00,0x00},/*\"/\",15*/\n{0x1F,0x80,0x20,0x40,0x20,0x40,0x20,0x40,0x1F,0x80,0x00,0x00},/*\"0\",16*/\n{0x00,0x00,0x10,0x40,0x3F,0xC0,0x00,0x40,0x00,0x00,0x00,0x00},/*\"1\",17*/\n{0x18,0xC0,0x21,0x40,0x22,0x40,0x24,0x40,0x18,0x40,0x00,0x00},/*\"2\",18*/\n{0x10,0x80,0x20,0x40,0x24,0x40,0x24,0x40,0x1B,0x80,0x00,0x00},/*\"3\",19*/\n{0x02,0x00,0x0D,0x00,0x11,0x00,0x3F,0xC0,0x01,0x40,0x00,0x00},/*\"4\",20*/\n{0x3C,0x80,0x24,0x40,0x24,0x40,0x24,0x40,0x23,0x80,0x00,0x00},/*\"5\",21*/\n{0x1F,0x80,0x24,0x40,0x24,0x40,0x34,0x40,0x03,0x80,0x00,0x00},/*\"6\",22*/\n{0x30,0x00,0x20,0x00,0x27,0xC0,0x38,0x00,0x20,0x00,0x00,0x00},/*\"7\",23*/\n{0x1B,0x80,0x24,0x40,0x24,0x40,0x24,0x40,0x1B,0x80,0x00,0x00},/*\"8\",24*/\n{0x1C,0x00,0x22,0xC0,0x22,0x40,0x22,0x40,0x1F,0x80,0x00,0x00},/*\"9\",25*/\n{0x00,0x00,0x00,0x00,0x08,0x40,0x00,0x00,0x00,0x00,0x00,0x00},/*\":\",26*/\n{0x00,0x00,0x00,0x00,0x04,0x60,0x00,0x00,0x00,0x00,0x00,0x00},/*\";\",27*/\n{0x00,0x00,0x04,0x00,0x0A,0x00,0x11,0x00,0x20,0x80,0x40,0x40},/*\"&lt;\",28*/\n{0x09,0x00,0x09,0x00,0x09,0x00,0x09,0x00,0x09,0x00,0x00,0x00},/*\"=\",29*/\n{0x00,0x00,0x40,0x40,0x20,0x80,0x11,0x00,0x0A,0x00,0x04,0x00},/*\"&gt;\",30*/\n{0x18,0x00,0x20,0x00,0x23,0x40,0x24,0x00,0x18,0x00,0x00,0x00},/*\"?\",31*/\n{0x1F,0x80,0x20,0x40,0x27,0x40,0x29,0x40,0x1F,0x40,0x00,0x00},/*\"@\",32*/\n{0x00,0x40,0x07,0xC0,0x39,0x00,0x0F,0x00,0x01,0xC0,0x00,0x40},/*\"A\",33*/\n{0x20,0x40,0x3F,0xC0,0x24,0x40,0x24,0x40,0x1B,0x80,0x00,0x00},/*\"B\",34*/\n{0x1F,0x80,0x20,0x40,0x20,0x40,0x20,0x40,0x30,0x80,0x00,0x00},/*\"C\",35*/\n{0x20,0x40,0x3F,0xC0,0x20,0x40,0x20,0x40,0x1F,0x80,0x00,0x00},/*\"D\",36*/\n{0x20,0x40,0x3F,0xC0,0x24,0x40,0x2E,0x40,0x30,0xC0,0x00,0x00},/*\"E\",37*/\n{0x20,0x40,0x3F,0xC0,0x24,0x40,0x2E,0x00,0x30,0x00,0x00,0x00},/*\"F\",38*/\n{0x0F,0x00,0x10,0x80,0x20,0x40,0x22,0x40,0x33,0x80,0x02,0x00},/*\"G\",39*/\n{0x20,0x40,0x3F,0xC0,0x04,0x00,0x04,0x00,0x3F,0xC0,0x20,0x40},/*\"H\",40*/\n{0x20,0x40,0x20,0x40,0x3F,0xC0,0x20,0x40,0x20,0x40,0x00,0x00},/*\"I\",41*/\n{0x00,0x60,0x20,0x20,0x20,0x20,0x3F,0xC0,0x20,0x00,0x20,0x00},/*\"J\",42*/\n{0x20,0x40,0x3F,0xC0,0x24,0x40,0x0B,0x00,0x30,0xC0,0x20,0x40},/*\"K\",43*/\n{0x20,0x40,0x3F,0xC0,0x20,0x40,0x00,0x40,0x00,0x40,0x00,0xC0},/*\"L\",44*/\n{0x3F,0xC0,0x3C,0x00,0x03,0xC0,0x3C,0x00,0x3F,0xC0,0x00,0x00},/*\"M\",45*/\n{0x20,0x40,0x3F,0xC0,0x0C,0x40,0x23,0x00,0x3F,0xC0,0x20,0x00},/*\"N\",46*/\n{0x1F,0x80,0x20,0x40,0x20,0x40,0x20,0x40,0x1F,0x80,0x00,0x00},/*\"O\",47*/\n{0x20,0x40,0x3F,0xC0,0x24,0x40,0x24,0x00,0x18,0x00,0x00,0x00},/*\"P\",48*/\n{0x1F,0x80,0x21,0x40,0x21,0x40,0x20,0xE0,0x1F,0xA0,0x00,0x00},/*\"Q\",49*/\n{0x20,0x40,0x3F,0xC0,0x24,0x40,0x26,0x00,0x19,0xC0,0x00,0x40},/*\"R\",50*/\n{0x18,0xC0,0x24,0x40,0x24,0x40,0x22,0x40,0x31,0x80,0x00,0x00},/*\"S\",51*/\n{0x30,0x00,0x20,0x40,0x3F,0xC0,0x20,0x40,0x30,0x00,0x00,0x00},/*\"T\",52*/\n{0x20,0x00,0x3F,0x80,0x00,0x40,0x00,0x40,0x3F,0x80,0x20,0x00},/*\"U\",53*/\n{0x20,0x00,0x3E,0x00,0x01,0xC0,0x07,0x00,0x38,0x00,0x20,0x00},/*\"V\",54*/\n{0x38,0x00,0x07,0xC0,0x3C,0x00,0x07,0xC0,0x38,0x00,0x00,0x00},/*\"W\",55*/\n{0x20,0x40,0x39,0xC0,0x06,0x00,0x39,0xC0,0x20,0x40,0x00,0x00},/*\"X\",56*/\n{0x20,0x00,0x38,0x40,0x07,0xC0,0x38,0x40,0x20,0x00,0x00,0x00},/*\"Y\",57*/\n{0x30,0x40,0x21,0xC0,0x26,0x40,0x38,0x40,0x20,0xC0,0x00,0x00},/*\"Z\",58*/\n{0x00,0x00,0x00,0x00,0x7F,0xE0,0x40,0x20,0x40,0x20,0x00,0x00},/*\"[\",59*/\n{0x00,0x00,0x70,0x00,0x0C,0x00,0x03,0x80,0x00,0x40,0x00,0x00},/*\"\\\",60*/\n{0x00,0x00,0x40,0x20,0x40,0x20,0x7F,0xE0,0x00,0x00,0x00,0x00},/*\"]\",61*/\n{0x00,0x00,0x20,0x00,0x40,0x00,0x20,0x00,0x00,0x00,0x00,0x00},/*\"^\",62*/\n{0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10},/*\"_\",63*/\n{0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"`\",64*/\n{0x00,0x00,0x02,0x80,0x05,0x40,0x05,0x40,0x03,0xC0,0x00,0x40},/*\"a\",65*/\n{0x20,0x00,0x3F,0xC0,0x04,0x40,0x04,0x40,0x03,0x80,0x00,0x00},/*\"b\",66*/\n{0x00,0x00,0x03,0x80,0x04,0x40,0x04,0x40,0x06,0x40,0x00,0x00},/*\"c\",67*/\n{0x00,0x00,0x03,0x80,0x04,0x40,0x24,0x40,0x3F,0xC0,0x00,0x40},/*\"d\",68*/\n{0x00,0x00,0x03,0x80,0x05,0x40,0x05,0x40,0x03,0x40,0x00,0x00},/*\"e\",69*/\n{0x00,0x00,0x04,0x40,0x1F,0xC0,0x24,0x40,0x24,0x40,0x20,0x00},/*\"f\",70*/\n{0x00,0x00,0x02,0xE0,0x05,0x50,0x05,0x50,0x06,0x50,0x04,0x20},/*\"g\",71*/\n{0x20,0x40,0x3F,0xC0,0x04,0x40,0x04,0x00,0x03,0xC0,0x00,0x40},/*\"h\",72*/\n{0x00,0x00,0x04,0x40,0x27,0xC0,0x00,0x40,0x00,0x00,0x00,0x00},/*\"i\",73*/\n{0x00,0x10,0x00,0x10,0x04,0x10,0x27,0xE0,0x00,0x00,0x00,0x00},/*\"j\",74*/\n{0x20,0x40,0x3F,0xC0,0x01,0x40,0x07,0x00,0x04,0xC0,0x04,0x40},/*\"k\",75*/\n{0x20,0x40,0x20,0x40,0x3F,0xC0,0x00,0x40,0x00,0x40,0x00,0x00},/*\"l\",76*/\n{0x07,0xC0,0x04,0x00,0x07,0xC0,0x04,0x00,0x03,0xC0,0x00,0x00},/*\"m\",77*/\n{0x04,0x40,0x07,0xC0,0x04,0x40,0x04,0x00,0x03,0xC0,0x00,0x40},/*\"n\",78*/\n{0x00,0x00,0x03,0x80,0x04,0x40,0x04,0x40,0x03,0x80,0x00,0x00},/*\"o\",79*/\n{0x04,0x10,0x07,0xF0,0x04,0x50,0x04,0x40,0x03,0x80,0x00,0x00},/*\"p\",80*/\n{0x00,0x00,0x03,0x80,0x04,0x40,0x04,0x50,0x07,0xF0,0x00,0x10},/*\"q\",81*/\n{0x04,0x40,0x07,0xC0,0x02,0x40,0x04,0x00,0x04,0x00,0x00,0x00},/*\"r\",82*/\n{0x00,0x00,0x06,0x40,0x05,0x40,0x05,0x40,0x04,0xC0,0x00,0x00},/*\"s\",83*/\n{0x00,0x00,0x04,0x00,0x1F,0x80,0x04,0x40,0x00,0x40,0x00,0x00},/*\"t\",84*/\n{0x04,0x00,0x07,0x80,0x00,0x40,0x04,0x40,0x07,0xC0,0x00,0x40},/*\"u\",85*/\n{0x04,0x00,0x07,0x00,0x04,0xC0,0x01,0x80,0x06,0x00,0x04,0x00},/*\"v\",86*/\n{0x06,0x00,0x01,0xC0,0x07,0x00,0x01,0xC0,0x06,0x00,0x00,0x00},/*\"w\",87*/\n{0x04,0x40,0x06,0xC0,0x01,0x00,0x06,0xC0,0x04,0x40,0x00,0x00},/*\"x\",88*/\n{0x04,0x10,0x07,0x10,0x04,0xE0,0x01,0x80,0x06,0x00,0x04,0x00},/*\"y\",89*/\n{0x00,0x00,0x04,0x40,0x05,0xC0,0x06,0x40,0x04,0x40,0x00,0x00},/*\"z\",90*/\n{0x00,0x00,0x00,0x00,0x04,0x00,0x7B,0xE0,0x40,0x20,0x00,0x00},/*\"{\",91*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xF0,0x00,0x00,0x00,0x00},/*\"|\",92*/\n{0x00,0x00,0x40,0x20,0x7B,0xE0,0x04,0x00,0x00,0x00,0x00,0x00},/*\"}\",93*/\n{0x40,0x00,0x80,0x00,0x40,0x00,0x20,0x00,0x20,0x00,0x40,0x00},/*\"~\",94*/\n};\n\n/* 16x16 ASCII Character Set Dot Matrix */\nconst unsigned char asc2_1608[95][16]={ \n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\" \",0*/\n{0x00,0x00,0x00,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x00,0x00,0x10,0x10,0x00,0x00},/*\"!\",1*/\n{0x00,0x12,0x24,0x24,0x48,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"\"\",2*/\n{0x00,0x00,0x00,0x12,0x12,0x12,0x7E,0x24,0x24,0x24,0x7E,0x24,0x24,0x24,0x00,0x00},/*\"#\",3*/\n{0x00,0x00,0x08,0x3C,0x4A,0x4A,0x48,0x38,0x0C,0x0A,0x0A,0x4A,0x4A,0x3C,0x08,0x08},/*\"$\",4*/\n{0x00,0x00,0x00,0x44,0xA4,0xA8,0xA8,0xB0,0x54,0x1A,0x2A,0x2A,0x4A,0x44,0x00,0x00},/*\"%\",5*/\n{0x00,0x00,0x00,0x30,0x48,0x48,0x48,0x50,0x6E,0xA4,0x94,0x98,0x89,0x76,0x00,0x00},/*\"&amp;\",6*/\n{0x00,0x60,0x20,0x20,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"'\",7*/\n{0x00,0x02,0x04,0x08,0x08,0x10,0x10,0x10,0x10,0x10,0x10,0x08,0x08,0x04,0x02,0x00},/*\"(\",8*/\n{0x00,0x40,0x20,0x10,0x10,0x08,0x08,0x08,0x08,0x08,0x08,0x10,0x10,0x20,0x40,0x00},/*\")\",9*/\n{0x00,0x00,0x00,0x00,0x10,0x10,0xD6,0x38,0x38,0xD6,0x10,0x10,0x00,0x00,0x00,0x00},/*\"*\",10*/\n{0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x08,0x7F,0x08,0x08,0x08,0x00,0x00,0x00,0x00},/*\"+\",11*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x20,0x20,0x40},/*\",\",12*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"-\",13*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00,0x00},/*\".\",14*/\n{0x00,0x00,0x02,0x04,0x04,0x04,0x08,0x08,0x10,0x10,0x10,0x20,0x20,0x40,0x40,0x00},/*\"/\",15*/\n{0x00,0x00,0x00,0x18,0x24,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x24,0x18,0x00,0x00},/*\"0\",16*/\n{0x00,0x00,0x00,0x08,0x38,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00},/*\"1\",17*/\n{0x00,0x00,0x00,0x3C,0x42,0x42,0x42,0x02,0x04,0x08,0x10,0x20,0x42,0x7E,0x00,0x00},/*\"2\",18*/\n{0x00,0x00,0x00,0x3C,0x42,0x42,0x02,0x04,0x18,0x04,0x02,0x42,0x42,0x3C,0x00,0x00},/*\"3\",19*/\n{0x00,0x00,0x00,0x04,0x0C,0x0C,0x14,0x24,0x24,0x44,0x7F,0x04,0x04,0x1F,0x00,0x00},/*\"4\",20*/\n{0x00,0x00,0x00,0x7E,0x40,0x40,0x40,0x78,0x44,0x02,0x02,0x42,0x44,0x38,0x00,0x00},/*\"5\",21*/\n{0x00,0x00,0x00,0x18,0x24,0x40,0x40,0x5C,0x62,0x42,0x42,0x42,0x22,0x1C,0x00,0x00},/*\"6\",22*/\n{0x00,0x00,0x00,0x7E,0x42,0x04,0x04,0x08,0x08,0x10,0x10,0x10,0x10,0x10,0x00,0x00},/*\"7\",23*/\n{0x00,0x00,0x00,0x3C,0x42,0x42,0x42,0x24,0x18,0x24,0x42,0x42,0x42,0x3C,0x00,0x00},/*\"8\",24*/\n{0x00,0x00,0x00,0x38,0x44,0x42,0x42,0x42,0x46,0x3A,0x02,0x02,0x24,0x18,0x00,0x00},/*\"9\",25*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00},/*\":\",26*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x10,0x10,0x10},/*\";\",27*/\n{0x00,0x00,0x00,0x02,0x04,0x08,0x10,0x20,0x40,0x20,0x10,0x08,0x04,0x02,0x00,0x00},/*\"&lt;\",28*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,0x00},/*\"=\",29*/\n{0x00,0x00,0x00,0x40,0x20,0x10,0x08,0x04,0x02,0x04,0x08,0x10,0x20,0x40,0x00,0x00},/*\"&gt;\",30*/\n{0x00,0x00,0x00,0x3C,0x42,0x42,0x62,0x04,0x08,0x08,0x08,0x00,0x18,0x18,0x00,0x00},/*\"?\",31*/\n{0x00,0x00,0x00,0x38,0x44,0x5A,0xAA,0xAA,0xAA,0xAA,0xAA,0x5C,0x42,0x3C,0x00,0x00},/*\"@\",32*/\n{0x00,0x00,0x00,0x10,0x10,0x18,0x28,0x28,0x24,0x3C,0x44,0x42,0x42,0xE7,0x00,0x00},/*\"A\",33*/\n{0x00,0x00,0x00,0xF8,0x44,0x44,0x44,0x78,0x44,0x42,0x42,0x42,0x44,0xF8,0x00,0x00},/*\"B\",34*/\n{0x00,0x00,0x00,0x3E,0x42,0x42,0x80,0x80,0x80,0x80,0x80,0x42,0x44,0x38,0x00,0x00},/*\"C\",35*/\n{0x00,0x00,0x00,0xF8,0x44,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x44,0xF8,0x00,0x00},/*\"D\",36*/\n{0x00,0x00,0x00,0xFC,0x42,0x48,0x48,0x78,0x48,0x48,0x40,0x42,0x42,0xFC,0x00,0x00},/*\"E\",37*/\n{0x00,0x00,0x00,0xFC,0x42,0x48,0x48,0x78,0x48,0x48,0x40,0x40,0x40,0xE0,0x00,0x00},/*\"F\",38*/\n{0x00,0x00,0x00,0x3C,0x44,0x44,0x80,0x80,0x80,0x8E,0x84,0x44,0x44,0x38,0x00,0x00},/*\"G\",39*/\n{0x00,0x00,0x00,0xE7,0x42,0x42,0x42,0x42,0x7E,0x42,0x42,0x42,0x42,0xE7,0x00,0x00},/*\"H\",40*/\n{0x00,0x00,0x00,0x7C,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x7C,0x00,0x00},/*\"I\",41*/\n{0x00,0x00,0x00,0x3E,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x88,0xF0},/*\"J\",42*/\n{0x00,0x00,0x00,0xEE,0x44,0x48,0x50,0x70,0x50,0x48,0x48,0x44,0x44,0xEE,0x00,0x00},/*\"K\",43*/\n{0x00,0x00,0x00,0xE0,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x42,0xFE,0x00,0x00},/*\"L\",44*/\n{0x00,0x00,0x00,0xEE,0x6C,0x6C,0x6C,0x6C,0x6C,0x54,0x54,0x54,0x54,0xD6,0x00,0x00},/*\"M\",45*/\n{0x00,0x00,0x00,0xC7,0x62,0x62,0x52,0x52,0x4A,0x4A,0x4A,0x46,0x46,0xE2,0x00,0x00},/*\"N\",46*/\n{0x00,0x00,0x00,0x38,0x44,0x82,0x82,0x82,0x82,0x82,0x82,0x82,0x44,0x38,0x00,0x00},/*\"O\",47*/\n{0x00,0x00,0x00,0xFC,0x42,0x42,0x42,0x42,0x7C,0x40,0x40,0x40,0x40,0xE0,0x00,0x00},/*\"P\",48*/\n{0x00,0x00,0x00,0x38,0x44,0x82,0x82,0x82,0x82,0x82,0x82,0xB2,0x4C,0x38,0x06,0x00},/*\"Q\",49*/\n{0x00,0x00,0x00,0xFC,0x42,0x42,0x42,0x7C,0x48,0x48,0x44,0x44,0x42,0xE3,0x00,0x00},/*\"R\",50*/\n{0x00,0x00,0x00,0x3E,0x42,0x42,0x40,0x20,0x18,0x04,0x02,0x42,0x42,0x7C,0x00,0x00},/*\"S\",51*/\n{0x00,0x00,0x00,0xFE,0x92,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x38,0x00,0x00},/*\"T\",52*/\n{0x00,0x00,0x00,0xE7,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x3C,0x00,0x00},/*\"U\",53*/\n{0x00,0x00,0x00,0xE7,0x42,0x42,0x44,0x24,0x24,0x28,0x28,0x18,0x10,0x10,0x00,0x00},/*\"V\",54*/\n{0x00,0x00,0x00,0xD6,0x54,0x54,0x54,0x54,0x54,0x6C,0x28,0x28,0x28,0x28,0x00,0x00},/*\"W\",55*/\n{0x00,0x00,0x00,0xE7,0x42,0x24,0x24,0x18,0x18,0x18,0x24,0x24,0x42,0xE7,0x00,0x00},/*\"X\",56*/\n{0x00,0x00,0x00,0xEE,0x44,0x44,0x28,0x28,0x10,0x10,0x10,0x10,0x10,0x38,0x00,0x00},/*\"Y\",57*/\n{0x00,0x00,0x00,0x7E,0x84,0x04,0x08,0x08,0x10,0x20,0x20,0x42,0x42,0xFC,0x00,0x00},/*\"Z\",58*/\n{0x00,0x1E,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x1E,0x00},/*\"[\",59*/\n{0x00,0x00,0x40,0x20,0x20,0x20,0x10,0x10,0x10,0x08,0x08,0x04,0x04,0x04,0x02,0x02},/*\"\\\",60*/\n{0x00,0x78,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x78,0x00},/*\"]\",61*/\n{0x00,0x18,0x24,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"^\",62*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF},/*\"_\",63*/\n{0x00,0x60,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"`\",64*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x44,0x0C,0x34,0x44,0x4C,0x36,0x00,0x00},/*\"a\",65*/\n{0x00,0x00,0x00,0x00,0xC0,0x40,0x40,0x58,0x64,0x42,0x42,0x42,0x64,0x58,0x00,0x00},/*\"b\",66*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x22,0x40,0x40,0x40,0x22,0x1C,0x00,0x00},/*\"c\",67*/\n{0x00,0x00,0x00,0x00,0x06,0x02,0x02,0x3E,0x42,0x42,0x42,0x42,0x46,0x3B,0x00,0x00},/*\"d\",68*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x42,0x42,0x7E,0x40,0x42,0x3C,0x00,0x00},/*\"e\",69*/\n{0x00,0x00,0x00,0x00,0x0C,0x12,0x10,0x7C,0x10,0x10,0x10,0x10,0x10,0x7C,0x00,0x00},/*\"f\",70*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x44,0x44,0x38,0x40,0x3C,0x42,0x42,0x3C},/*\"g\",71*/\n{0x00,0x00,0x00,0x00,0xC0,0x40,0x40,0x5C,0x62,0x42,0x42,0x42,0x42,0xE7,0x00,0x00},/*\"h\",72*/\n{0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x70,0x10,0x10,0x10,0x10,0x10,0x7C,0x00,0x00},/*\"i\",73*/\n{0x00,0x00,0x00,0x0C,0x0C,0x00,0x00,0x1C,0x04,0x04,0x04,0x04,0x04,0x04,0x44,0x78},/*\"j\",74*/\n{0x00,0x00,0x00,0x00,0xC0,0x40,0x40,0x4E,0x48,0x50,0x70,0x48,0x44,0xEE,0x00,0x00},/*\"k\",75*/\n{0x00,0x00,0x00,0x10,0x70,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x7C,0x00,0x00},/*\"l\",76*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x49,0x49,0x49,0x49,0x49,0xED,0x00,0x00},/*\"m\",77*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xDC,0x62,0x42,0x42,0x42,0x42,0xE7,0x00,0x00},/*\"n\",78*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x42,0x42,0x42,0x42,0x42,0x3C,0x00,0x00},/*\"o\",79*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xD8,0x64,0x42,0x42,0x42,0x64,0x58,0x40,0xE0},/*\"p\",80*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1A,0x26,0x42,0x42,0x42,0x26,0x1A,0x02,0x07},/*\"q\",81*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xEE,0x32,0x20,0x20,0x20,0x20,0xF8,0x00,0x00},/*\"r\",82*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x42,0x40,0x3C,0x02,0x42,0x7C,0x00,0x00},/*\"s\",83*/\n{0x00,0x00,0x00,0x00,0x00,0x10,0x10,0x7C,0x10,0x10,0x10,0x10,0x12,0x0C,0x00,0x00},/*\"t\",84*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC6,0x42,0x42,0x42,0x42,0x46,0x3B,0x00,0x00},/*\"u\",85*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xEE,0x44,0x44,0x28,0x28,0x10,0x10,0x00,0x00},/*\"v\",86*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xDB,0x89,0x4A,0x5A,0x54,0x24,0x24,0x00,0x00},/*\"w\",87*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x76,0x24,0x18,0x18,0x18,0x24,0x6E,0x00,0x00},/*\"x\",88*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE7,0x42,0x24,0x24,0x18,0x18,0x10,0x10,0x60},/*\"y\",89*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x44,0x08,0x10,0x10,0x22,0x7E,0x00,0x00},/*\"z\",90*/\n{0x00,0x03,0x04,0x04,0x04,0x04,0x04,0x04,0x08,0x04,0x04,0x04,0x04,0x04,0x03,0x00},/*\"{\",91*/\n{0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08},/*\"|\",92*/\n{0x00,0xC0,0x20,0x20,0x20,0x20,0x20,0x20,0x10,0x20,0x20,0x20,0x20,0x20,0xC0,0x00},/*\"}\",93*/\n{0x20,0x5A,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"~\",94*/\n};  \n\n/* 24x24 ASCII Character Set Dot Matrix */\nconst unsigned char asc2_2412[95][48]={\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\" \",0*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x02,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"!\",1*/\n{0x00,0x00,0x00,0x00,0x06,0x60,0x06,0x60,0x0C,0xC0,0x19,0x80,0x11,0x00,0x22,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"\"\",2*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x40,0x08,0x40,0x08,0x40,0x08,0x40,0x7F,0xE0,0x7F,0xE0,0x10,0x40,0x10,0x80,0x10,0x80,0x10,0x80,0x10,0x80,0x7F,0xE0,0x7F,0xE0,0x20,0x80,0x20,0x80,0x20,0x80,0x20,0x80,0x00,0x00,0x00,0x00,0x00,0x00},/*\"#\",3*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x02,0x00,0x0F,0x80,0x1A,0xC0,0x32,0xC0,0x33,0xC0,0x32,0x00,0x1A,0x00,0x0E,0x00,0x07,0x00,0x03,0x80,0x03,0x80,0x02,0xC0,0x32,0xC0,0x3A,0xC0,0x32,0xC0,0x12,0x80,0x0F,0x00,0x02,0x00,0x02,0x00,0x00,0x00},/*\"$\",4*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x80,0x50,0x80,0x89,0x00,0x89,0x00,0x89,0x00,0x8A,0x00,0x8A,0x00,0x5C,0x00,0x75,0xC0,0x05,0x40,0x0A,0x20,0x0A,0x20,0x12,0x20,0x12,0x20,0x12,0x20,0x21,0x40,0x21,0xC0,0x00,0x00,0x00,0x00,0x00,0x00},/*\"%\",5*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x00,0x36,0x00,0x36,0x00,0x36,0x00,0x36,0x00,0x36,0x00,0x34,0x00,0x19,0xE0,0x38,0x80,0x58,0x80,0xCC,0x80,0xCC,0x80,0xC6,0x80,0xC7,0x00,0xC3,0x10,0x63,0x90,0x3C,0xE0,0x00,0x00,0x00,0x00,0x00,0x00},/*\"&amp;\",6*/\n{0x00,0x00,0x00,0x00,0x30,0x00,0x38,0x00,0x08,0x00,0x08,0x00,0x10,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"'\",7*/\n{0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x40,0x00,0x80,0x01,0x00,0x01,0x00,0x02,0x00,0x02,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x02,0x00,0x02,0x00,0x01,0x00,0x01,0x00,0x00,0x80,0x00,0x40,0x00,0x20,0x00,0x00},/*\"(\",8*/\n{0x00,0x00,0x00,0x00,0x40,0x00,0x20,0x00,0x10,0x00,0x08,0x00,0x08,0x00,0x04,0x00,0x04,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x04,0x00,0x04,0x00,0x08,0x00,0x08,0x00,0x10,0x00,0x20,0x00,0x40,0x00,0x00,0x00},/*\")\",9*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x03,0x00,0x02,0x00,0x62,0x30,0x72,0xF0,0x0B,0x80,0x0F,0x80,0x7A,0xF0,0x62,0x30,0x02,0x00,0x02,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"*\",10*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x7F,0xF0,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"+\",11*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x38,0x00,0x08,0x00,0x08,0x00,0x10,0x00,0x20,0x00},/*\",\",12*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"-\",13*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x00,0x38,0x00,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\".\",14*/\n{0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x60,0x00,0x40,0x00,0xC0,0x00,0x80,0x00,0x80,0x01,0x00,0x01,0x00,0x02,0x00,0x02,0x00,0x06,0x00,0x04,0x00,0x04,0x00,0x08,0x00,0x08,0x00,0x10,0x00,0x10,0x00,0x30,0x00,0x20,0x00,0x60,0x00,0x40,0x00,0x00,0x00},/*\"/\",15*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,0x19,0x80,0x30,0xC0,0x30,0xC0,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x30,0xC0,0x30,0xC0,0x19,0x80,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"0\",16*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x3E,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x3F,0xC0,0x00,0x00,0x00,0x00,0x00,0x00},/*\"1\",17*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0x00,0x21,0x80,0x40,0xC0,0x60,0xC0,0x60,0xC0,0x00,0xC0,0x00,0x80,0x01,0x80,0x03,0x00,0x06,0x00,0x04,0x00,0x08,0x00,0x10,0x40,0x20,0x40,0x60,0x40,0x7F,0xC0,0x00,0x00,0x00,0x00,0x00,0x00},/*\"2\",18*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1E,0x00,0x63,0x00,0x61,0x80,0x61,0x80,0x01,0x80,0x01,0x80,0x03,0x00,0x0E,0x00,0x01,0x80,0x00,0x80,0x00,0xC0,0x00,0xC0,0x60,0xC0,0x60,0xC0,0x61,0x80,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"3\",19*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x01,0x80,0x03,0x80,0x05,0x80,0x05,0x80,0x09,0x80,0x11,0x80,0x11,0x80,0x21,0x80,0x41,0x80,0x7F,0xF0,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x07,0xE0,0x00,0x00,0x00,0x00,0x00,0x00},/*\"4\",20*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xC0,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x2F,0x00,0x31,0x80,0x20,0xC0,0x00,0xC0,0x00,0xC0,0x60,0xC0,0x60,0xC0,0x41,0x80,0x21,0x80,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"5\",21*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x80,0x18,0xC0,0x30,0xC0,0x30,0x00,0x20,0x00,0x60,0x00,0x67,0x80,0x68,0xC0,0x70,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x20,0x60,0x30,0x40,0x18,0xC0,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"6\",22*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xE0,0x30,0x60,0x20,0x40,0x20,0x80,0x00,0x80,0x00,0x80,0x01,0x00,0x01,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"7\",23*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0x80,0x30,0xC0,0x60,0x60,0x60,0x60,0x60,0x60,0x30,0x40,0x38,0xC0,0x0F,0x00,0x13,0x80,0x30,0xC0,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x30,0xC0,0x0F,0x80,0x00,0x00,0x00,0x00,0x00,0x00},/*\"8\",24*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,0x30,0x80,0x30,0xC0,0x60,0x40,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0xE0,0x31,0x60,0x1E,0x60,0x00,0x60,0x00,0xC0,0x00,0xC0,0x30,0x80,0x31,0x80,0x1E,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"9\",25*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x07,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x07,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\":\",26*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x06,0x00,0x02,0x00,0x04,0x00,0x04,0x00},/*\";\",27*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x40,0x00,0x80,0x01,0x00,0x02,0x00,0x04,0x00,0x08,0x00,0x10,0x00,0x20,0x00,0x10,0x00,0x08,0x00,0x04,0x00,0x02,0x00,0x01,0x00,0x00,0x80,0x00,0x40,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00},/*\"&lt;\",28*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"=\",29*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x10,0x00,0x08,0x00,0x04,0x00,0x02,0x00,0x01,0x00,0x00,0x80,0x00,0x40,0x00,0x20,0x00,0x40,0x00,0x80,0x01,0x00,0x02,0x00,0x04,0x00,0x08,0x00,0x10,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"&gt;\",30*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xC0,0x18,0x60,0x20,0x30,0x20,0x30,0x30,0x30,0x30,0x30,0x00,0xE0,0x01,0x80,0x02,0x00,0x02,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x07,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"?\",31*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x18,0xC0,0x30,0x40,0x33,0xA0,0x26,0xA0,0x66,0xA0,0x65,0xA0,0x6D,0x20,0x6D,0x20,0x6D,0x20,0x6D,0x20,0x6D,0x40,0x27,0x80,0x30,0x20,0x30,0x40,0x18,0xC0,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"@\",32*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x06,0x00,0x0A,0x00,0x0B,0x00,0x09,0x00,0x09,0x00,0x11,0x00,0x11,0x80,0x10,0x80,0x1F,0x80,0x20,0xC0,0x20,0xC0,0x20,0x40,0x40,0x40,0x40,0x60,0xF0,0xF0,0x00,0x00,0x00,0x00,0x00,0x00},/*\"A\",33*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x00,0x31,0xC0,0x30,0xC0,0x30,0xC0,0x30,0xC0,0x30,0xC0,0x31,0x80,0x3F,0x00,0x30,0xC0,0x30,0x40,0x30,0x60,0x30,0x60,0x30,0x60,0x30,0x60,0x30,0xC0,0x7F,0x80,0x00,0x00,0x00,0x00,0x00,0x00},/*\"B\",34*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xC0,0x18,0xC0,0x30,0x60,0x30,0x20,0x20,0x20,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x20,0x30,0x20,0x30,0x40,0x18,0xC0,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"C\",35*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x00,0x31,0x80,0x30,0xC0,0x30,0xC0,0x30,0x60,0x30,0x60,0x30,0x60,0x30,0x60,0x30,0x60,0x30,0x60,0x30,0x60,0x30,0x60,0x30,0xC0,0x30,0xC0,0x31,0x80,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"D\",36*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xC0,0x60,0xC0,0x60,0x20,0x60,0x20,0x60,0x00,0x61,0x00,0x61,0x00,0x7F,0x00,0x61,0x00,0x61,0x00,0x61,0x00,0x60,0x00,0x60,0x20,0x60,0x20,0x60,0x40,0xFF,0xC0,0x00,0x00,0x00,0x00,0x00,0x00},/*\"E\",37*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xC0,0x60,0xC0,0x60,0x20,0x60,0x20,0x60,0x00,0x61,0x00,0x61,0x00,0x7F,0x00,0x61,0x00,0x61,0x00,0x61,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"F\",38*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,0x18,0x80,0x30,0x40,0x30,0x40,0x20,0x40,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x63,0xF0,0x60,0xC0,0x60,0xC0,0x30,0xC0,0x30,0xC0,0x18,0xC0,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"G\",39*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0xF0,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x7F,0xE0,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0xF0,0xF0,0x00,0x00,0x00,0x00,0x00,0x00},/*\"H\",40*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xC0,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x3F,0xC0,0x00,0x00,0x00,0x00,0x00,0x00},/*\"I\",41*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xE0,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x63,0x00,0x66,0x00,0x3C,0x00},/*\"J\",42*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF3,0xC0,0x61,0x80,0x63,0x00,0x62,0x00,0x64,0x00,0x68,0x00,0x6C,0x00,0x74,0x00,0x76,0x00,0x62,0x00,0x63,0x00,0x61,0x00,0x61,0x80,0x60,0x80,0x60,0xC0,0xF1,0xE0,0x00,0x00,0x00,0x00,0x00,0x00},/*\"K\",43*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x20,0x60,0x20,0x60,0x40,0xFF,0xC0,0x00,0x00,0x00,0x00,0x00,0x00},/*\"L\",44*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0xE0,0x61,0xC0,0x61,0xC0,0x71,0xC0,0x71,0xC0,0x72,0xC0,0x72,0xC0,0x52,0xC0,0x5A,0xC0,0x5A,0xC0,0x5C,0xC0,0x4C,0xC0,0x4C,0xC0,0x4C,0xC0,0x48,0xC0,0xE1,0xE0,0x00,0x00,0x00,0x00,0x00,0x00},/*\"M\",45*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x71,0xF0,0x30,0x40,0x38,0x40,0x38,0x40,0x2C,0x40,0x2C,0x40,0x26,0x40,0x26,0x40,0x22,0x40,0x23,0x40,0x21,0x40,0x21,0xC0,0x21,0xC0,0x20,0xC0,0x20,0xC0,0xF8,0x40,0x00,0x00,0x00,0x00,0x00,0x00},/*\"N\",46*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,0x19,0x80,0x30,0xC0,0x30,0x40,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x30,0x40,0x30,0xC0,0x19,0x80,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"O\",47*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x60,0xC0,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x61,0xC0,0x7F,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"P\",48*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,0x19,0x80,0x30,0xC0,0x30,0x40,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x6E,0x60,0x32,0x40,0x33,0xC0,0x19,0x80,0x0F,0x00,0x01,0xE0,0x00,0xC0,0x00,0x00},/*\"Q\",49*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x80,0x60,0xC0,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0xC0,0x7F,0x00,0x62,0x00,0x63,0x00,0x61,0x00,0x61,0x80,0x60,0xC0,0x60,0xC0,0x60,0x60,0xF0,0x70,0x00,0x00,0x00,0x00,0x00,0x00},/*\"R\",50*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0x40,0x30,0xC0,0x60,0x40,0x60,0x40,0x60,0x00,0x70,0x00,0x3C,0x00,0x1F,0x00,0x07,0xC0,0x01,0xC0,0x00,0xE0,0x40,0x60,0x40,0x60,0x60,0x60,0x30,0xC0,0x0F,0x80,0x00,0x00,0x00,0x00,0x00,0x00},/*\"S\",51*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xE0,0x46,0x20,0x86,0x10,0x86,0x10,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x1F,0x80,0x00,0x00,0x00,0x00,0x00,0x00},/*\"T\",52*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0xE0,0x30,0x40,0x30,0x40,0x30,0x40,0x30,0x40,0x30,0x40,0x30,0x40,0x30,0x40,0x30,0x40,0x30,0x40,0x30,0x40,0x30,0x40,0x30,0x40,0x30,0x40,0x18,0x80,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"U\",53*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0xE0,0x60,0x40,0x20,0x80,0x20,0x80,0x30,0x80,0x30,0x80,0x11,0x00,0x11,0x00,0x19,0x00,0x19,0x00,0x0A,0x00,0x0A,0x00,0x0E,0x00,0x0C,0x00,0x04,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"V\",54*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xEF,0x70,0x46,0x20,0x42,0x20,0x62,0x20,0x62,0x20,0x26,0x40,0x26,0x40,0x27,0x40,0x27,0x40,0x39,0x40,0x39,0x80,0x19,0x80,0x19,0x80,0x11,0x80,0x11,0x00,0x11,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"W\",55*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x79,0xE0,0x30,0x80,0x10,0x80,0x18,0x80,0x09,0x00,0x0D,0x00,0x06,0x00,0x04,0x00,0x06,0x00,0x06,0x00,0x0B,0x00,0x09,0x00,0x11,0x80,0x10,0x80,0x20,0xC0,0x71,0xE0,0x00,0x00,0x00,0x00,0x00,0x00},/*\"X\",56*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0xF0,0x60,0x20,0x20,0x40,0x30,0x40,0x10,0x80,0x18,0x80,0x1D,0x00,0x0D,0x00,0x0E,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x1F,0x80,0x00,0x00,0x00,0x00,0x00,0x00},/*\"Y\",57*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xE0,0x30,0x40,0x60,0xC0,0x40,0x80,0x01,0x80,0x01,0x00,0x02,0x00,0x02,0x00,0x04,0x00,0x04,0x00,0x08,0x00,0x18,0x00,0x10,0x20,0x30,0x20,0x20,0x40,0x7F,0xC0,0x00,0x00,0x00,0x00,0x00,0x00},/*\"Z\",58*/\n{0x00,0x00,0x00,0x00,0x07,0xC0,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x07,0xC0,0x00,0x00},/*\"[\",59*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x20,0x00,0x10,0x00,0x10,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x04,0x00,0x04,0x00,0x02,0x00,0x02,0x00,0x03,0x00,0x01,0x00,0x01,0x00,0x00,0x80,0x00,0x80,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x20},/*\"\\\",60*/\n{0x00,0x00,0x00,0x00,0x3E,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x3E,0x00,0x00,0x00},/*\"]\",61*/\n{0x00,0x00,0x06,0x00,0x09,0x00,0x10,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"^\",62*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xF0},/*\"_\",63*/\n{0x00,0x00,0x00,0x00,0x18,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"`\",64*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x80,0x30,0xC0,0x30,0xC0,0x00,0xC0,0x07,0xC0,0x38,0xC0,0x70,0xC0,0x60,0xC0,0x60,0xC0,0x71,0xD0,0x3E,0x70,0x00,0x00,0x00,0x00,0x00,0x00},/*\"a\",65*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x70,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x33,0x80,0x3C,0xC0,0x38,0x60,0x30,0x60,0x30,0x60,0x30,0x60,0x30,0x60,0x30,0x60,0x30,0x40,0x38,0xC0,0x27,0x80,0x00,0x00,0x00,0x00,0x00,0x00},/*\"b\",66*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,0x31,0x80,0x31,0x80,0x61,0x80,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x40,0x30,0x40,0x30,0x80,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"c\",67*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x03,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x1E,0xC0,0x31,0xC0,0x30,0xC0,0x60,0xC0,0x60,0xC0,0x60,0xC0,0x60,0xC0,0x60,0xC0,0x20,0xC0,0x31,0xE0,0x1E,0x80,0x00,0x00,0x00,0x00,0x00,0x00},/*\"d\",68*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x80,0x18,0xC0,0x10,0x40,0x30,0x60,0x30,0x60,0x3F,0xE0,0x30,0x00,0x30,0x00,0x18,0x20,0x18,0x40,0x07,0x80,0x00,0x00,0x00,0x00,0x00,0x00},/*\"e\",69*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xC0,0x06,0x60,0x0C,0x60,0x0C,0x00,0x0C,0x00,0x7F,0x80,0x0C,0x00,0x0C,0x00,0x0C,0x00,0x0C,0x00,0x0C,0x00,0x0C,0x00,0x0C,0x00,0x0C,0x00,0x0C,0x00,0x3F,0x80,0x00,0x00,0x00,0x00,0x00,0x00},/*\"f\",70*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xE0,0x1B,0x60,0x31,0x80,0x31,0x80,0x31,0x80,0x19,0x80,0x1F,0x00,0x30,0x00,0x3F,0x00,0x33,0xC0,0x60,0xC0,0x60,0xC0,0x71,0xC0,0x1F,0x00},/*\"g\",71*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x70,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x37,0x80,0x38,0xC0,0x30,0xC0,0x30,0xC0,0x30,0xC0,0x30,0xC0,0x30,0xC0,0x30,0xC0,0x30,0xC0,0x30,0xC0,0x79,0xE0,0x00,0x00,0x00,0x00,0x00,0x00},/*\"h\",72*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x3E,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x3F,0xC0,0x00,0x00,0x00,0x00,0x00,0x00},/*\"i\",73*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x80,0x03,0x80,0x00,0x00,0x00,0x00,0x00,0x80,0x0F,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x33,0x00,0x3E,0x00},/*\"j\",74*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x70,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x31,0xC0,0x31,0x00,0x31,0x00,0x32,0x00,0x36,0x00,0x3A,0x00,0x31,0x00,0x31,0x80,0x30,0x80,0x30,0xC0,0x79,0xE0,0x00,0x00,0x00,0x00,0x00,0x00},/*\"k\",75*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x3E,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x3F,0xC0,0x00,0x00,0x00,0x00,0x00,0x00},/*\"l\",76*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xEC,0xE0,0x77,0x60,0x66,0x60,0x66,0x60,0x66,0x60,0x66,0x60,0x66,0x60,0x66,0x60,0x66,0x60,0x66,0x60,0xFF,0xF0,0x00,0x00,0x00,0x00,0x00,0x00},/*\"m\",77*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x77,0x80,0x38,0xC0,0x30,0xC0,0x30,0xC0,0x30,0xC0,0x30,0xC0,0x30,0xC0,0x30,0xC0,0x30,0xC0,0x30,0xC0,0x79,0xE0,0x00,0x00,0x00,0x00,0x00,0x00},/*\"n\",78*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,0x19,0x80,0x30,0xC0,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x30,0xC0,0x30,0xC0,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"o\",79*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x77,0x80,0x38,0xC0,0x30,0x60,0x30,0x60,0x30,0x60,0x30,0x60,0x30,0x60,0x30,0x60,0x30,0xC0,0x38,0xC0,0x37,0x80,0x30,0x00,0x30,0x00,0x7C,0x00},/*\"p\",80*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1E,0x40,0x31,0xC0,0x30,0xC0,0x60,0xC0,0x60,0xC0,0x60,0xC0,0x60,0xC0,0x60,0xC0,0x20,0xC0,0x31,0xC0,0x1E,0xC0,0x00,0xC0,0x00,0xC0,0x03,0xE0},/*\"q\",81*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF9,0xC0,0x1A,0x60,0x1C,0x60,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"r\",82*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xC0,0x38,0xC0,0x30,0x40,0x30,0x40,0x1C,0x00,0x0F,0x00,0x03,0xC0,0x20,0xC0,0x20,0xC0,0x31,0xC0,0x3F,0x80,0x00,0x00,0x00,0x00,0x00,0x00},/*\"s\",83*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x04,0x00,0x0C,0x00,0x0C,0x00,0x7F,0x80,0x0C,0x00,0x0C,0x00,0x0C,0x00,0x0C,0x00,0x0C,0x00,0x0C,0x00,0x0C,0x00,0x0C,0x40,0x0C,0x40,0x07,0x80,0x00,0x00,0x00,0x00,0x00,0x00},/*\"t\",84*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x40,0x71,0xC0,0x30,0xC0,0x30,0xC0,0x30,0xC0,0x30,0xC0,0x30,0xC0,0x30,0xC0,0x30,0xC0,0x30,0xC0,0x39,0xE0,0x1E,0x80,0x00,0x00,0x00,0x00,0x00,0x00},/*\"u\",85*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0xE0,0x30,0x40,0x10,0x80,0x10,0x80,0x18,0x80,0x09,0x00,0x0D,0x00,0x0D,0x00,0x06,0x00,0x06,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"v\",86*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xEF,0x70,0x46,0x20,0x62,0x20,0x26,0x40,0x26,0x40,0x37,0x40,0x39,0x80,0x19,0x80,0x19,0x80,0x19,0x80,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"w\",87*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3D,0xE0,0x18,0x80,0x08,0x80,0x0D,0x00,0x06,0x00,0x06,0x00,0x07,0x00,0x09,0x00,0x10,0x80,0x10,0xC0,0x79,0xE0,0x00,0x00,0x00,0x00,0x00,0x00},/*\"x\",88*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x79,0xE0,0x10,0x80,0x10,0x80,0x10,0x80,0x09,0x00,0x09,0x00,0x0D,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x04,0x00,0x04,0x00,0x24,0x00,0x38,0x00},/*\"y\",89*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0x80,0x21,0x80,0x23,0x00,0x22,0x00,0x06,0x00,0x04,0x00,0x0C,0x00,0x18,0x40,0x10,0x40,0x30,0xC0,0x3F,0x80,0x00,0x00,0x00,0x00,0x00,0x00},/*\"z\",90*/\n{0x00,0x00,0x00,0x00,0x00,0xC0,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x02,0x00,0x04,0x00,0x02,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x00,0xC0,0x00,0x00},/*\"{\",91*/\n{0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00},/*\"|\",92*/\n{0x00,0x00,0x00,0x00,0x30,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x04,0x00,0x02,0x00,0x04,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x30,0x00,0x00,0x00},/*\"}\",93*/\n{0x00,0x00,0x38,0x00,0x44,0x20,0x43,0x20,0x01,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"~\",94*/\n};     \n\n/* 32x32 ASCII Character Set Dot Matrix */\nconst unsigned char asc2_3216[95][128]={\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\" \",0*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xC0,0x03,0xC0,0x03,0xC0,0x03,0xC0,0x03,0xC0,0x03,0xC0,0x01,0xC0,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x03,0xC0,0x03,0xC0,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"!\",1*/\n{0x00,0x00,0x00,0x00,0x03,0x18,0x07,0x38,0x07,0x38,0x0E,0x70,0x0C,0x60,0x18,0xC0,0x31,0x80,0x21,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"\"\",2*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x08,0x04,0x08,0x04,0x08,0x04,0x08,0x04,0x08,0x7F,0xFE,0x7F,0xFE,0x7F,0xFE,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x7F,0xFE,0x7F,0xFE,0x7F,0xFE,0x18,0x30,0x10,0x20,0x10,0x20,0x10,0x20,0x10,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"#\",3*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0x03,0xC0,0x0D,0x30,0x09,0x18,0x19,0x18,0x19,0x38,0x19,0x38,0x1D,0x00,0x0D,0x00,0x0F,0x00,0x07,0x00,0x03,0xC0,0x01,0xE0,0x01,0xF0,0x01,0x30,0x01,0x38,0x01,0x18,0x39,0x18,0x39,0x18,0x31,0x18,0x31,0x30,0x19,0x60,0x07,0xC0,0x01,0x00,0x01,0x00,0x01,0x00,0x00,0x00},/*\"$\",4*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x10,0x6C,0x10,0x44,0x20,0xC6,0x20,0xC6,0x40,0xC6,0x40,0xC6,0x40,0xC6,0x80,0xC6,0x80,0x44,0x80,0x6D,0x38,0x39,0x6C,0x02,0x44,0x02,0xC6,0x02,0xC6,0x04,0xC6,0x04,0xC6,0x08,0xC6,0x08,0xC6,0x08,0x44,0x10,0x6C,0x10,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"%\",5*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,0x19,0x00,0x31,0x80,0x31,0x80,0x31,0x80,0x31,0x80,0x31,0x00,0x33,0x00,0x3A,0x00,0x1C,0x00,0x38,0x7C,0x3C,0x10,0x4C,0x10,0xCE,0x10,0xC6,0x20,0xC7,0x20,0xC3,0x20,0xC1,0xC0,0xC1,0xC2,0x60,0xE6,0x31,0x7C,0x1E,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"&amp;\",6*/\n{0x00,0x00,0x00,0x00,0x38,0x00,0x3C,0x00,0x3C,0x00,0x0C,0x00,0x0C,0x00,0x08,0x00,0x30,0x00,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"'\",7*/\n{0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x04,0x00,0x08,0x00,0x18,0x00,0x30,0x00,0x20,0x00,0x60,0x00,0x40,0x00,0xC0,0x00,0xC0,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x00,0xC0,0x00,0xC0,0x00,0x40,0x00,0x60,0x00,0x20,0x00,0x30,0x00,0x18,0x00,0x08,0x00,0x04,0x00,0x02,0x00,0x00},/*\"(\",8*/\n{0x00,0x00,0x00,0x00,0x40,0x00,0x20,0x00,0x10,0x00,0x18,0x00,0x0C,0x00,0x04,0x00,0x06,0x00,0x02,0x00,0x03,0x00,0x03,0x00,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x03,0x00,0x03,0x00,0x03,0x00,0x06,0x00,0x04,0x00,0x0C,0x00,0x18,0x00,0x10,0x00,0x20,0x00,0x40,0x00,0x00,0x00},/*\")\",9*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x01,0xC0,0x01,0xC0,0x30,0xC6,0x38,0x8E,0x1C,0x9C,0x06,0xB0,0x01,0xC0,0x01,0xC0,0x06,0xB0,0x1C,0x9C,0x38,0x8E,0x31,0x86,0x01,0xC0,0x01,0xC0,0x01,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"*\",10*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x3F,0xFE,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"+\",11*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x00,0x3C,0x00,0x3C,0x00,0x0C,0x00,0x0C,0x00,0x08,0x00,0x30,0x00,0x60,0x00},/*\",\",12*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"-\",13*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x3C,0x00,0x3C,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\".\",14*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x06,0x00,0x04,0x00,0x0C,0x00,0x08,0x00,0x18,0x00,0x10,0x00,0x30,0x00,0x20,0x00,0x60,0x00,0x40,0x00,0xC0,0x00,0x80,0x01,0x80,0x01,0x00,0x03,0x00,0x02,0x00,0x06,0x00,0x04,0x00,0x0C,0x00,0x08,0x00,0x18,0x00,0x10,0x00,0x30,0x00,0x20,0x00,0x60,0x00,0x40,0x00,0x00,0x00,0x00,0x00},/*\"/\",15*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xC0,0x06,0x20,0x0C,0x30,0x18,0x18,0x18,0x18,0x18,0x08,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x18,0x08,0x18,0x18,0x18,0x18,0x0C,0x30,0x06,0x20,0x03,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"0\",16*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x01,0x80,0x1F,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x03,0xC0,0x1F,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"1\",17*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xE0,0x08,0x38,0x10,0x18,0x20,0x0C,0x20,0x0C,0x30,0x0C,0x30,0x0C,0x00,0x0C,0x00,0x18,0x00,0x18,0x00,0x30,0x00,0x60,0x00,0xC0,0x01,0x80,0x03,0x00,0x02,0x00,0x04,0x04,0x08,0x04,0x10,0x04,0x20,0x0C,0x3F,0xF8,0x3F,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"2\",18*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xC0,0x18,0x60,0x30,0x30,0x30,0x18,0x30,0x18,0x30,0x18,0x00,0x18,0x00,0x18,0x00,0x30,0x00,0x60,0x03,0xC0,0x00,0x70,0x00,0x18,0x00,0x08,0x00,0x0C,0x00,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x08,0x30,0x18,0x18,0x30,0x07,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"3\",19*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x60,0x00,0xE0,0x00,0xE0,0x01,0x60,0x01,0x60,0x02,0x60,0x04,0x60,0x04,0x60,0x08,0x60,0x08,0x60,0x10,0x60,0x30,0x60,0x20,0x60,0x40,0x60,0x7F,0xFC,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x03,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"4\",20*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xFC,0x0F,0xFC,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x13,0xE0,0x14,0x30,0x18,0x18,0x10,0x08,0x00,0x0C,0x00,0x0C,0x00,0x0C,0x00,0x0C,0x30,0x0C,0x30,0x0C,0x20,0x18,0x20,0x18,0x18,0x30,0x07,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"5\",21*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xE0,0x06,0x18,0x0C,0x18,0x08,0x18,0x18,0x00,0x10,0x00,0x10,0x00,0x30,0x00,0x33,0xE0,0x36,0x30,0x38,0x18,0x38,0x08,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x18,0x0C,0x18,0x08,0x0C,0x18,0x0E,0x30,0x03,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"6\",22*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFC,0x1F,0xFC,0x10,0x08,0x30,0x10,0x20,0x10,0x20,0x20,0x00,0x20,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x80,0x00,0x80,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"7\",23*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xE0,0x0C,0x30,0x18,0x18,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x38,0x0C,0x38,0x08,0x1E,0x18,0x0F,0x20,0x07,0xC0,0x18,0xF0,0x30,0x78,0x30,0x38,0x60,0x1C,0x60,0x0C,0x60,0x0C,0x60,0x0C,0x60,0x0C,0x30,0x18,0x18,0x30,0x07,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"8\",24*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xC0,0x18,0x20,0x30,0x10,0x30,0x18,0x60,0x08,0x60,0x0C,0x60,0x0C,0x60,0x0C,0x60,0x0C,0x60,0x0C,0x70,0x1C,0x30,0x2C,0x18,0x6C,0x0F,0x8C,0x00,0x0C,0x00,0x18,0x00,0x18,0x00,0x10,0x30,0x30,0x30,0x60,0x30,0xC0,0x0F,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"9\",25*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x03,0xC0,0x03,0xC0,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x03,0xC0,0x03,0xC0,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\":\",26*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x80,0x03,0x80,0x03,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x80,0x03,0x80,0x03,0x80,0x01,0x80,0x03,0x00,0x03,0x00,0x00,0x00},/*\";\",27*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x08,0x00,0x10,0x00,0x20,0x00,0x40,0x00,0x80,0x01,0x00,0x02,0x00,0x04,0x00,0x08,0x00,0x10,0x00,0x10,0x00,0x08,0x00,0x04,0x00,0x02,0x00,0x01,0x00,0x00,0x80,0x00,0x40,0x00,0x20,0x00,0x10,0x00,0x08,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"&lt;\",28*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"=\",29*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x10,0x00,0x08,0x00,0x04,0x00,0x02,0x00,0x01,0x00,0x00,0x80,0x00,0x40,0x00,0x20,0x00,0x10,0x00,0x08,0x00,0x08,0x00,0x10,0x00,0x20,0x00,0x40,0x00,0x80,0x01,0x00,0x02,0x00,0x04,0x00,0x08,0x00,0x10,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"&gt;\",30*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xE0,0x0C,0x18,0x18,0x0C,0x10,0x06,0x30,0x06,0x38,0x06,0x38,0x06,0x38,0x06,0x00,0x0C,0x00,0x18,0x00,0x70,0x00,0xC0,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x00,0x00,0x00,0x01,0x80,0x03,0xC0,0x03,0xC0,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"?\",31*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xE0,0x06,0x10,0x0C,0x08,0x18,0x04,0x30,0xD4,0x31,0xB2,0x21,0x32,0x63,0x32,0x63,0x22,0x66,0x22,0x66,0x22,0x66,0x22,0x66,0x62,0x66,0x64,0x66,0x64,0x26,0xE8,0x33,0x30,0x30,0x02,0x10,0x04,0x18,0x0C,0x0C,0x18,0x03,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"@\",32*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x80,0x03,0x80,0x03,0x80,0x03,0x80,0x04,0xC0,0x04,0xC0,0x04,0xC0,0x04,0xC0,0x0C,0x40,0x08,0x60,0x08,0x60,0x08,0x60,0x08,0x20,0x1F,0xF0,0x10,0x30,0x10,0x30,0x10,0x30,0x20,0x18,0x20,0x18,0x20,0x18,0x60,0x1C,0xF8,0x3E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"A\",33*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xE0,0x18,0x38,0x18,0x18,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x18,0x18,0x30,0x1F,0xE0,0x18,0x18,0x18,0x0C,0x18,0x04,0x18,0x06,0x18,0x06,0x18,0x06,0x18,0x06,0x18,0x06,0x18,0x0C,0x18,0x18,0x7F,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"B\",34*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xE0,0x06,0x1C,0x08,0x0C,0x18,0x06,0x30,0x02,0x30,0x02,0x30,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x30,0x02,0x30,0x02,0x10,0x04,0x18,0x08,0x0C,0x10,0x03,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"C\",35*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xC0,0x18,0x70,0x18,0x18,0x18,0x08,0x18,0x0C,0x18,0x0C,0x18,0x06,0x18,0x06,0x18,0x06,0x18,0x06,0x18,0x06,0x18,0x06,0x18,0x06,0x18,0x06,0x18,0x06,0x18,0x04,0x18,0x0C,0x18,0x0C,0x18,0x18,0x18,0x18,0x18,0x60,0x7F,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"D\",36*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFC,0x18,0x0C,0x18,0x04,0x18,0x02,0x18,0x02,0x18,0x00,0x18,0x00,0x18,0x10,0x18,0x10,0x18,0x30,0x1F,0xF0,0x18,0x30,0x18,0x10,0x18,0x10,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x02,0x18,0x02,0x18,0x04,0x18,0x0C,0x7F,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"E\",37*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFC,0x18,0x1C,0x18,0x04,0x18,0x02,0x18,0x02,0x18,0x00,0x18,0x00,0x18,0x10,0x18,0x10,0x18,0x30,0x1F,0xF0,0x18,0x30,0x18,0x10,0x18,0x10,0x18,0x10,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"F\",38*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xC0,0x0C,0x30,0x08,0x10,0x18,0x18,0x30,0x08,0x30,0x08,0x20,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x7E,0x60,0x18,0x60,0x18,0x20,0x18,0x30,0x18,0x30,0x18,0x10,0x18,0x18,0x18,0x0C,0x20,0x07,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"G\",39*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0x3F,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x3F,0xFC,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0xFC,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"H\",40*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xF8,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x1F,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"I\",41*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFE,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x70,0x60,0x70,0xC0,0x71,0x80,0x3F,0x00},/*\"J\",42*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x7C,0x18,0x30,0x18,0x20,0x18,0x60,0x18,0x40,0x18,0x80,0x18,0x80,0x19,0x00,0x19,0x00,0x1B,0x00,0x1D,0x80,0x1D,0x80,0x18,0xC0,0x18,0xC0,0x18,0x60,0x18,0x60,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x18,0x18,0x18,0x7E,0x3E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"K\",43*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x02,0x18,0x02,0x18,0x04,0x18,0x0C,0x7F,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"L\",44*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x0F,0x38,0x1C,0x38,0x1C,0x38,0x1C,0x38,0x1C,0x38,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x4C,0x2C,0x4C,0x26,0x4C,0x26,0x4C,0x26,0x4C,0x26,0x8C,0x22,0x8C,0x23,0x8C,0x23,0x8C,0x23,0x0C,0x23,0x0C,0x21,0x0C,0xF1,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"M\",45*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x1F,0x38,0x04,0x38,0x04,0x2C,0x04,0x2C,0x04,0x26,0x04,0x26,0x04,0x23,0x04,0x23,0x04,0x21,0x84,0x21,0x84,0x20,0xC4,0x20,0xC4,0x20,0x64,0x20,0x64,0x20,0x34,0x20,0x34,0x20,0x1C,0x20,0x1C,0x20,0x0C,0x20,0x0C,0xF8,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"N\",46*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xC0,0x0C,0x30,0x18,0x18,0x10,0x08,0x30,0x0C,0x30,0x0C,0x60,0x04,0x60,0x06,0x60,0x06,0x60,0x06,0x60,0x06,0x60,0x06,0x60,0x06,0x60,0x06,0x60,0x06,0x20,0x06,0x30,0x0C,0x30,0x0C,0x10,0x08,0x18,0x18,0x0C,0x30,0x03,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"O\",47*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xF0,0x18,0x18,0x18,0x0C,0x18,0x06,0x18,0x06,0x18,0x06,0x18,0x06,0x18,0x06,0x18,0x06,0x18,0x0C,0x18,0x18,0x1F,0xE0,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"P\",48*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xC0,0x0C,0x30,0x18,0x18,0x10,0x08,0x30,0x0C,0x30,0x0C,0x60,0x06,0x60,0x06,0x60,0x06,0x60,0x06,0x60,0x06,0x60,0x06,0x60,0x06,0x60,0x06,0x60,0x06,0x60,0x06,0x27,0x84,0x38,0xCC,0x38,0x6C,0x18,0x78,0x0C,0x70,0x03,0xE0,0x00,0x32,0x00,0x3C,0x00,0x1C,0x00,0x00},/*\"Q\",49*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xE0,0x18,0x38,0x18,0x18,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x18,0x18,0x30,0x1F,0xE0,0x18,0xC0,0x18,0xC0,0x18,0x60,0x18,0x60,0x18,0x60,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x18,0x18,0x18,0x7E,0x1E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"R\",50*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xC8,0x18,0x78,0x30,0x18,0x60,0x18,0x60,0x08,0x60,0x08,0x60,0x00,0x70,0x00,0x3C,0x00,0x1F,0x00,0x07,0xC0,0x01,0xF0,0x00,0x78,0x00,0x18,0x00,0x1C,0x40,0x0C,0x40,0x0C,0x60,0x0C,0x20,0x0C,0x30,0x18,0x38,0x30,0x27,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"S\",51*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFC,0x31,0x84,0x21,0x86,0x41,0x82,0x41,0x82,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x07,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"T\",52*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0x3E,0x30,0x08,0x30,0x08,0x30,0x08,0x30,0x08,0x30,0x08,0x30,0x08,0x30,0x08,0x30,0x08,0x30,0x08,0x30,0x08,0x30,0x08,0x30,0x08,0x30,0x08,0x30,0x08,0x30,0x08,0x30,0x08,0x30,0x08,0x30,0x08,0x18,0x10,0x1C,0x20,0x07,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"U\",53*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0x1E,0x18,0x0C,0x18,0x08,0x18,0x08,0x18,0x08,0x0C,0x10,0x0C,0x10,0x0C,0x10,0x0C,0x10,0x0C,0x20,0x06,0x20,0x06,0x20,0x06,0x20,0x06,0x40,0x03,0x40,0x03,0x40,0x03,0x40,0x03,0x80,0x01,0x80,0x01,0x80,0x01,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"V\",54*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF3,0xCF,0x61,0x86,0x61,0x84,0x21,0x84,0x20,0x84,0x30,0xC4,0x31,0xC4,0x31,0xC4,0x31,0xC8,0x31,0xC8,0x11,0xC8,0x12,0x48,0x1A,0x68,0x1A,0x68,0x1A,0x70,0x1C,0x70,0x0C,0x70,0x0C,0x70,0x0C,0x30,0x0C,0x20,0x08,0x20,0x08,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"W\",55*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0x3E,0x18,0x08,0x18,0x10,0x0C,0x10,0x0C,0x20,0x06,0x20,0x06,0x40,0x03,0x40,0x03,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0xC0,0x02,0xC0,0x02,0x60,0x04,0x60,0x04,0x70,0x08,0x30,0x08,0x30,0x18,0x18,0x10,0x1C,0x7C,0x3E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"X\",56*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x3E,0x38,0x08,0x18,0x08,0x18,0x10,0x0C,0x10,0x0C,0x10,0x0C,0x20,0x06,0x20,0x06,0x20,0x03,0x40,0x03,0x40,0x03,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x07,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"Y\",57*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFE,0x1C,0x0C,0x18,0x0C,0x30,0x18,0x20,0x18,0x00,0x30,0x00,0x60,0x00,0x60,0x00,0xC0,0x00,0xC0,0x01,0x80,0x01,0x80,0x03,0x00,0x03,0x00,0x06,0x00,0x06,0x00,0x0C,0x00,0x18,0x02,0x18,0x06,0x30,0x04,0x30,0x1C,0x7F,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"Z\",58*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xFC,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0xFC,0x00,0x00,0x00,0x00},/*\"[\",59*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x18,0x00,0x08,0x00,0x0C,0x00,0x04,0x00,0x06,0x00,0x06,0x00,0x02,0x00,0x03,0x00,0x01,0x00,0x01,0x80,0x01,0x80,0x00,0x80,0x00,0xC0,0x00,0x40,0x00,0x60,0x00,0x60,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x18,0x00,0x18,0x00,0x0C,0x00,0x0C,0x00,0x0C,0x00,0x06,0x00,0x00},/*\"\\\",60*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x3F,0xC0,0x00,0x00,0x00,0x00},/*\"]\",61*/\n{0x00,0x00,0x00,0x00,0x03,0xC0,0x03,0xE0,0x06,0x20,0x08,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"^\",62*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF},/*\"_\",63*/\n{0x00,0x00,0x00,0x00,0x1E,0x00,0x03,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"`\",64*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xE0,0x18,0x30,0x30,0x18,0x30,0x18,0x30,0x18,0x00,0x38,0x07,0xD8,0x1C,0x18,0x30,0x18,0x60,0x18,0x60,0x18,0x60,0x18,0x60,0x19,0x30,0x79,0x1F,0x8E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"a\",65*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x78,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x19,0xE0,0x1A,0x38,0x1C,0x18,0x1C,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x08,0x1C,0x18,0x1C,0x30,0x13,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"b\",66*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xE0,0x0E,0x10,0x0C,0x18,0x18,0x18,0x30,0x18,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x04,0x18,0x04,0x18,0x08,0x0C,0x10,0x03,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"c\",67*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x78,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x07,0xD8,0x0C,0x38,0x18,0x18,0x18,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x10,0x18,0x18,0x38,0x0C,0x5E,0x07,0x90,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"d\",68*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xC0,0x0C,0x30,0x08,0x18,0x18,0x08,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x3F,0xFC,0x30,0x00,0x30,0x00,0x30,0x00,0x18,0x04,0x18,0x08,0x0E,0x18,0x03,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"e\",69*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0x01,0x86,0x01,0x06,0x03,0x06,0x03,0x00,0x03,0x00,0x03,0x00,0x3F,0xF8,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x1F,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"f\",70*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xEE,0x0C,0x36,0x08,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x08,0x18,0x0C,0x30,0x0F,0xE0,0x18,0x00,0x18,0x00,0x1F,0xC0,0x0F,0xF8,0x18,0x1C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x18,0x18,0x07,0xE0},/*\"g\",71*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x78,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x19,0xE0,0x1A,0x30,0x1C,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x7E,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"h\",72*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x03,0xC0,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x1F,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x1F,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"i\",73*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x00,0x78,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x03,0xF0,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x18,0x60,0x18,0x40,0x0F,0x80},/*\"j\",74*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x78,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x7C,0x18,0x30,0x18,0x20,0x18,0x40,0x18,0x80,0x19,0x80,0x1B,0x80,0x1E,0xC0,0x1C,0xC0,0x18,0x60,0x18,0x30,0x18,0x30,0x18,0x18,0x18,0x1C,0x7E,0x3E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"k\",75*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x1F,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x1F,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"l\",76*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0xEF,0x3C,0x71,0xC6,0x61,0x86,0x61,0x86,0x61,0x86,0x61,0x86,0x61,0x86,0x61,0x86,0x61,0x86,0x61,0x86,0x61,0x86,0x61,0x86,0x61,0x86,0x61,0x86,0xF3,0xCF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"m\",77*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x09,0xE0,0x7A,0x30,0x1C,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x7E,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"n\",78*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xC0,0x0C,0x30,0x08,0x18,0x18,0x18,0x10,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x18,0x18,0x18,0x18,0x0C,0x30,0x03,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"o\",79*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x09,0xE0,0x7A,0x30,0x1C,0x18,0x18,0x08,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x18,0x1C,0x18,0x1E,0x30,0x19,0xE0,0x18,0x00,0x18,0x00,0x18,0x00,0x7E,0x00},/*\"p\",80*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xC8,0x0C,0x78,0x18,0x38,0x18,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x10,0x18,0x18,0x38,0x0C,0x78,0x07,0x98,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x7E},/*\"q\",81*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x1C,0x7E,0x66,0x06,0x86,0x07,0x80,0x07,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x7F,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"r\",82*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xE4,0x06,0x1C,0x0C,0x0C,0x0C,0x04,0x0C,0x04,0x0E,0x00,0x07,0xC0,0x01,0xF0,0x00,0x78,0x00,0x1C,0x10,0x0C,0x10,0x0C,0x18,0x0C,0x1C,0x18,0x13,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"s\",83*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x03,0x00,0x07,0x00,0x3F,0xF8,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x04,0x03,0x04,0x01,0x88,0x00,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"t\",84*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x78,0x78,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x38,0x0C,0x5E,0x07,0x90,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"u\",85*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0x3E,0x18,0x0C,0x18,0x08,0x18,0x18,0x0C,0x10,0x0C,0x10,0x04,0x20,0x06,0x20,0x06,0x20,0x03,0x40,0x03,0x40,0x03,0xC0,0x01,0x80,0x01,0x80,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"v\",86*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFB,0xCF,0x61,0x86,0x21,0x84,0x31,0x84,0x31,0x84,0x31,0xC8,0x11,0xC8,0x1A,0xC8,0x1A,0x48,0x1A,0x70,0x0E,0x70,0x0C,0x70,0x0C,0x30,0x0C,0x20,0x04,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"w\",87*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x7C,0x0C,0x10,0x0E,0x10,0x06,0x20,0x03,0x40,0x03,0x40,0x01,0x80,0x01,0x80,0x01,0xC0,0x02,0x60,0x04,0x60,0x04,0x30,0x08,0x18,0x18,0x18,0x7C,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"x\",88*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0x3E,0x18,0x18,0x18,0x10,0x08,0x10,0x0C,0x10,0x04,0x20,0x06,0x20,0x06,0x20,0x02,0x40,0x03,0x40,0x01,0x40,0x01,0x80,0x01,0x80,0x01,0x00,0x01,0x00,0x01,0x00,0x02,0x00,0x3E,0x00,0x3C,0x00},/*\"y\",89*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xF8,0x30,0x38,0x30,0x30,0x20,0x60,0x20,0xE0,0x00,0xC0,0x01,0x80,0x03,0x80,0x03,0x00,0x06,0x00,0x0E,0x04,0x0C,0x04,0x18,0x0C,0x30,0x18,0x3F,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"z\",90*/\n{0x00,0x00,0x00,0x00,0x00,0x0C,0x00,0x10,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0xC0,0x01,0x80,0x00,0x40,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x10,0x00,0x0C,0x00,0x00},/*\"{\",91*/\n{0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80},/*\"|\",92*/\n{0x00,0x00,0x00,0x00,0x18,0x00,0x04,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x01,0x80,0x00,0xC0,0x01,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x04,0x00,0x18,0x00,0x00,0x00},/*\"}\",93*/\n{0x00,0x00,0x1E,0x00,0x23,0x00,0x41,0x82,0x40,0x82,0x00,0xE4,0x00,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"~\",94*/\n};\n\n#endif\n</code></pre>"},{"location":"DNESP32S3M/ACTUATION/LCD/lcd/#lcdh","title":"lcd.h","text":"<pre><code>/**\n * @file lcd.h\n * @author SHUAIWEN CUI (SHUAIWEN001@e.ntu.edu.sg)\n * @brief LCD driver header file\n * @version 1.0\n * @date 2024-11-18\n * @ref Alinetek LCD driver\n * @copyright Copyright (c) 2024\n */\n\n#ifndef __LCD_H__\n#define __LCD_H__\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"driver/gpio.h\"\n#include \"spi.h\"\n\n/* Pin definitions */\n#define LCD_NUM_BL GPIO_NUM_41  /* Backlight control pin */\n#define LCD_NUM_WR GPIO_NUM_40  /* Write control pin */\n#define LCD_NUM_CS GPIO_NUM_39  /* Chip select pin */\n#define LCD_NUM_RST GPIO_NUM_38 /* Reset pin */\n\n/* IO operations */\n#define LCD_WR(x)                                                              \\\n    do                                                                         \\\n    {                                                                          \\\n        x ? (gpio_set_level(LCD_NUM_WR, 1)) : (gpio_set_level(LCD_NUM_WR, 0)); \\\n    } while (0)\n\n#define LCD_CS(x)                                                              \\\n    do                                                                         \\\n    {                                                                          \\\n        x ? (gpio_set_level(LCD_NUM_CS, 1)) : (gpio_set_level(LCD_NUM_CS, 0)); \\\n    } while (0)\n\n#define LCD_PWR(x)                                                             \\\n    do                                                                         \\\n    {                                                                          \\\n        x ? (gpio_set_level(LCD_NUM_BL, 1)) : (gpio_set_level(LCD_NUM_BL, 0)); \\\n    } while (0)\n\n#define LCD_RST(x)                                                               \\\n    do                                                                           \\\n    {                                                                            \\\n        x ? (gpio_set_level(LCD_NUM_RST, 1)) : (gpio_set_level(LCD_NUM_RST, 0)); \\\n    } while (0)\n\n/* Common color values */\n#define WHITE 0xFFFF   /* White */\n#define BLACK 0x0000   /* Black */\n#define RED 0xF800     /* Red */\n#define GREEN 0x07E0   /* Green */\n#define BLUE 0x001F    /* Blue */\n#define MAGENTA 0XF81F /* Magenta/Purple = BLUE + RED */\n#define YELLOW 0XFFE0  /* Yellow = GREEN + RED */\n#define CYAN 0X07FF    /* Cyan = GREEN + BLUE */\n\n/* Less common color values */\n#define BROWN 0XBC40      /* Brown */\n#define BRRED 0XFC07      /* Brown-red */\n#define GRAY 0X8430       /* Gray */\n#define DARKBLUE 0X01CF   /* Dark blue */\n#define LIGHTBLUE 0X7D7C  /* Light blue */\n#define GRAYBLUE 0X5458   /* Gray-blue */\n#define LIGHTGREEN 0X841F /* Light green */\n#define LGRAY 0XC618      /* Light gray (panel background) */\n#define LGRAYBLUE 0XA651  /* Light gray-blue (middle layer color) */\n#define LBBLUE 0X2B12     /* Light brown-blue (selection bar highlight color) */\n\n/* Scan direction definitions */\n#define L2R_U2D 0 /* Left to right, top to bottom */\n#define L2R_D2U 1 /* Left to right, bottom to top */\n#define R2L_U2D 2 /* Right to left, top to bottom */\n#define R2L_D2U 3 /* Right to left, bottom to top */\n#define U2D_L2R 4 /* Top to bottom, left to right */\n#define U2D_R2L 5 /* Top to bottom, right to left */\n#define D2U_L2R 6 /* Bottom to top, left to right */\n#define D2U_R2L 7 /* Bottom to top, right to left */\n\n#define DFT_SCAN_DIR L2R_U2D /* Default scan direction */\n\n/* LCD information structure */\ntypedef struct _lcd_obj_t\n{\n    uint16_t width;   /* Width */\n    uint16_t height;  /* Height */\n    uint8_t dir;      /* Screen orientation: 0 = vertical, 1 = horizontal */\n    uint16_t wramcmd; /* Write GRAM command */\n    uint16_t setxcmd; /* Set X coordinate command */\n    uint16_t setycmd; /* Set Y coordinate command */\n    uint16_t wr;      /* Command/Data IO */\n    uint16_t cs;      /* Chip select IO */\n    uint16_t bl;      /* Backlight */\n    uint16_t rst;     /* Reset */\n} lcd_obj_t;\n\n/* LCD buffer size settings - modify with caution!\n   Changing these values may affect lcd_clear/lcd_fill/lcd_draw_line functions */\n#define LCD_TOTAL_BUF_SIZE (160 * 80 * 2) /* Total buffer size */\n#define LCD_BUF_SIZE 2560                 /* Partial buffer size */\n\n/* Exported variables */\nextern lcd_obj_t lcd_self;\nextern uint8_t lcd_buf[LCD_TOTAL_BUF_SIZE];\n\n/* Function declarations */\nvoid lcd_init(void);                                                                                                  /* Initialize the LCD */\nvoid lcd_clear(uint16_t color);                                                                                       /* Clear the screen */\nvoid lcd_scan_dir(uint8_t dir);                                                                                       /* Set the LCD auto scan direction */\nvoid lcd_write_data(const uint8_t *data, int len);                                                                    /* Write data to the LCD */\nvoid lcd_write_data16(uint16_t data);                                                                                 /* Write 16-bit data to the LCD */\nvoid lcd_set_cursor(uint16_t xpos, uint16_t ypos);                                                                    /* Set the cursor position */\nvoid lcd_set_window(uint16_t xstar, uint16_t ystar, uint16_t xend, uint16_t yend);                                    /* Set the display window size */\nvoid lcd_fill(uint16_t sx, uint16_t sy, uint16_t ex, uint16_t ey, uint16_t color);                                    /* Fill a specific area with a single color */\nvoid lcd_show_num(uint16_t x, uint16_t y, uint32_t num, uint8_t len, uint8_t size, uint16_t color);                   /* Display a number with len digits */\nvoid lcd_show_xnum(uint16_t x, uint16_t y, uint32_t num, uint8_t len, uint8_t size, uint8_t mode, uint16_t color);    /* Display an extended number with len digits */\nvoid lcd_show_string(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t size, char *p, uint16_t color); /* Display a string */\nvoid lcd_draw_rectangle(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color);                          /* Draw a rectangle */\nvoid lcd_draw_hline(uint16_t x, uint16_t y, uint16_t len, uint16_t color);                                            /* Draw a horizontal line */\nvoid lcd_draw_line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);                               /* Draw a straight or slanted line */\nvoid lcd_draw_pixel(uint16_t x, uint16_t y, uint16_t color);                                                          /* Draw a pixel */\nvoid lcd_show_char(uint16_t x, uint16_t y, uint8_t chr, uint8_t size, uint8_t mode, uint16_t color);                  /* Display a character at a specified position */\n\n#endif /* __LCD_H__ */\n</code></pre>"},{"location":"DNESP32S3M/ACTUATION/LCD/lcd/#lcdc","title":"lcd.c","text":"<pre><code>/**\n * @file lcd.c\n * @author SHUAIWEN CUI (SHUAIWEN001@e.ntu.edu.sg)\n * @brief  LCD driver source file\n * @version 1.0\n * @date 2024-11-18\n * @ref Alientek LCD Driver\n * @copyright Copyright (c) 2024\n * \n */\n\n#include \"lcd.h\"\n#include \"lcdfont.h\"\n\n\nspi_device_handle_t MY_LCD_Handle;\nuint8_t lcd_buf[LCD_TOTAL_BUF_SIZE];\nlcd_obj_t lcd_self;\n\n\n/* The LCD requires a set of initialization commands/parameters. \n   They are stored in this structure. */\ntypedef struct\n{\n    uint8_t cmd;           /* Command byte */\n    uint8_t data[16];      /* Data array for the command */\n    uint8_t databytes;     /* Number of data bytes; Bit 7 = post-command delay; 0xFF = end of commands */\n} lcd_init_cmd_t;\n\n/**\n * @brief       Sends a command to the LCD using polling mode. \n *              Blocks until the transmission is complete.\n *              (Since the data transmission is minimal, polling mode improves speed. \n *              The overhead of interrupt handling exceeds that of polling in this case.)\n * @param       cmd 8-bit command data to be transmitted\n * @retval      None\n */\nvoid lcd_write_cmd(const uint8_t cmd)\n{\n    LCD_WR(0);                    // Set write signal to 0\n    spi2_write_cmd(MY_LCD_Handle, cmd); // Transmit the command via SPI\n}\n\n/**\n * @brief       Sends data to the LCD using polling mode. \n *              Blocks until the transmission is complete.\n *              (Since the data transmission is minimal, polling mode improves speed. \n *              The overhead of interrupt handling exceeds that of polling in this case.)\n * @param       data Pointer to the 8-bit data to be transmitted\n * @param       len  Length of the data to be transmitted\n * @retval      None\n */\nvoid lcd_write_data(const uint8_t *data, int len)\n{\n    LCD_WR(1);                          // Set write signal to 1\n    spi2_write_data(MY_LCD_Handle, data, len); // Transmit the data via SPI\n}\n\n\n/**\n * @brief       Sends 16-bit data to the LCD using polling mode. \n *              Blocks until the transmission is complete.\n *              (Since the data transmission is minimal, polling mode improves speed. \n *              The overhead of interrupt handling exceeds that of polling in this case.)\n * @param       data 16-bit data to be transmitted\n * @retval      None\n */\nvoid lcd_write_data16(uint16_t data)\n{\n    uint8_t dataBuf[2] = {0, 0};\n    dataBuf[0] = data &gt;&gt; 8;              // Extract the high byte\n    dataBuf[1] = data &amp; 0xFF;            // Extract the low byte\n    LCD_WR(1);                           // Set write signal to 1\n    spi2_write_data(MY_LCD_Handle, dataBuf, 2); // Transmit the 16-bit data via SPI\n}\n\n/**\n * @brief       Set the window size\n * @param       xstar: Top-left corner x-axis coordinate\n * @param       ystar: Top-left corner y-axis coordinate\n * @param       xend: Bottom-right corner x-axis coordinate\n * @param       yend: Bottom-right corner y-axis coordinate\n * @retval      None\n */\nvoid lcd_set_window(uint16_t xstar, uint16_t ystar, uint16_t xend, uint16_t yend)\n{\n    uint8_t databuf[4] = {0, 0, 0, 0};\n\n    if (lcd_self.dir == 1)                  /* Landscape orientation */\n    {\n        databuf[0] = (xstar + 1) &gt;&gt; 8;\n        databuf[1] = 0xFF &amp; (xstar + 1);\n        databuf[2] = (xend + 1) &gt;&gt; 8;\n        databuf[3] = 0xFF &amp; (xend + 1);\n        lcd_write_cmd(lcd_self.setxcmd);\n        lcd_write_data(databuf, 4);\n\n        databuf[0] = (ystar + 26) &gt;&gt; 8;\n        databuf[1] = 0xFF &amp; (ystar + 26);\n        databuf[2] = (yend + 26) &gt;&gt; 8;\n        databuf[3] = 0xFF &amp; (yend + 26);\n        lcd_write_cmd(lcd_self.setycmd);\n        lcd_write_data(databuf, 4);\n    }\n    else                                    /* Portrait orientation */\n    {\n        databuf[0] = (xstar + 26) &gt;&gt; 8;\n        databuf[1] = 0xFF &amp; (xstar + 26);\n        databuf[2] = (xend + 26) &gt;&gt; 8;\n        databuf[3] = 0xFF &amp; (xend + 26);\n        lcd_write_cmd(lcd_self.setxcmd);\n        lcd_write_data(databuf, 4);\n\n        databuf[0] = (ystar + 1) &gt;&gt; 8;\n        databuf[1] = 0xFF &amp; (ystar + 1);\n        databuf[2] = (yend + 26) &gt;&gt; 8;\n        databuf[3] = 0xFF &amp; (yend + 26);\n        lcd_write_cmd(lcd_self.setycmd);\n        lcd_write_data(databuf, 4);\n    }\n\n    lcd_write_cmd(lcd_self.wramcmd);        /* Begin writing to GRAM */\n}\n\n/**\n * @brief       Clear the LCD screen with a specified color\n * @param       color The color to use for clearing the screen\n * @retval      None\n */\nvoid lcd_clear(uint16_t color)\n{\n    uint16_t i, j;\n    uint8_t data[2] = {0};\n\n    data[0] = color &gt;&gt; 8;  // High byte of the color\n    data[1] = color;       // Low byte of the color\n\n    lcd_set_window(0, 0, lcd_self.width - 1, lcd_self.height - 1); // Set the full screen as the window\n\n    for (j = 0; j &lt; LCD_BUF_SIZE / 2; j++) // Prepare buffer with the color data\n    {\n        lcd_buf[j * 2] = data[0];\n        lcd_buf[j * 2 + 1] = data[1];\n    }\n\n    for (i = 0; i &lt; (LCD_TOTAL_BUF_SIZE / LCD_BUF_SIZE); i++) // Write the buffer repeatedly to cover the entire screen\n    {\n        lcd_write_data(lcd_buf, LCD_BUF_SIZE);\n    }\n}\n\n/**\n * @brief       Fill a specified area with a single color\n * @param       (sx, sy), (ex, ey): Coordinates of the opposite corners of the rectangle to fill. \n *              The region size is: (ex - sx + 1) * (ey - sy + 1).\n * @param       color: The color to fill the area with (16-bit color for compatibility with LTDC)\n * @retval      None\n */\nvoid lcd_fill(uint16_t sx, uint16_t sy, uint16_t ex, uint16_t ey, uint16_t color)\n{\n    uint16_t i;\n    uint16_t j;\n    uint16_t width;\n    uint16_t height;\n\n    width = ex - sx + 1;    // Calculate the width of the fill area\n    height = ey - sy + 1;   // Calculate the height of the fill area\n    lcd_set_window(sx, sy, ex, ey); // Set the fill area as the active window\n\n    for (i = 0; i &lt; height; i++)    // Iterate over the height of the area\n    {\n        for (j = 0; j &lt; width; j++) // Iterate over the width of the area\n        {\n            lcd_write_data16(color); // Write the color data to the LCD\n        }\n    }\n    lcd_set_window(sx, sy, ex, ey); // Reset the window to the original fill area\n}\n\n\n/**\n * @brief       Set the position of the cursor\n * @param       xpos: X-axis coordinate of the top-left corner\n * @param       ypos: Y-axis coordinate of the top-left corner\n * @retval      None\n */\nvoid lcd_set_cursor(uint16_t xpos, uint16_t ypos)\n{\n    lcd_set_window(xpos, ypos, xpos, ypos); // Set the window to a single pixel at the cursor position\n}\n\n/**\n * @brief       Set the auto-scan direction of the LCD (not applicable for RGB screens)\n * @param       dir: 0~7, representing 8 directions (specific definitions can be found in lcd.h)\n * @retval      None\n */\nvoid lcd_scan_dir(uint8_t dir)\n{\n    uint8_t regval = 0;\n    uint8_t dirreg = 0;\n    uint16_t temp;\n\n    /* For landscape mode, the 1963 IC does not change scan direction, other ICs do. \n       For portrait mode, the 1963 IC changes direction, other ICs do not. */\n    if (lcd_self.dir == 1)\n    {\n        dir = 1;\n    }\n    else\n    {\n        dir = 0;\n    }\n\n    switch (dir)\n    {\n        case 0:                /* Portrait mode, top-right corner is (0, 0) */\n            regval |= 0x08;\n            break;\n\n        case 1:                /* Landscape mode, top-left corner is (0, 0) */\n            regval |= 0xA8;\n            break;\n\n        case 2:                /* Portrait mode, bottom-left corner is (0, 0) */\n            regval |= 0xC8;\n            break;\n\n        case 3:                /* Landscape mode, bottom-right corner is (0, 0) */\n            regval |= 0x78;\n            break;\n    }\n\n    dirreg = 0x36;                              /* For most driver ICs, the 0x36 register controls this setting */\n\n    uint8_t data_send[1] = {regval};            // Data to be sent to the register\n\n    lcd_write_cmd(dirreg);                      // Write command to set direction\n    lcd_write_data(data_send, 1);               // Send the direction data\n\n    if (regval &amp; 0x20)\n    {\n        if (lcd_self.width &lt; lcd_self.height)   /* Swap X and Y dimensions */\n        {\n            temp = lcd_self.width;\n            lcd_self.width = lcd_self.height;\n            lcd_self.height = temp;\n        }\n    }\n    else\n    {\n        if (lcd_self.width &gt; lcd_self.height)   /* Swap X and Y dimensions */\n        {\n            temp = lcd_self.width;\n            lcd_self.width = lcd_self.height;\n            lcd_self.height = temp;\n        }\n    }\n\n    lcd_set_window(0, 0, lcd_self.width, lcd_self.height); // Reset the window size\n}\n\n/**\n * @brief       Set the display orientation of the LCD\n * @param       dir: 0 for portrait mode; 1 for landscape mode\n * @retval      None\n */\nvoid lcd_display_dir(uint8_t dir)\n{\n    lcd_self.dir = dir;\n\n    if (lcd_self.dir == 0)                  /* Portrait mode */\n    {\n        lcd_self.width      = 80;          // Default width for portrait\n        lcd_self.height     = 160;         // Default height for portrait\n        lcd_self.wramcmd    = 0x2C;        // Write RAM command\n        lcd_self.setxcmd    = 0x2A;        // Set X coordinate command\n        lcd_self.setycmd    = 0x2B;        // Set Y coordinate command\n    }\n    else                                    /* Landscape mode */\n    {\n        lcd_self.width      = 160;         // Default width for landscape\n        lcd_self.height     = 80;          // Default height for landscape\n        lcd_self.wramcmd    = 0x2C;        // Write RAM command\n        lcd_self.setxcmd    = 0x2A;        // Set X coordinate command\n        lcd_self.setycmd    = 0x2B;        // Set Y coordinate command\n    }\n\n    lcd_scan_dir(lcd_self.dir);             // Set default scan direction\n}\n\n/**\n * @brief       Perform a hardware reset on the LCD\n * @param       None\n * @retval      None\n */\nvoid lcd_hard_reset(void)\n{\n    /* Reset the display */\n    LCD_RST(0);          // Pull the reset pin low\n    vTaskDelay(200);      // Delay for 200ms\n    LCD_RST(1);          // Pull the reset pin high\n    vTaskDelay(200);      // Delay for 200ms\n}\n\n/**\n * @brief       Draw a single pixel on the LCD\n * @param       x: X-axis coordinate of the pixel\n * @param       y: Y-axis coordinate of the pixel\n * @param       color: Color value of the pixel\n * @retval      None\n */\nvoid lcd_draw_pixel(uint16_t x, uint16_t y, uint16_t color)\n{\n    lcd_set_cursor(x, y);       // Set the cursor to the specified coordinates\n    lcd_write_data16(color);    // Write the color data for the pixel\n}\n\n/**\n * @brief       Draw a line (straight or diagonal) on the LCD\n * @param       x1, y1: Starting point coordinates\n * @param       x2, y2: Ending point coordinates\n * @param       color: Color value to fill the line\n * @retval      None\n */\nvoid lcd_draw_line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)\n{\n    uint16_t t; \n    int xerr = 0, yerr = 0, delta_x, delta_y, distance; \n    int incx, incy, urow, ucol; \n\n    delta_x = x2 - x1;                      /* Calculate the x-coordinate increment */\n    delta_y = y2 - y1;                      /* Calculate the y-coordinate increment */\n    urow = x1;                              /* Initialize the current x-coordinate */\n    ucol = y1;                              /* Initialize the current y-coordinate */\n\n    if (delta_x &gt; 0)\n    {\n        incx = 1;                           /* Set step direction for x */\n    }\n    else if (delta_x == 0)\n    {\n        incx = 0;                           /* Vertical line */\n    }\n    else\n    {\n        incx = -1;\n        delta_x = -delta_x;\n    } \n    if (delta_y &gt; 0)\n    {\n        incy = 1;                           /* Set step direction for y */\n    }\n    else if (delta_y == 0)\n    {\n        incy = 0;                           /* Horizontal line */\n    }\n    else\n    {\n        incy = -1;\n        delta_y = -delta_y;\n    } \n\n    if (delta_x &gt; delta_y)\n    {\n        distance = delta_x;                 /* Use x as the primary axis */\n    }\n    else\n    {\n        distance = delta_y;                 /* Use y as the primary axis */\n    }\n\n    for (t = 0; t &lt;= distance + 1; t++)     /* Draw the line */\n    {\n        lcd_draw_pixel(urow, ucol, color);  /* Plot the pixel */ \n        xerr += delta_x; \n        yerr += delta_y; \n\n        if (xerr &gt; distance)\n        { \n            xerr -= distance; \n            urow += incx;                   /* Increment x */\n        } \n\n        if (yerr &gt; distance)\n        { \n            yerr -= distance; \n            ucol += incy;                   /* Increment y */\n        } \n    } \n}\n\n/**\n * @brief       Draw a horizontal line\n * @param       x: Starting x-coordinate\n * @param       y: Starting y-coordinate\n * @param       len: Length of the line\n * @param       color: Color of the line\n * @retval      None\n */\nvoid lcd_draw_hline(uint16_t x, uint16_t y, uint16_t len, uint16_t color)\n{\n    if ((len == 0) || (x &gt; lcd_self.width) || (y &gt; lcd_self.height)) return;\n\n    lcd_fill(x, y, x + len - 1, y, color); // Fill a rectangle with height 1 as the horizontal line\n}\n\n/**\n * @brief       Draw a rectangle\n * @param       x0, y0: Coordinates of the top-left corner\n * @param       x1, y1: Coordinates of the bottom-right corner\n * @param       color: Color of the rectangle\n * @retval      None\n */\nvoid lcd_draw_rectangle(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color)\n{\n    lcd_draw_line(x0, y0, x1, y0, color); // Top edge\n    lcd_draw_line(x0, y0, x0, y1, color); // Left edge\n    lcd_draw_line(x0, y1, x1, y1, color); // Bottom edge\n    lcd_draw_line(x1, y0, x1, y1, color); // Right edge\n}\n\n/**\n * @brief       Draw a circle\n * @param       x0, y0: Coordinates of the circle's center\n * @param       r: Radius of the circle\n * @param       color: Color of the circle\n * @retval      None\n */\nvoid lcd_draw_circle(uint16_t x0, uint16_t y0, uint16_t r, uint16_t color)\n{\n    int a, b;\n    int di;\n\n    a = 0;              // X-coordinate offset\n    b = r;              // Y-coordinate offset\n    di = 3 - (r &lt;&lt; 1);  // Decision parameter for midpoint algorithm\n\n    while (a &lt;= b)\n    {\n        lcd_draw_pixel(x0 - b, y0 - a, color); // 8-way symmetry\n        lcd_draw_pixel(x0 + b, y0 - a, color);\n        lcd_draw_pixel(x0 - a, y0 + b, color);\n        lcd_draw_pixel(x0 - b, y0 - a, color);\n        lcd_draw_pixel(x0 - a, y0 - b, color);\n        lcd_draw_pixel(x0 + b, y0 + a, color);\n        lcd_draw_pixel(x0 + a, y0 - b, color);\n        lcd_draw_pixel(x0 + a, y0 + b, color);\n        lcd_draw_pixel(x0 - b, y0 + a, color);\n        a++;\n\n        if (di &lt; 0) // Update decision parameter\n        {\n            di += 4 * a + 6;\n        }\n        else\n        {\n            di += 10 + 4 * (a - b);\n            b--;\n        }\n\n        lcd_draw_pixel(x0 + a, y0 + b, color); // Draw additional point due to symmetry\n    }\n}\n\n/**\n * @brief       Display a character at a specified position\n * @param       x, y  : Coordinates where the character will be displayed\n * @param       chr   : Character to display, from \" \" to \"~\"\n * @param       size  : Font size, options: 12/16/24/32\n * @param       mode  : Overlay mode (1) or non-overlay mode (0)\n * @param       color : Color of the character\n * @retval      None\n */\nvoid lcd_show_char(uint16_t x, uint16_t y, uint8_t chr, uint8_t size, uint8_t mode, uint16_t color)\n{\n    uint8_t temp = 0, t1 = 0, t = 0;\n    uint8_t *pfont = 0;\n    uint8_t csize = 0;                                      /* Number of bytes for the font matrix of one character */\n    uint16_t colortemp = 0;\n    uint8_t sta = 0;\n\n    csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2); /* Calculate font matrix byte size for one character */\n    chr = chr - ' ';                                        /* Offset value (ASCII font starts at space character) */\n\n    if ((x &gt; (lcd_self.width - size / 2)) || (y &gt; (lcd_self.height - size)))\n    {\n        return;\n    }\n\n    lcd_set_window(x, y, x + size / 2 - 1, y + size - 1);   /* Set the window area for the character */\n\n    switch (size)\n    {\n        case 12:\n            pfont = (uint8_t *)asc2_1206[chr];              /* Use 12x6 font */\n            break;\n\n        case 16:\n            pfont = (uint8_t *)asc2_1608[chr];              /* Use 16x8 font */\n            break;\n\n        case 24:\n            pfont = (uint8_t *)asc2_2412[chr];              /* Use 24x12 font */\n            break;\n\n        case 32:\n            pfont = (uint8_t *)asc2_3216[chr];              /* Use 32x16 font */\n            break;\n\n        default:\n            return;\n    }\n\n    if (size != 24)\n    {\n        csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);\n\n        for (t = 0; t &lt; csize; t++)\n        {\n            temp = pfont[t];                                /* Retrieve font matrix data */\n\n            for (t1 = 0; t1 &lt; 8; t1++)\n            {\n                if (temp &amp; 0x80)\n                {\n                    colortemp = color;\n                }\n                else if (mode == 0)                         /* Transparent point, do not display */\n                {\n                    colortemp = 0xFFFF;\n                }\n\n                lcd_write_data16(colortemp);\n                temp &lt;&lt;= 1;\n            }\n        }\n    }\n    else\n    {\n        csize = (size * 16) / 8;\n\n        for (t = 0; t &lt; csize; t++)\n        {\n            temp = asc2_2412[chr][t];\n\n            if (t % 2 == 0)\n            {\n                sta = 8;\n            }\n            else\n            {\n                sta = 4;\n            }\n\n            for (t1 = 0; t1 &lt; sta; t1++)\n            {\n                if (temp &amp; 0x80)\n                {\n                    colortemp = color;\n                }\n                else if (mode == 0)                         /* Transparent point, do not display */\n                {\n                    colortemp = 0xFFFF;\n                }\n\n                lcd_write_data16(colortemp);\n                temp &lt;&lt;= 1;\n            }\n        }\n    }\n}\n\n/**\n * @brief       Function to calculate m raised to the power of n (m^n)\n * @param       m: Base value\n * @param       n: Exponent value\n * @retval      Result of m raised to the power of n (m^n)\n */\nuint32_t lcd_pow(uint8_t m, uint8_t n)\n{\n    uint32_t result = 1;\n\n    while (n--) result *= m; // Multiply the result by m, n times\n\n    return result;\n}\n\n/**\n * @brief       Display a number with a specified length\n * @param       x, y : Starting coordinates\n * @param       num  : Number to display (0 ~ 2^32)\n * @param       len  : Number of digits to display\n * @param       size : Font size (12/16/24/32)\n * @param       color: Color of the number\n * @retval      None\n */\nvoid lcd_show_num(uint16_t x, uint16_t y, uint32_t num, uint8_t len, uint8_t size, uint16_t color)\n{\n    uint8_t t, temp;\n    uint8_t enshow = 0;\n\n    for (t = 0; t &lt; len; t++)                                               /* Loop through the number of digits to display */\n    {\n        temp = (num / lcd_pow(10, len - t - 1)) % 10;                       /* Extract the digit at the current position */\n\n        if (enshow == 0 &amp;&amp; t &lt; (len - 1))                                   /* If display not enabled and there are more digits */\n        {\n            if (temp == 0)\n            {\n                lcd_show_char(x + (size / 2) * t, y, ' ', size, 0, color);  /* Display a space as a placeholder */\n                continue;                                                   /* Skip to the next digit */\n            }\n            else\n            {\n                enshow = 1;                                                 /* Enable display */\n            }\n        }\n\n        lcd_show_char(x + (size / 2) * t, y, temp + '0', size, 0, color);   /* Display the digit as a character */\n    }\n}\n\n/**\n * @brief       Extended display of a number with a specified length (including leading zeros)\n * @param       x, y : Starting coordinates\n * @param       num  : Number to display (0 ~ 2^32)\n * @param       len  : Number of digits to display\n * @param       size : Font size (12/16/24/32)\n * @param       mode : Display mode\n *              [7]: 0, no padding; 1, pad with zeros.\n *              [6:1]: Reserved\n *              [0]: 0, non-overlay display; 1, overlay display.\n * @param       color: Color of the number\n * @retval      None\n */\nvoid lcd_show_xnum(uint16_t x, uint16_t y, uint32_t num, uint8_t len, uint8_t size, uint8_t mode, uint16_t color)\n{\n    uint8_t t, temp;\n    uint8_t enshow = 0;\n\n    for (t = 0; t &lt; len; t++)                                                           /* Loop through the number of digits to display */\n    {\n        temp = (num / lcd_pow(10, len - t - 1)) % 10;                                   /* Extract the digit at the current position */\n\n        if (enshow == 0 &amp;&amp; t &lt; (len - 1))                                               /* If display not enabled and there are more digits */\n        {\n            if (temp == 0)\n            {\n                if (mode &amp; 0x80)                                                        /* Pad with zero if enabled */\n                {\n                    lcd_show_char(x + (size / 2) * t, y, '0', size, mode &amp; 0x01, color); /* Display '0' as placeholder */\n                }\n                else\n                {\n                    lcd_show_char(x + (size / 2) * t, y, ' ', size, mode &amp; 0x01, color); /* Display space as placeholder */\n                }\n                continue;\n            }\n            else\n            {\n                enshow = 1;                                                             /* Enable display */\n            }\n        }\n        lcd_show_char(x + (size / 2) * t, y, temp + '0', size, mode &amp; 0x01, color);     /* Display the digit as a character */\n    }\n}\n\n/**\n * @brief       Display a string within a specified area\n * @param       x, y         : Starting coordinates\n * @param       width, height: Dimensions of the display area\n * @param       size         : Font size (12/16/24/32)\n * @param       p            : Pointer to the string\n * @param       color        : Color of the string\n * @retval      None\n */\nvoid lcd_show_string(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t size, char *p, uint16_t color)\n{\n    uint8_t x0 = x;          // Save the initial x-coordinate\n    width += x;              // Calculate the maximum x-boundary\n    height += y;             // Calculate the maximum y-boundary\n\n    while ((*p &lt;= '~') &amp;&amp; (*p &gt;= ' '))  /* Check if the character is valid */\n    {\n        if (x &gt;= width)      // If the x-coordinate exceeds the width\n        {\n            x = x0;          // Reset to the initial x-coordinate\n            y += size;       // Move to the next line\n        }\n\n        if (y &gt;= height)     // If the y-coordinate exceeds the height, exit\n            break;\n\n        lcd_show_char(x, y, *p, size, 0, color); // Display the current character\n        x += size / 2;       // Move to the next character position\n        p++;                 // Advance the string pointer\n    }\n}\n\n/**\n * @brief       Turn on the LCD\n * @param       None\n * @retval      None (Initialization successful)\n */\nvoid lcd_on(void)\n{\n    LCD_PWR(1);          // Power on the LCD\n    vTaskDelay(10);       // Delay for 10 ms\n}\n\n/**\n * @brief       Turn off the LCD\n * @param       None\n * @retval      None (Initialization successful)\n */\nvoid lcd_off(void)\n{\n    LCD_PWR(0);          // Power off the LCD\n    vTaskDelay(10);       // Delay for 10 ms\n}\n\n/**\n * @brief       Initialize the LCD\n * @param       None\n * @retval      None\n */\nvoid lcd_init(void)\n{\n    int cmd = 0;\n    esp_err_t ret = 0;\n\n    lcd_self.dir = 0;\n    lcd_self.wr = LCD_NUM_WR;                                       /* Configure WR pin */\n    lcd_self.cs = LCD_NUM_CS;                                       /* Configure CS pin */\n    lcd_self.bl = LCD_NUM_BL;                                       /* Configure BL pin */\n    lcd_self.rst = LCD_NUM_RST;                                     /* Configure RST pin */\n\n    gpio_config_t gpio_init_struct;\n\n    /* SPI driver interface configuration */\n    spi_device_interface_config_t devcfg = {\n        .clock_speed_hz = 60 * 1000 * 1000,                         /* SPI clock frequency */\n        .mode = 0,                                                  /* SPI mode 0 */\n        .spics_io_num = lcd_self.cs,                                /* SPI device pin */\n        .queue_size = 7,                                            /* Transaction queue size */\n    };\n\n    /* Add SPI device to the bus */\n    ret = spi_bus_add_device(SPI2_HOST, &amp;devcfg, &amp;MY_LCD_Handle);   /* Configure SPI bus device */\n    ESP_ERROR_CHECK(ret);\n\n    /* Configure WR pin */\n    gpio_init_struct.intr_type = GPIO_INTR_DISABLE;                 /* Disable pin interrupt */\n    gpio_init_struct.mode = GPIO_MODE_OUTPUT;                       /* Set as output mode */\n    gpio_init_struct.pin_bit_mask = 1ull &lt;&lt; lcd_self.wr;            /* Configure pin bit mask */\n    gpio_init_struct.pull_down_en = GPIO_PULLDOWN_DISABLE;          /* Disable pull-down */\n    gpio_init_struct.pull_up_en = GPIO_PULLUP_ENABLE;               /* Enable pull-up */\n    gpio_config(&amp;gpio_init_struct);                                 /* Apply pin configuration */\n    /* Configure BL pin */\n    gpio_init_struct.pin_bit_mask = 1ull &lt;&lt; lcd_self.bl;            /* Configure pin bit mask */\n    gpio_init_struct.pull_down_en = GPIO_PULLDOWN_ENABLE;           /* Enable pull-down */\n    gpio_init_struct.pull_up_en = GPIO_PULLUP_DISABLE;              /* Disable pull-up */\n    gpio_config(&amp;gpio_init_struct);                                 /* Apply pin configuration */\n    /* Configure RST pin */\n    gpio_init_struct.pin_bit_mask = 1ull &lt;&lt; lcd_self.rst;           /* Configure pin bit mask */\n    gpio_init_struct.pull_down_en = GPIO_PULLDOWN_DISABLE;          /* Disable pull-down */\n    gpio_init_struct.pull_up_en = GPIO_PULLUP_ENABLE;               /* Enable pull-up */\n    gpio_config(&amp;gpio_init_struct);                                 /* Apply pin configuration */\n\n    lcd_off();                                                      /* Turn off the LCD */\n    lcd_hard_reset();                                               /* Perform hardware reset */\n\n    /* Initialization sequence for 0.96 inch LCD */\n    lcd_init_cmd_t ili_init_cmds[] =\n    {\n        {0x11, {0}, 0x80},\n        {0x21, {0}, 0x80},\n        {0xB1, {0x05, 0x3A, 0x3A}, 3},\n        {0xB2, {0x05, 0x3A, 0x3A}, 3},\n        {0xB3, {0x05, 0x3A, 0x3A, 0x05, 0x3A, 0x3A}, 6},\n        {0xB4, {0x03}, 1},\n        {0xC0, {0x62, 0x02, 0x04}, 3},\n        {0xC1, {0xC0}, 1},\n        {0xC2, {0x0D, 0x00}, 2},\n        {0xC3, {0x8D, 0x6A}, 2},\n        {0xC4, {0x8D, 0xEE}, 2},\n        {0xC5, {0x0E}, 1},\n        {0xE0, {0x10, 0x0E, 0x02, 0x03, 0x0E, 0x07, 0x02, 0x07, 0x0A, 0x12, 0x27, 0x37, 0x00, 0x0D, 0x0E, 0x10}, 16},\n        {0xE1, {0x10, 0x0E, 0x03, 0x03, 0x0F, 0x06, 0x02, 0x08, 0x0A, 0x13, 0x26, 0x36, 0x00, 0x0D, 0x0E, 0x10}, 16},\n        {0x3A, {0x05}, 1},\n        {0x36, {0xA8}, 1},\n        {0x29, {0}, 0x80},\n        {0, {0}, 0xFF},\n    };\n\n    /* Send initialization sequence */\n    while (ili_init_cmds[cmd].databytes != 0xFF)\n    {\n        lcd_write_cmd(ili_init_cmds[cmd].cmd);\n        lcd_write_data(ili_init_cmds[cmd].data, ili_init_cmds[cmd].databytes &amp; 0x1F);\n\n        if (ili_init_cmds[cmd].databytes &amp; 0x80)\n        {\n            vTaskDelay(120);\n        }\n\n        cmd++;\n    }\n\n    lcd_display_dir(1);                                             /* Set screen orientation */\n    lcd_clear(WHITE);                                               /* Clear the screen */\n    lcd_on();                                                       /* Turn on the LCD */\n}\n</code></pre>"},{"location":"DNESP32S3M/ACTUATION/LCD/lcd/#mainc","title":"main.c","text":"<pre><code>/**\n * @file main.c\n * @author SHUAIWEN CUI (SHUAIWEN001@e.ntu.edu.sg)\n * @brief \n * @version 1.0\n * @date 2024-11-17\n * \n * @copyright Copyright (c) 2024\n * \n */\n\n/* Dependencies */\n// Basic\n#include \"esp_system.h\"\n#include \"esp_chip_info.h\"\n#include \"esp_psram.h\"\n#include \"esp_flash.h\"\n#include \"nvs_flash.h\"\n#include \"esp_log.h\"\n\n// RTOS\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n\n// BSP\n#include \"led.h\"\n#include \"rgb.h\"\n#include \"key.h\"\n#include \"exit.h\"\n#include \"lcd.h\"\n#include \"spi.h\"\n\n\n/**\n * @brief Entry point of the program\n * @param None\n * @retval None\n */\nvoid app_main(void)\n{\n    uint8_t x = 0;\n    esp_err_t ret;\n\n\n    ret = nvs_flash_init();\n\n    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)\n    {\n        ESP_ERROR_CHECK(nvs_flash_erase());\n        ret = nvs_flash_init();\n    }\n\n    led_init();\n    spi2_init();\n    lcd_init();\n    vTaskDelay(500);\n\n    while (1)\n    {\n        switch (x)\n        {\n            case 0:\n            {\n                lcd_clear(WHITE);\n                break;\n            }\n            case 1:\n            {\n                lcd_clear(BLACK);\n                break;\n            }\n            case 2:\n            {\n                lcd_clear(BLUE);\n                break;\n            }\n            case 3:\n            {\n                lcd_clear(RED);\n                break;\n            }\n            case 4:\n            {\n                lcd_clear(MAGENTA);\n                break;\n            }\n            case 5:\n            {\n                lcd_clear(GREEN);\n                break;\n            }\n            case 6:\n            {\n                lcd_clear(CYAN);\n                break;\n            }\n            case 7:\n            {\n                lcd_clear(YELLOW);\n                break;\n            }\n            case 8:\n            {\n                lcd_clear(BRRED);\n                break;\n            }\n            case 9:\n            {\n                lcd_clear(GRAY);\n                break;\n            }\n            case 10:\n            {\n                lcd_clear(LGRAY);\n                break;\n            }\n            case 11:\n            {\n                lcd_clear(BROWN);\n                break;\n            }\n        }\n\n        lcd_show_string(0, 0, 240, 32, 32, \"ESP32\", RED);\n        lcd_show_string(0, 33, 240, 24, 24, \"SPILCD TEST\", RED);\n        lcd_show_string(0, 60, 240, 16, 16, \"CSW@NTU\", RED);\n        x++;\n\n        if (x == 12)\n        {\n            x = 0;\n        }\n\n        rgb_toggle();\n        vTaskDelay(500);\n    }\n}\n</code></pre>"},{"location":"DNESP32S3M/ACTUATION/LCD/note/","title":"LCD","text":""},{"location":"DNESP32S3M/ACTUATION/LCD/note/#esp32s3-minimal-system-board-with-096-inch-hd-ips-lcd-display","title":"ESP32S3 Minimal System Board with 0.96-Inch HD IPS LCD Display","text":"<p>The onboard 0.96-inch HD IPS LCD display has a resolution of 160x80 and supports 16-bit true color display. The display uses the ST7735S driver chip with built-in RAM, eliminating the need for external drivers or memory. The ESP32S3 chip can drive this display via the SPI interface. In 4-wire SPI communication mode, the 0.96-inch LCD screen requires only four signal lines (CS, SCL, SDA, RS (DC)).</p> <p> </p> <p>The screen connects to the PCB circuit via 13 pins. The pin details are as follows:</p> No. Name Description 1 TP0 NC 2 TP1 NC 3 SDA SPI communication MOSI signal line 4 SCL SPI communication SCK signal line 5 RS Command/Data signal line (Low: Command; High: Data) 6 RES Hardware reset pin (active low) 7 CS SPI communication chip select signal (active low) 8 GND Ground 9 NC NC 10 VCC 3.3V power supply 11 LEDK LCD backlight control pin (cathode) 12 LEDA LCD backlight control pin (anode) 13 GND Ground <p> </p> <p>From the above diagrams, it is evident that the write cycle of the 0.96-inch LCD module in 4-wire SPI mode is very fast (TSCYCW = 66ns), whereas the read cycle is relatively slower (TSCYCR = 150ns).</p> <p>The ST7735S LCD driver stores display data directly in its onboard RAM, which has a capacity of 132x162x18 bits. The ST7735S chip automatically displays data from its RAM to the LCD without an external clock, minimizing power consumption.</p>"},{"location":"DNESP32S3M/ACTUATION/LCD/note/#hardware-reset-requirements","title":"Hardware Reset Requirements","text":"<p>Before initializing the display module, the RST pin must be used to perform a hardware reset. The RST pin should be pulled low for at least 10 microseconds. After pulling RST high to end the reset, a delay of 120 milliseconds is required before data can be transmitted to the display module.</p>"},{"location":"DNESP32S3M/ACTUATION/LCD/note/#backlight-control","title":"Backlight Control","text":"<p>The LEDK pin controls the LCD backlight of the display module. This pin has a built-in pull-down resistor. The backlight is off when the LEDK pin is high or floating and turns on when the LEDK pin is pulled low.</p>"},{"location":"DNESP32S3M/ACTUATION/LCD/note/#color-depth","title":"Color Depth","text":"<p>The ST7735S supports a maximum color depth of 18 bits (262K colors), but 16-bit color depth (65K colors) is generally used for maximum speed. In 16-bit mode, the RGB565 format is used to transmit and store color data, as shown below:</p> <ul> <li>High 5 bits represent red.</li> <li>Middle 6 bits represent green.</li> <li>Low 5 bits represent blue.</li> <li>Larger values correspond to darker colors.</li> </ul>"},{"location":"DNESP32S3M/ACTUATION/LCD/note/#continuous-ram-readwrite-and-scan-direction-configuration","title":"Continuous RAM Read/Write and Scan Direction Configuration","text":"<p>The ST7735S allows continuous read/write operations in its RAM for color data on the LCD. The scan direction (RAM auto-increment direction) can be configured using command <code>0x36</code>, as shown below:</p> <p></p> <p>Command <code>0x36</code> configures six parameters, but only <code>MY</code>, <code>MX</code>, and <code>MV</code> are relevant for setting the LCD scan direction:</p> MY MX MV LCD Scan Direction (RAM Auto-Increment Direction) 0 0 0 Left to right, top to bottom 1 0 0 Left to right, bottom to top 0 1 0 Right to left, top to bottom 1 1 0 Right to left, bottom to top 0 0 1 Top to bottom, left to right 1 0 1 Bottom to top, left to right 0 1 1 Top to bottom, right to left 1 1 1 Bottom to top, right to left <p>This flexibility allows efficient content rendering, such as displaying BMP images that decode data starting from the bottom-left corner. By setting the LCD scan direction appropriately, data can be filled into the LCD without repeatedly setting coordinates, improving display speed.</p>"},{"location":"DNESP32S3M/ACTUATION/LCD/note/#setting-address-for-color-data","title":"Setting Address for Color Data","text":"<p>Before writing color data to the ST7735S, the address must be set to specify which pixel on the LCD will receive the color data. Commands <code>0x2A</code> and <code>0x2B</code> are used to set the column and row addresses, respectively:</p> <ul> <li> <p>Command <code>0x2A</code>: </p> </li> <li> <p>Command <code>0x2B</code>: </p> </li> </ul> <p>With the default LCD scan direction (left to right, top to bottom), the <code>XS</code> and <code>XE</code> parameters of command <code>0x2A</code> and the <code>YS</code> and <code>YE</code> parameters of command <code>0x2B</code> define a region on the LCD. During continuous read/write operations, the ST7735S reads/writes color data in this region following the configured scan direction.</p>"},{"location":"DNESP32S3M/ACTUATION/LCD/note/#dependencies","title":"Dependencies","text":""},{"location":"DNESP32S3M/ACTUATION/LCD/note/#key-functions","title":"Key Functions","text":"<pre><code>/* Function declarations */\nvoid lcd_init(void);                                                                                                  /* Initialize the LCD */\nvoid lcd_clear(uint16_t color);                                                                                       /* Clear the screen */\nvoid lcd_scan_dir(uint8_t dir);                                                                                       /* Set the LCD auto scan direction */\nvoid lcd_write_data(const uint8_t *data, int len);                                                                    /* Write data to the LCD */\nvoid lcd_write_data16(uint16_t data);                                                                                 /* Write 16-bit data to the LCD */\nvoid lcd_set_cursor(uint16_t xpos, uint16_t ypos);                                                                    /* Set the cursor position */\nvoid lcd_set_window(uint16_t xstar, uint16_t ystar, uint16_t xend, uint16_t yend);                                    /* Set the display window size */\nvoid lcd_fill(uint16_t sx, uint16_t sy, uint16_t ex, uint16_t ey, uint16_t color);                                    /* Fill a specific area with a single color */\nvoid lcd_show_num(uint16_t x, uint16_t y, uint32_t num, uint8_t len, uint8_t size, uint16_t color);                   /* Display a number with len digits */\nvoid lcd_show_xnum(uint16_t x, uint16_t y, uint32_t num, uint8_t len, uint8_t size, uint8_t mode, uint16_t color);    /* Display an extended number with len digits */\nvoid lcd_show_string(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t size, char *p, uint16_t color); /* Display a string */\nvoid lcd_draw_rectangle(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color);                          /* Draw a rectangle */\nvoid lcd_draw_hline(uint16_t x, uint16_t y, uint16_t len, uint16_t color);                                            /* Draw a horizontal line */\nvoid lcd_draw_line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);                               /* Draw a straight or slanted line */\nvoid lcd_draw_pixel(uint16_t x, uint16_t y, uint16_t color);                                                          /* Draw a pixel */\nvoid lcd_show_char(uint16_t x, uint16_t y, uint8_t chr, uint8_t size, uint8_t mode, uint16_t color);                  /* Display a character at a specified position */\n</code></pre>"},{"location":"DNESP32S3M/ACTUATION/LED/code/","title":"LED CODE","text":""},{"location":"DNESP32S3M/ACTUATION/LED/code/#component-architecture","title":"Component Architecture","text":"<pre><code>- driver\n    - led\n        - include\n            - led.h\n        - led.c\n        - CMakeLists.txt\n</code></pre>"},{"location":"DNESP32S3M/ACTUATION/LED/code/#driverledcmakeliststxt","title":"driver/led/CMakeLists.txt","text":"<pre><code>set(src_dirs\n    .\n)\n\nset(include_dirs\n    include\n)\n\nset(requires\n    driver\n)\n\nidf_component_register(SRC_DIRS ${src_dirs} INCLUDE_DIRS ${include_dirs} REQUIRES ${requires})\n</code></pre> <p>Note</p> <p>Note that in the drivers, we used gpio from the ESP-IDF builtin <code>driver</code> library, therefore, we need to indicate this dependency in the <code>REQUIRES</code> field of the <code>CMakeLists.txt</code> file.</p>"},{"location":"DNESP32S3M/ACTUATION/LED/code/#ledh","title":"LED.h","text":"<pre><code>/**\n * @file led.h\n * @author SHUAIWEN CUI (SHUAIWEN001@e.ntu.edu.sg)\n * @brief The led here indicates the onboard red led on the Alientek DNESP32S3M minimal development board.\n * @version 1.0\n * @date 2024-11-16\n * \n * @copyright Copyright (c) 2024\n * \n */\n\n#ifndef __LED_H__\n#define __LED_H__\n\n/* Dependencies */\n#include \"driver/gpio.h\"\n\n/* GPIO Pin Definition */\n#define LED_GPIO_PIN    GPIO_NUM_1  /* GPIO port connected to LED */\n\n/* GPIO States */\n#define LED_PIN_RESET       0\n#define LED_PIN_SET         1\n\n/**\n * @brief       Initialize the LED\n * @param       None\n * @retval      None\n */\nvoid led_init(void);\n\n/**\n * @brief       Control the LED\n * @param       x: 1 for on, 0 for off\n * @retval      None\n */\nvoid led(int x);\n\n/**\n * @brief       Toggle the LED\n * @param       None\n * @retval      None\n */\nvoid led_toggle(void);\n\n#endif /* __LED_H__ */\n</code></pre>"},{"location":"DNESP32S3M/ACTUATION/LED/code/#ledc","title":"LED.c","text":"<pre><code>/**\n * @file led.c\n * @author SHUAIWEN CUI (SHUAIWEN001@e.ntu.edu.sg)\n * @brief The led here indicates the onboard red led on the Alientek DNESP32S3M minimal development board.\n * @version 1.0\n * @date 2024-11-16\n * \n * @copyright Copyright (c) 2024\n * \n */\n\n/* Dependencies */\n#include \"led.h\"\n\n/**\n * @brief       Initialize the LED\n * @param       None\n * @retval      None\n */\nvoid led_init(void)\n{\n    gpio_config_t gpio_init_struct = {0};\n\n    gpio_init_struct.intr_type = GPIO_INTR_DISABLE;         /* Disable GPIO interrupt */\n    gpio_init_struct.mode = GPIO_MODE_INPUT_OUTPUT;         /* Set GPIO mode to input-output */\n    gpio_init_struct.pull_up_en = GPIO_PULLUP_ENABLE;       /* Enable pull-up resistor */\n    gpio_init_struct.pull_down_en = GPIO_PULLDOWN_DISABLE;  /* Disable pull-down resistor */\n    gpio_init_struct.pin_bit_mask = 1ull &lt;&lt; LED_GPIO_PIN;   /* Set pin bit mask for the configured pin */\n    gpio_config(&amp;gpio_init_struct);                         /* Configure GPIO */\n\n    led(1); /* Turn on the LED */\n}\n\n/**\n * @brief       Control the LED\n * @param       x: 1 for on, 0 for off\n * @retval      None\n */\nvoid led(int x)\n{\n    if(x)\n    {\n        gpio_set_level(LED_GPIO_PIN, LED_PIN_RESET);\n    }\n    else\n    {\n        gpio_set_level(LED_GPIO_PIN, LED_PIN_SET);\n    }\n}\n\n/**\n * @brief       Toggle the LED\n * @param       None\n * @retval      None\n */\nvoid led_toggle(void)\n{\n    gpio_set_level(LED_GPIO_PIN, !gpio_get_level(LED_GPIO_PIN));\n}\n</code></pre>"},{"location":"DNESP32S3M/ACTUATION/LED/code/#mainc","title":"main.c","text":"<pre><code>/* Dependencies */\n// Basic\n#include \"esp_system.h\"\n#include \"esp_chip_info.h\"\n#include \"esp_psram.h\"\n#include \"esp_flash.h\"\n#include \"nvs_flash.h\"\n\n// RTOS\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n\n// DRIVERS\n#include \"led.h\"\n\n/**\n * @brief Entry point of the program\n * @param None\n * @retval None\n */\nvoid app_main(void)\n{\n    esp_err_t ret;\n    uint32_t flash_size;\n    esp_chip_info_t chip_info;\n\n    // Initialize NVS\n    ret = nvs_flash_init();\n    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)\n    {\n        ESP_ERROR_CHECK(nvs_flash_erase()); // Erase if needed\n        ret = nvs_flash_init();\n    }\n\n    // Get FLASH size\n    esp_flash_get_size(NULL, &amp;flash_size);\n    esp_chip_info(&amp;chip_info);\n\n    // Display CPU core count\n    printf(\"CPU Cores: %d\\n\", chip_info.cores);\n\n    // Display FLASH size\n    printf(\"Flash size: %ld MB flash\\n\", flash_size / (1024 * 1024));\n\n    // Display PSRAM size\n    printf(\"PSRAM size: %d bytes\\n\", esp_psram_get_size());\n\n    // BSP\n    led_init(); \n\n    while (1)\n    {\n        printf(\"Hello-ESP32\\r\\n\");\n        led_toggle();\n        vTaskDelay(1000);\n    }\n}\n</code></pre>"},{"location":"DNESP32S3M/ACTUATION/LED/integration/","title":"INTEGRATION","text":""},{"location":"DNESP32S3M/ACTUATION/LED/integration/#introduction","title":"Introduction","text":"<p>Note</p> <p>In this section, we introduce how to integrate the LED driver into the project.</p>"},{"location":"DNESP32S3M/ACTUATION/LED/integration/#create-a-new-component","title":"Create a New Component","text":"<p>Warning</p> <p>Before you create a component in the <code>driver</code> directory, make sure you have incorporated the <code>driver</code> directory into the project by adding the path to the <code>driver</code> directory to the <code>EXTRA_COMPONENT_DIRS</code> variable in the project-level <code>CMakeLists.txt</code> file.</p> <p>Open the project in VSCode, open the integrated terminal, and type in</p> <p><pre><code>get_idf \n</code></pre> to actiate the ESP-IDF environment. Then type in the following command to create a new component named <code>led</code>:</p> <pre><code>idf.py -C driver create-component led\n</code></pre> <p>The command above means to create a new component named <code>led</code> in the <code>driver</code> directory. After executing the command, you will see a new directory named <code>led</code> in the <code>driver</code> directory. And the command will automatically generate the <code>CMakeLists.txt</code> file for the new component, as well as the <code>led.h</code> and <code>led.c</code> files.</p> <p>Alternatively, you can mannually create the <code>led</code> directory in the <code>driver</code> directory, and then create the <code>CMakeLists.txt</code>, <code>led.h</code>, and <code>led.c</code> files in the <code>led</code> directory.</p>"},{"location":"DNESP32S3M/ACTUATION/LED/integration/#replace-the-code","title":"Replace the Code","text":"<p>Component Level</p> <p>Replace the code in this section into the <code>CMakelists.txt</code>, <code>led.h</code>, and <code>led.c</code> files under the component.</p> <p>Project Level</p> <p>Replace the code in <code>main.c</code> with the corresponding code. No need to change the <code>CMakeLists.txt</code> file at the project level.</p>"},{"location":"DNESP32S3M/ACTUATION/LED/integration/#compile-and-flash-the-project","title":"Compile and Flash the Project","text":"<p>Open the project in VSCode, open the integrated terminal, and type in</p> <pre><code>idf.py build flash monitor\n</code></pre> <p>Or click the small flame icon in the lower-left corner of VSCode to compile, flash, and open the monitor. At this point, you should see the LED light up on the development board and see the corresponding output in the monitor.</p>"},{"location":"DNESP32S3M/ACTUATION/LED/note/","title":"LED NOTES","text":""},{"location":"DNESP32S3M/ACTUATION/LED/note/#introduction","title":"Introduction","text":"<p>Note</p> <p>In this section, we will talk about the onboard LED light on the DNESP32S3M development board. By modify the GPIO pin, the code can be used for other boards as well.</p>"},{"location":"DNESP32S3M/ACTUATION/LED/note/#the-led","title":"The LED","text":""},{"location":"DNESP32S3M/ACTUATION/LED/note/#the-circuit-onboard","title":"The Circuit Onboard","text":"<p>As can be seen, the GPIO to control the LED is IO1.</p>"},{"location":"DNESP32S3M/ACTUATION/LED/note/#the-effect","title":"The Effect","text":""},{"location":"DNESP32S3M/ACTUATION/LED/note/#dependencies","title":"Dependencies","text":""},{"location":"DNESP32S3M/ACTUATION/LED/note/#key-functions","title":"Key Functions","text":"Function Prototype Explanation Example <code>void led_init(void)</code> Initialize the LED <code>led_init();</code> <code>void led(int x)</code> Control the LED <code>led(1);</code> <code>void led_toggle(void)</code> Toggle the LED <code>led_toggle();</code>"},{"location":"DNESP32S3M/COMMUNICATION/communication/","title":"COMMUNICATION","text":""},{"location":"DNESP32S3M/MAIN-CONTROL/main-control/","title":"MAIN CONTROL","text":""},{"location":"DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/code/","title":"FILE SYSTEM (SPIFFS) CODE","text":""},{"location":"DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/code/#component-architecture","title":"Component Architecture","text":"<pre><code>- driver\n    - spiffs\n        - include\n            - spiffs.h\n        - spiffs.c\n        - CMakeLists.txt\n</code></pre>"},{"location":"DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/code/#driverrngcmakeliststxt","title":"driver/rng/CMakeLists.txt","text":"<pre><code>set(src_dirs\n    .\n)\n\nset(include_dirs\n    include\n)\n\nset(requires\n    driver\n    fatfs\n    vfs\n    spi\n)\n\nidf_component_register(SRC_DIRS ${src_dirs} INCLUDE_DIRS ${include_dirs} REQUIRES ${requires})\n</code></pre>"},{"location":"DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/code/#spiffsh","title":"spiffs.h","text":""},{"location":"DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/code/#spiffsc","title":"spiffs.c","text":""},{"location":"DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/code/#spiffsc_1","title":"spiffs.c","text":""},{"location":"DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/fs/","title":"FILE SYSTEM (SPIFFS)","text":""},{"location":"DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/fs/#introduction","title":"Introduction","text":"<p>We have introduced how to drive the SD card, but the operations on the SD card are all direct or write binary data, which is not user-friendly. So we need a file system to manage files, so that users can operate files by file name, rather than by address.</p> <p>The file system we use is SPIFFS, which is a file system designed for SPI flash devices. It is a lightweight file system that is designed for microcontrollers with a small amount of RAM and ROM. It is designed to work with SPI NOR flash devices, which are the most common type of flash memory in microcontrollers.</p> <p>SPIFFS has the following features:</p> <ul> <li>Small Footprint: Designed for limited RAM environments, avoiding the need for heap allocation.</li> <li>Erase Constraints: Only large blocks of data can be erased at once.</li> <li>Erase Behavior: Erasing resets all bits in a block to <code>1</code>.</li> <li>Write Behavior: Write operations flip bits from <code>1</code> to <code>0</code>.</li> <li>Erase to Reset: Bits set to <code>0</code> can only be reset to <code>1</code> through an erase operation.</li> <li> <p>Wear Leveling: Implements wear leveling to ensure balanced usage of flash memory.</p> </li> <li> <p>Optimized for Low RAM Usage: Designed to use a static RAM buffer size, independent of the number of files.</p> </li> <li>POSIX-like Interface: Supports operations such as open, close, read, write, seek, and stat, resembling a portable operating system interface.</li> <li>Wide Compatibility: Runs on any NOR flash memory, not just SPI flash, and can theoretically operate on embedded flash in microprocessors.</li> <li>Multiple Configurations: Allows multiple SPIFFS configurations to run on the same target, even on the same SPI flash device.</li> <li>Static Wear Leveling: Maintains the lifespan of flash memory through static wear leveling.</li> <li>Filesystem Integrity Checks: Includes a built-in file system consistency checker.</li> <li>Highly Configurable: Offers extensive customization options.</li> </ul> <p>VFS</p> <p>VFS (Virtual File System) is a component of ESP-IDF that provides a unified interface for different file systems. This allows various file systems to be operated through a single API. SPIFFS is one such implementation under VFS.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/fs/#use-case","title":"Use Case","text":"<ol> <li>Create a <code>holle.txt</code> file in the specified area of the NOR flash, then perform read and write operations on this file.</li> <li>Blink an LED to indicate the program is running.</li> </ol>"},{"location":"DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/fs/#resources-involved","title":"Resources Involved","text":"<ol> <li>LED</li> <li>Pin: IO0</li> <li>0.96-inch LCD</li> <li>SPIFFS</li> </ol>"},{"location":"DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/fs/#spiffs-api","title":"SPIFFS API","text":""},{"location":"DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/fs/#register-and-mount-spiffs","title":"Register and Mount SPIFFS","text":"<p>This function registers SPIFFS to the VFS (Virtual File System) and mounts it with a given path prefix. The function prototype is as follows:</p> <pre><code>esp_err_t esp_vfs_spiffs_register(const esp_vfs_spiffs_conf_t * conf);\n</code></pre> <p>Function Parameter Description</p> Parameter Description <code>conf</code> Pointer to the configuration structure of type <code>esp_vfs_spiffs_conf_t</code> <p>Return Values</p> Return Value Description <code>ESP_OK</code> Returns <code>0</code>, configuration successful <code>ESP_ERR_NO_MEM</code> If objects cannot be allocated <code>ESP_ERR_INVALID_STATE</code> If already mounted or the partition is encrypted <code>ESP_ERR_NOT_FOUND</code> If the SPIFFS partition cannot be found <code>ESP_FAIL</code> If mounting or formatting fails <p>Configuration Structure Definition</p> <p>The function uses a structure variable of type <code>esp_vfs_spiffs_conf_t</code> as its parameter. The structure is defined as follows:</p> Member Variable Description <code>base_path</code> File path prefix associated with the file system. <code>partition_label</code> Optional, the label of the SPIFFS partition to use. If set to <code>NULL</code>, the default partition is used. <code>max_files</code> Maximum number of files that can be opened simultaneously. <code>format_if_mount_failed</code> If <code>true</code>, formats the file system if mounting fails."},{"location":"DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/fs/#retrieve-spiffs-information","title":"Retrieve SPIFFS Information","text":"<p>This function is used to retrieve information about SPIFFS. Its function prototype is as follows:</p> <pre><code>esp_err_t esp_spiffs_info(const char* partition_label,\n                          size_t *total_bytes,\n                          size_t *used_bytes);\n</code></pre> <p>The function parameters are described as follows:</p> Parameter Description <code>partition_label</code> Label of the SPIFFS partition <code>total_bytes</code> Pointer to a variable that stores the total byte count <code>used_bytes</code> Pointer to a variable that stores the used byte count <p>Return Values:</p> <ul> <li><code>ESP_OK</code>: Success</li> <li>Other: Failure</li> </ul>"},{"location":"DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/fs/#unregister-and-unmount-spiffs","title":"Unregister and Unmount SPIFFS","text":"<p>This function unregisters SPIFFS from the VFS and unmounts it. The function prototype is as follows:</p> <pre><code>esp_err_t esp_vfs_spiffs_unregister(const char* partition_label);\n</code></pre> <p>The function parameters are described as follows:</p> Parameter Description <code>partition_label</code> Pointer to the partition table, partition name <p>Return Values:</p> <ul> <li><code>ESP_OK</code>: Success</li> <li>Others: Failure</li> </ul>"},{"location":"DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/fs/#driver-code","title":"Driver Code","text":""},{"location":"DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/fs/#spiffsh","title":"spiffs.h","text":"<pre><code>/**\n * @file fs.h\n * @author SHUAIWEN CUI (SHUAIWEN001@e.ntu.edu.sg)\n * @brief This file wraps up some frequently used functions for file system operations.\n * @version 1.0\n * @date 2024-11-19\n * \n * @copyright Copyright (c) 2024\n * \n */\n\n/* Dependencies */\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include \"led.h\"\n#include \"spi.h\"\n#include \"lcd.h\"\n// #include \"esp_spiffs.h\"\n#include \"esp_vfs.h\"\n#include \"esp_spiffs.h\"\n#include &lt;sys/stat.h&gt;\n#include \"esp_log.h\"\n\n\n/* Dependencies */\n// Basic\n#include \"esp_system.h\"\n#include \"esp_chip_info.h\"\n// #include \"esp_psram.h\"\n// #include \"esp_flash.h\"\n// #include \"nvs_flash.h\"\n#include \"spi_sdcard.h\"\n\n/* Definitions */\n#define DEFAULT_FD_NUM          5\n#define DEFAULT_MOUNT_POINT     \"/spiffs\"\n#define WRITE_DATA              \"ESP32-S3\\r\\n\"\n\n/**\n * @brief       SPIFFS initialization\n * @param       partition_label: The name of the partition in the partition table\n * @param       mount_point: The path prefix associated with the file system\n * @param       max_files: Maximum number of files that can be opened simultaneously\n * @retval      None\n */\nesp_err_t spiffs_init(char *partition_label, char *mount_point, size_t max_files);\n\n/**\n * @brief       Deinitialize SPIFFS\n * @param       partition_label: Partition label\n * @retval      None\n */\nesp_err_t spiffs_deinit(char *partition_label);\n\n/**\n * @brief       Test SPIFFS functionality\n * @param       None\n * @retval      None\n */\nvoid spiffs_test(void);\n</code></pre>"},{"location":"DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/fs/#spiffsc","title":"spiffs.c","text":"<pre><code>/**\n * @file fs.c\n * @author \n * @brief This file wraps up some frequently used functions for file system operations.\n * @version 1.0\n * @date 2024-11-19\n * \n */\n\n#include \"spiffs.h\"\n\n/* Variables */\nconst char               *TAG = \"spiffs\";\n\n/**\n * @brief       Initialize SPIFFS\n * @param       partition_label: Partition label in the partition table\n * @param       mount_point: Prefix path associated with the file system\n * @param       max_files: Maximum number of files that can be opened simultaneously\n * @retval      None\n */\nesp_err_t spiffs_init(char *partition_label, char *mount_point, size_t max_files)\n{\n    /* Configure parameters for the SPIFFS file system */\n    esp_vfs_spiffs_conf_t conf = {\n        .base_path = mount_point,\n        .partition_label = partition_label,\n        .max_files = max_files,\n        .format_if_mount_failed = true,\n    };\n\n    /* Initialize and mount the SPIFFS file system using the above configuration */\n    esp_err_t ret_val = esp_vfs_spiffs_register(&amp;conf);\n\n    /* Check if SPIFFS mount and initialization were successful */\n    if (ret_val != ESP_OK)\n    {\n        if (ret_val == ESP_FAIL)\n        {\n            printf(\"Failed to mount or format filesystem\\n\");\n        }\n        else if (ret_val == ESP_ERR_NOT_FOUND)\n        {\n            printf(\"Failed to find SPIFFS partition\\n\");\n        }\n        else\n        {\n            printf(\"Failed to initialize SPIFFS (%s)\\n\", esp_err_to_name(ret_val));\n        }\n\n        return ESP_FAIL;\n    }\n\n    /* Print SPIFFS storage information */\n    size_t total = 0, used = 0;\n    ret_val = esp_spiffs_info(conf.partition_label, &amp;total, &amp;used);\n\n    if (ret_val != ESP_OK)\n    {\n        ESP_LOGI(TAG, \"Failed to get SPIFFS partition information (%s)\", esp_err_to_name(ret_val));\n    }\n    else\n    {\n        ESP_LOGI(TAG, \"Partition size: total: %d, used: %d\", total, used);\n    }\n\n    return ret_val;\n}\n\n/**\n * @brief       Unregister SPIFFS\n * @param       partition_label: Partition label in the partition table\n * @retval      None\n */\nesp_err_t spiffs_deinit(char *partition_label)\n{\n    return esp_vfs_spiffs_unregister(partition_label);\n}\n\n/**\n * @brief       Test SPIFFS\n * @param       None\n * @retval      None\n */\nvoid spiffs_test(void)\n{\n\n    ESP_LOGI(TAG, \"Opening file\");\n    /* Create a write-only file named /spiffs/hello.txt */\n    FILE* f = fopen(\"/spiffs/hello.txt\", \"w\");\n\n    if (f == NULL)\n    {\n        ESP_LOGE(TAG, \"Failed to open file for writing\");\n        return;\n    }\n\n    /* Write data to the file */\n    fprintf(f, WRITE_DATA);\n\n    fclose(f);\n    ESP_LOGI(TAG, \"File written\");\n\n    /* Check if the target file exists before renaming */\n    struct stat st;\n\n    if (stat(\"/spiffs/foo.txt\", &amp;st) == 0) /* Get file information, returns 0 on success */\n    {\n        /* Remove a file name from the file system. \n           If the name is the last link to a file and no other processes have it open,\n           the file is deleted. */\n        unlink(\"/spiffs/foo.txt\");\n    }\n\n    /* Rename the created file */\n    ESP_LOGI(TAG, \"Renaming file\");\n\n    if (rename(\"/spiffs/hello.txt\", \"/spiffs/foo.txt\") != 0)\n    {\n        ESP_LOGE(TAG, \"Rename failed\");\n        return;\n    }\n\n    /* Open the renamed file and read it */\n    ESP_LOGI(TAG, \"Reading file\");\n    f = fopen(\"/spiffs/foo.txt\", \"r\");\n\n    if (f == NULL)\n    {\n        ESP_LOGE(TAG, \"Failed to open file for reading\");\n        return;\n    }\n\n    char line[64];\n    fgets(line, sizeof(line), f);\n    fclose(f);\n\n    char* pos = strchr(line, '\\n'); /* Pointer pos points to the first occurrence of '\\n' */\n\n    if (pos)\n    {\n        *pos = '\\0';                /* Replace '\\n' with '\\0' */\n    }\n\n    ESP_LOGI(TAG, \"Read from file: %s\", line);\n\n    lcd_show_string(90, 20, 200, 16, 16, line, RED);\n}\n</code></pre> <p>Note</p> <p>\u5728CMakeLists.txt\u4e2d\u6dfb\u52a0\u6e90\u6587\u4ef6\u548c\u5934\u6587\u4ef6\uff0c\u540c\u65f6\u589e\u52a0\u4f9d\u8d56\u9879spiffs.c</p> <pre><code>set(requires\n            driver\n            fatfs\n            esp_timer\n            newlib\n            spiffs\n            )\n</code></pre>"},{"location":"DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/fs/#mainc","title":"main.c","text":"<pre><code>/**\n * @file main.c\n * @author\n * @brief Main application to demonstrate the use of ESP32 internal temperature sensor\n * @version 1.0\n * @date 2024-11-17\n *\n * @copyright Copyright (c) 2024\n *\n */\n\n/* Dependencies */\n// Basic\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include \"esp_system.h\"\n#include \"esp_chip_info.h\"\n#include \"esp_psram.h\"\n#include \"esp_flash.h\"\n#include \"nvs_flash.h\"\n#include \"esp_log.h\"\n#include \"esp_spiffs.h\"\n#include &lt;sys/stat.h&gt;\n\n// RTOS\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n\n// BSP\n#include \"led.h\"\n#include \"rgb.h\"\n#include \"key.h\"\n#include \"exit.h\"\n#include \"lcd.h\"\n#include \"spi.h\"\n#include \"esp_rtc.h\"\n#include \"temp.h\"\n#include \"rng.h\"\n#include \"spi_sdcard.h\"\n#include \"spiffs.h\"\n\n/**\n * @brief       Program entry point\n * @param       None\n * @retval      None\n */\nvoid app_main(void)\n{\n    esp_err_t ret;\n\n    ret = nvs_flash_init();                                         /* Initialize NVS */\n\n    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)\n    {\n        ESP_ERROR_CHECK(nvs_flash_erase());\n        ret = nvs_flash_init();\n    }\n\n    ESP_ERROR_CHECK(ret);\n\n    led_init();                                                     /* Initialize LED */\n    spi2_init();                                                    /* Initialize SPI */\n    lcd_init();                                                     /* Initialize LCD */\n    spiffs_init(\"storage\", DEFAULT_MOUNT_POINT, DEFAULT_FD_NUM);    /* Initialize SPIFFS */\n\n    /* Display test information */\n    lcd_show_string(0, 0, 200, 16, 16, \"SPIFFS TEST\", RED);\n    lcd_show_string(0, 20, 200, 16, 16, \"Read file:\", BLUE);\n\n    spiffs_test();                                                  /* Run SPIFFS test */\n\n    while (1)\n    {\n        led_toggle();\n        vTaskDelay(500);\n    }\n}\n</code></pre>"},{"location":"DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/integration/","title":"INTEGRATION","text":""},{"location":"DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/integration/#introduction","title":"Introduction","text":"<p>Note</p> <p>In this section, we introduce how to integrate the spi_sdcarder driver into the project.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/integration/#create-a-new-component","title":"Create a New Component","text":"<p>Warning</p> <p>Before you create a component in the <code>driver</code> directory, make sure you have incorporated the <code>driver</code> directory into the project by adding the path to the <code>driver</code> directory to the <code>EXTRA_COMPONENT_DIRS</code> variable in the project-level <code>CMakeLists.txt</code> file.</p> <p>Open the project in VSCode, open the integrated terminal, and type in</p> <p><pre><code>get_idf \n</code></pre> to actiate the ESP-IDF environment. Then type in the following command to create a new component named <code>spi_sdcard</code>:</p> <pre><code>idf.py -C driver create-component spi_sdcard\n</code></pre> <p>The command above means to create a new component named <code>spi_sdcard</code> in the <code>driver</code> directory. After executing the command, you will see a new directory named <code>spi_sdcard</code> in the <code>driver</code> directory. And the command will automatically generate the <code>CMakeLists.txt</code> file for the new component, as well as the <code>spi_sdcard.h</code> and <code>spi_sdcard.c</code> files.</p> <p>Alternatively, you can mannually create the <code>spi_sdcard</code> directory in the <code>driver</code> directory, and then create the <code>CMakeLists.txt</code>, <code>spi_sdcard.h</code>, and <code>spi_sdcard.c</code> files in the <code>spi_sdcard</code> directory.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/integration/#replace-the-code","title":"Replace the Code","text":"<p>Component Level</p> <p>Replace the code in this section into the <code>CMakelists.txt</code>, <code>spi_sdcard.h</code>, and <code>spi_sdcard.c</code> files under the component.</p> <p>Project Level</p> <p>Replace the code in <code>main.c</code> with the corresponding code. No need to change the <code>CMakeLists.txt</code> file at the project level.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/integration/#compile-and-flash-the-project","title":"Compile and Flash the Project","text":"<p>Open the project in VSCode, open the integrated terminal, and type in</p> <pre><code>idf.py build flash monitor\n</code></pre> <p>Then you will see the information of SD card showing on the LCD screen.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/note/","title":"FILE SYSTEM (SPIFFS)","text":""},{"location":"DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/note/#introduction","title":"Introduction","text":"<p>We have introduced how to drive the SD card, but the operations on the SD card are all direct or write binary data, which is not user-friendly. So we need a file system to manage files, so that users can operate files by file name, rather than by address.</p> <p>The file system we use is SPIFFS, which is a file system designed for SPI flash devices. It is a lightweight file system that is designed for microcontrollers with a small amount of RAM and ROM. It is designed to work with SPI NOR flash devices, which are the most common type of flash memory in microcontrollers.</p> <p>SPIFFS has the following features:</p> <ul> <li>Small Footprint: Designed for limited RAM environments, avoiding the need for heap allocation.</li> <li>Erase Constraints: Only large blocks of data can be erased at once.</li> <li>Erase Behavior: Erasing resets all bits in a block to <code>1</code>.</li> <li>Write Behavior: Write operations flip bits from <code>1</code> to <code>0</code>.</li> <li>Erase to Reset: Bits set to <code>0</code> can only be reset to <code>1</code> through an erase operation.</li> <li> <p>Wear Leveling: Implements wear leveling to ensure balanced usage of flash memory.</p> </li> <li> <p>Optimized for Low RAM Usage: Designed to use a static RAM buffer size, independent of the number of files.</p> </li> <li>POSIX-like Interface: Supports operations such as open, close, read, write, seek, and stat, resembling a portable operating system interface.</li> <li>Wide Compatibility: Runs on any NOR flash memory, not just SPI flash, and can theoretically operate on embedded flash in microprocessors.</li> <li>Multiple Configurations: Allows multiple SPIFFS configurations to run on the same target, even on the same SPI flash device.</li> <li>Static Wear Leveling: Maintains the lifespan of flash memory through static wear leveling.</li> <li>Filesystem Integrity Checks: Includes a built-in file system consistency checker.</li> <li>Highly Configurable: Offers extensive customization options.</li> </ul> <p>VFS</p> <p>VFS (Virtual File System) is a component of ESP-IDF that provides a unified interface for different file systems. This allows various file systems to be operated through a single API. SPIFFS is one such implementation under VFS.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/note/#use-case","title":"Use Case","text":"<ol> <li>Create a <code>hello.txt</code> file in the specified area of the NOR flash, then perform read and write operations on this file.</li> <li>Blink an LED to indicate the program is running.</li> </ol>"},{"location":"DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/note/#resources-involved","title":"Resources Involved","text":"<ol> <li>LED</li> <li>Pin: IO0</li> <li>0.96-inch LCD</li> <li>SPIFFS</li> </ol>"},{"location":"DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/note/#spiffs-api","title":"SPIFFS API","text":""},{"location":"DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/note/#register-and-mount-spiffs","title":"Register and Mount SPIFFS","text":"<p>This function registers SPIFFS to the VFS (Virtual File System) and mounts it with a given path prefix. The function prototype is as follows:</p> <pre><code>esp_err_t esp_vfs_spiffs_register(const esp_vfs_spiffs_conf_t * conf);\n</code></pre> <p>Function Parameter Description</p> Parameter Description <code>conf</code> Pointer to the configuration structure of type <code>esp_vfs_spiffs_conf_t</code> <p>Return Values</p> Return Value Description <code>ESP_OK</code> Returns <code>0</code>, configuration successful <code>ESP_ERR_NO_MEM</code> If objects cannot be allocated <code>ESP_ERR_INVALID_STATE</code> If already mounted or the partition is encrypted <code>ESP_ERR_NOT_FOUND</code> If the SPIFFS partition cannot be found <code>ESP_FAIL</code> If mounting or formatting fails <p>Configuration Structure Definition</p> <p>The function uses a structure variable of type <code>esp_vfs_spiffs_conf_t</code> as its parameter. The structure is defined as follows:</p> Member Variable Description <code>base_path</code> File path prefix associated with the file system. <code>partition_label</code> Optional, the label of the SPIFFS partition to use. If set to <code>NULL</code>, the default partition is used. <code>max_files</code> Maximum number of files that can be opened simultaneously. <code>format_if_mount_failed</code> If <code>true</code>, formats the file system if mounting fails."},{"location":"DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/note/#retrieve-spiffs-information","title":"Retrieve SPIFFS Information","text":"<p>This function is used to retrieve information about SPIFFS. Its function prototype is as follows:</p> <pre><code>esp_err_t esp_spiffs_info(const char* partition_label,\n                          size_t *total_bytes,\n                          size_t *used_bytes);\n</code></pre> <p>The function parameters are described as follows:</p> Parameter Description <code>partition_label</code> Label of the SPIFFS partition <code>total_bytes</code> Pointer to a variable that stores the total byte count <code>used_bytes</code> Pointer to a variable that stores the used byte count <p>Return Values:</p> <ul> <li><code>ESP_OK</code>: Success</li> <li>Other: Failure</li> </ul>"},{"location":"DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/note/#unregister-and-unmount-spiffs","title":"Unregister and Unmount SPIFFS","text":"<p>This function unregisters SPIFFS from the VFS and unmounts it. The function prototype is as follows:</p> <pre><code>esp_err_t esp_vfs_spiffs_unregister(const char* partition_label);\n</code></pre> <p>The function parameters are described as follows:</p> Parameter Description <code>partition_label</code> Pointer to the partition table, partition name <p>Return Values:</p> <ul> <li><code>ESP_OK</code>: Success</li> <li>Others: Failure</li> </ul>"},{"location":"DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/note/#dependencies","title":"Dependencies","text":""},{"location":"DNESP32S3M/MAIN-CONTROL/RNG/code/","title":"RNG CODE","text":""},{"location":"DNESP32S3M/MAIN-CONTROL/RNG/code/#component-architecture","title":"Component Architecture","text":"<pre><code>- driver\n    - rng\n        - include\n            - rng.h\n        - rng.c\n        - CMakeLists.txt\n</code></pre>"},{"location":"DNESP32S3M/MAIN-CONTROL/RNG/code/#driverrngcmakeliststxt","title":"driver/rng/CMakeLists.txt","text":"<pre><code>set(src_dirs\n    .\n)\n\nset(include_dirs\n    include\n)\n\nset(requires\n)\n\nidf_component_register(SRC_DIRS ${src_dirs} INCLUDE_DIRS ${include_dirs} REQUIRES ${requires})\n</code></pre>"},{"location":"DNESP32S3M/MAIN-CONTROL/RNG/code/#rngh","title":"rng.h","text":"<pre><code>/**\n * @file rng.h\n * @author \n * @brief This is the header file for the RNG component.\n * @version 1.0\n * @date 2024-11-19\n * @ref Alientek RNG Driver\n * @copyright Copyright (c) 2024\n * \n */\n\n#ifndef __RNG_H__\n#define __RNG_H__\n\n#include &lt;stdint.h&gt;\n#include &lt;stddef.h&gt;\n#include &lt;string.h&gt;\n#include &lt;sys/param.h&gt;\n#include \"esp_attr.h\"\n#include \"esp_cpu.h\"\n#include \"soc/wdev_reg.h\"\n#include \"esp_random.h\"\n#include \"esp_private/esp_clk.h\"\n\n\n/* Function Declarations */\n\n/**\n * @brief       Get a random number\n * @param       None\n * @retval      Random number (32-bit)\n */\nuint32_t rng_get_random_num(void);          /* Get a random number */\n\n/**\n * @brief       Get a random number within a specific range\n * @param       min,max: Minimum and maximum values\n * @retval      Random number (rval), satisfying: min &lt;= rval &lt;= max\n */\nint rng_get_random_range(int min, int max); /* Get a random number within a specific range */\n\n#endif /* __RNG_H__ */\n</code></pre>"},{"location":"DNESP32S3M/MAIN-CONTROL/RNG/code/#rngc","title":"rng.c","text":"<pre><code>/**\n * @file rng.c\n * @author \n * @brief This is the source file for the RNG component.\n * @version 1.0\n * @date 2024-11-19\n * @ref Alientek RNG Driver\n * @copyright Copyright (c) 2024\n * \n */\n\n#include \"rng.h\"\n\n/**\n * @brief       Get a random number\n * @param       None\n * @retval      Random number (32-bit)\n */\nuint32_t rng_get_random_num(void)\n{\n    uint32_t randomnum;\n\n    randomnum = esp_random();\n\n    return randomnum;\n}\n\n/**\n * @brief       Get a random number within a specific range\n * @param       min,max: Minimum and maximum values\n * @retval      Random number (rval), satisfying: min &lt;= rval &lt;= max\n */\nint rng_get_random_range(int min, int max)\n{ \n    uint32_t randomnum;\n\n    randomnum = esp_random();\n\n    return randomnum % (max - min + 1) + min;\n}\n</code></pre>"},{"location":"DNESP32S3M/MAIN-CONTROL/RNG/code/#mainc","title":"main.c","text":"<pre><code>/**\n * @file main.c\n * @author\n * @brief Main application to demonstrate the use of ESP32 internal temperature sensor\n * @version 1.0\n * @date 2024-11-17\n *\n * @copyright Copyright (c) 2024\n *\n */\n\n/* Dependencies */\n// Basic\n#include \"esp_system.h\"\n#include \"esp_chip_info.h\"\n#include \"esp_psram.h\"\n#include \"esp_flash.h\"\n#include \"nvs_flash.h\"\n#include \"esp_log.h\"\n\n// RTOS\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n\n// BSP\n#include \"led.h\"\n#include \"exit.h\"\n#include \"rng.h\"\n\nvoid app_main(void)\n{\n    uint32_t random1, random2;\n    esp_err_t ret;\n\n    ret = nvs_flash_init();                                         /* Initialize NVS */\n\n    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)\n    {\n        ESP_ERROR_CHECK(nvs_flash_erase());\n        ret = nvs_flash_init();\n    }\n\n    led_init();                                                     /* Initialize LED */\n\n    while(1)\n    {\n        random1 = rng_get_random_num();\n        printf(\"Random number 1: %ld\\n\", random1);\n        random2 = rng_get_random_range(0, 9);\n        printf(\"Random number 2: %ld\\n\", random2);\n        led_toggle();\n        vTaskDelay(1000);\n    }\n}\n</code></pre>"},{"location":"DNESP32S3M/MAIN-CONTROL/RNG/integration/","title":"INTEGRATION","text":""},{"location":"DNESP32S3M/MAIN-CONTROL/RNG/integration/#introduction","title":"Introduction","text":"<p>Note</p> <p>In this section, we introduce how to integrate the rnger driver into the project.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/RNG/integration/#create-a-new-component","title":"Create a New Component","text":"<p>Warning</p> <p>Before you create a component in the <code>driver</code> directory, make sure you have incorporated the <code>driver</code> directory into the project by adding the path to the <code>driver</code> directory to the <code>EXTRA_COMPONENT_DIRS</code> variable in the project-level <code>CMakeLists.txt</code> file.</p> <p>Open the project in VSCode, open the integrated terminal, and type in</p> <p><pre><code>get_idf \n</code></pre> to actiate the ESP-IDF environment. Then type in the following command to create a new component named rng`:</p> <pre><code>idf.py -C driver create-component rng\n</code></pre> <p>The command above means to create a new component named <code>rng</code> in the <code>driver</code> directory. After executing the command, you will see a new directory named <code>rng</code> in the <code>driver</code> directory. And the command will automatically generate the <code>CMakeLists.txt</code> file for the new component, as well as the <code>rng.h</code> and <code>rng.c</code> files.</p> <p>Alternatively, you can mannually create the <code>rng</code> directory in the <code>driver</code> directory, and then create the <code>CMakeLists.txt</code>, <code>rng.h</code>, and <code>rng.c</code> files in the <code>rng</code> directory.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/RNG/integration/#replace-the-code","title":"Replace the Code","text":"<p>Component Level</p> <p>Replace the code in this section into the <code>CMakelists.txt</code>, <code>rng.h</code>, and <code>rng.c</code> files under the component.</p> <p>Project Level</p> <p>Replace the code in <code>main.c</code> with the corresponding code. No need to change the <code>CMakeLists.txt</code> file at the project level.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/RNG/integration/#compile-and-flash-the-project","title":"Compile and Flash the Project","text":"<p>Open the project in VSCode, open the integrated terminal, and type in</p> <pre><code>idf.py build flash monitor\n</code></pre> <p>Now, you will see random numbers from the serial monitor.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/RNG/note/","title":"RNG (Random Number Generator)","text":"<p>Info</p> <p>ESP32-S3 features a true random number generator (RNG) that generates 32-bit random numbers, which can serve as a basis for operations such as encryption. Unlike algorithm-based generators, the ESP32-S3 RNG produces true random numbers through physical processes, ensuring an equal probability of occurrence for all numbers within a specific range.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/RNG/note/#rng-features","title":"RNG Features","text":"<p>To better understand the RNG, let's first examine its noise sources. Familiarizing yourself with the noise sources provides a solid foundation for programming and offers a clearer perspective on its workings. The noise sources of the ESP32-S3 RNG are illustrated below:</p> <p></p> <p>The ESP32 RNG generates 32-bit true random numbers via the RNG_DATA_REG register. Its noise sources mainly include thermal noise and asynchronous clocks: - Thermal noise originates from the SAR ADC or high-speed ADC. When these modules are active, they generate bitstreams that are processed through an XOR operation to serve as random seeds for the RNG. - When the RC_FAST_CLK (20MHz) is enabled for the digital core, the RNG samples the clock, leveraging its metastable characteristics to increase entropy.</p> <p>For maximum entropy, it is recommended to enable at least one ADC (SAR ADC or high-speed ADC) as a random seed source in conjunction with the RC_FAST_CLK.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/RNG/note/#rng-random-number-register","title":"RNG Random Number Register","text":"<p>RNG_DATA_REG Random Number Data 0x0110 Read-only</p> <p></p>"},{"location":"DNESP32S3M/MAIN-CONTROL/RNG/note/#example","title":"Example","text":"<p>This example demonstrates how to use the ESP32-S3 built-in hardware random number generator (RNG) to obtain random numbers, for a given period, and print them.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/RNG/note/#dependencies","title":"Dependencies","text":"<p>This section does not have any dependencies.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/RNG/note/#key-functions","title":"Key Functions","text":"Function Prototype Explanation Example uint32_t rng_get_random_num(void) Get a random number rng_get_random_num() int rng_get_random_range(int min, int max) Get a random number within a specific range rng_get_random_range(0, 9)"},{"location":"DNESP32S3M/MAIN-CONTROL/RTC/code/","title":"ESP_RTC CODE","text":"<p>Warning</p> <p>Looks there is a builtin file named <code>rtc.h</code> in the ESP-IDF, so we need to name our file as <code>esp_rtc.h</code> to avoid conflicts. So as to the <code>rtc.c</code> file.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/RTC/code/#component-architecture","title":"Component Architecture","text":"<pre><code>- driver\n    - esp_rtc\n        - include\n            - esp_rtc.h\n        - esp_rtc.c\n        - CMakeLists.txt\n</code></pre>"},{"location":"DNESP32S3M/MAIN-CONTROL/RTC/code/#driveresp_rtccmakeliststxt","title":"driver/esp_rtc/CMakeLists.txt","text":"<pre><code>set(src_dirs\n    .\n)\n\nset(include_dirs\n    include\n)\n\nset(requires\n)\n\nidf_component_register(SRC_DIRS ${src_dirs} INCLUDE_DIRS ${include_dirs} REQUIRES ${requires})\n</code></pre>"},{"location":"DNESP32S3M/MAIN-CONTROL/RTC/code/#esp_rtch","title":"esp_rtc.h","text":"<pre><code>/**\n * @file esp_rtc.h\n * ! Do not name as rtc.h, as it will conflict with the built-in rtc.h\n * @author\n * @brief Header file for the RTC driver\n * @version 1.0\n * @date 2024-11-18\n * @ref Alienteck RTC Driver\n * @copyright Copyright (c) 2024\n *\n */\n\n#ifndef __ESP_RTC_H__\n#define __ESP_RTC_H__\n\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include &lt;sys/time.h&gt;\n\n/* Time structure, including year, month, day, week, hour, minute, and second */\ntypedef struct\n{\n    uint8_t hour; /* Hour */\n    uint8_t min;  /* Minute */\n    uint8_t sec;  /* Second */\n    /* Gregorian year, month, day, and week */\n    uint16_t year; /* Year */\n    uint8_t month; /* Month */\n    uint8_t date;  /* Day */\n    uint8_t week;  /* Weekday */\n} _calendar_obj;\n\nextern _calendar_obj calendar; /* Time structure */\n\n/* Function declarations */\n/**\n * @brief       Set the RTC time\n * @param       year    : Year\n * @param       mon     : Month\n * @param       mday    : Day\n * @param       hour    : Hour\n * @param       min     : Minute\n * @param       sec     : Second\n * @retval      None\n */\nvoid rtc_set_time(int year, int mon, int mday, int hour, int min, int sec); /* Set time */\n\n/**\n * @brief       Get the current time\n * @param       None\n * @retval      None\n */\nvoid rtc_get_time(void); /* Get time */\n\n/**\n * @brief       Convert year, month, and day to the day of the week\n * @note        Calculates the weekday based on the Gregorian calendar.\n *              Utilizes the Kim Larson formula for calculation.\n *              For more details, refer to:\n *              https://www.cnblogs.com/fengbohello/p/3264300.html\n * @param       year : Year\n * @param       month: Month\n * @param       day  : Day\n * @retval      0: Sunday; 1 ~ 6: Monday ~ Saturday\n */\nuint8_t rtc_get_week(uint16_t year, uint8_t month, uint8_t day); /* Get the weekday */\n\n#endif /* __ESP_RTC_H__ */\n</code></pre>"},{"location":"DNESP32S3M/MAIN-CONTROL/RTC/code/#esp_rtcc","title":"esp_rtc.c","text":"<pre><code>/**\n * @file esp_rtc.c\n * ! Do not name as rtc.c, as it will conflict with the built-in rtc.c\n * @author\n * @brief This file contains the implementation of the RTC driver\n * @version 1.0\n * @date 2024-11-18\n * @ref Alienteck RTC Driver\n *\n */\n\n#include \"esp_rtc.h\"\n\n_calendar_obj calendar; /* Time structure */\n\n/**\n * @brief       Set the RTC time\n * @param       year    : Year\n * @param       mon     : Month\n * @param       mday    : Day\n * @param       hour    : Hour\n * @param       min     : Minute\n * @param       sec     : Second\n * @retval      None\n */\nvoid rtc_set_time(int year, int mon, int mday, int hour, int min, int sec)\n{\n    struct tm datetime;\n    /* Set time */\n    datetime.tm_year = year - 1900;\n    datetime.tm_mon = mon - 1;\n    datetime.tm_mday = mday;\n    datetime.tm_hour = hour;\n    datetime.tm_min = min;\n    datetime.tm_sec = sec;\n    datetime.tm_isdst = -1;\n    /* Get total seconds since 1970-01-01 */\n    time_t second = mktime(&amp;datetime);\n    struct timeval val = {.tv_sec = second, .tv_usec = 0};\n    /* Set current time */\n    settimeofday(&amp;val, NULL);\n}\n\n/**\n * @brief       Get the current time\n * @param       None\n * @retval      None\n */\nvoid rtc_get_time(void)\n{\n    struct tm *datetime;\n    time_t second;\n    /* Get the time elapsed since (1970-01-01 00:00:00 UTC) in seconds */\n    time(&amp;second);\n    datetime = localtime(&amp;second);\n\n    calendar.hour = datetime-&gt;tm_hour; /* Hour */\n    calendar.min = datetime-&gt;tm_min;   /* Minute */\n    calendar.sec = datetime-&gt;tm_sec;   /* Second */\n    /* Gregorian year, month, day, and week */\n    calendar.year = datetime-&gt;tm_year + 1900; /* Year */\n    calendar.month = datetime-&gt;tm_mon + 1;    /* Month */\n    calendar.date = datetime-&gt;tm_mday;        /* Day */\n    /* Weekday */\n    calendar.week = rtc_get_week(calendar.year, calendar.month, calendar.date);\n}\n\n/**\n * @brief       Convert year, month, and day to the day of the week\n * @note        Calculates the weekday based on the Gregorian calendar.\n *              Utilizes the Kim Larson formula for calculation.\n *              For more details, refer to:\n *              https://www.cnblogs.com/fengbohello/p/3264300.html\n * @param       year : Year\n * @param       month: Month\n * @param       day  : Day\n * @retval      0: Sunday; 1 ~ 6: Monday ~ Saturday\n */\nuint8_t rtc_get_week(uint16_t year, uint8_t month, uint8_t day)\n{\n    uint8_t week = 0;\n\n    if (month &lt; 3)\n    {\n        month += 12;\n        --year;\n    }\n\n    week = (day + 1 + 2 * month + 3 * (month + 1) / 5 + year + (year &gt;&gt; 2) - year / 100 + year / 400) % 7;\n    return week;\n}\n</code></pre>"},{"location":"DNESP32S3M/MAIN-CONTROL/RTC/code/#mainc","title":"main.c","text":"<pre><code>/**\n * @file main.c\n * @author SHUAIWEN CUI (SHUAIWEN001@e.ntu.edu.sg)\n * @brief\n * @version 1.0\n * @date 2024-11-17\n *\n * @copyright Copyright (c) 2024\n *\n */\n\n/* Dependencies */\n// Basic\n#include \"esp_system.h\"\n#include \"esp_chip_info.h\"\n#include \"esp_psram.h\"\n#include \"esp_flash.h\"\n#include \"nvs_flash.h\"\n#include \"esp_log.h\"\n\n// RTOS\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n\n// BSP\n#include \"led.h\"\n#include \"exit.h\"\n#include \"esp_rtc.h\"\n\n/* Global variables */\nchar *weekdays[] = {\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\",\n                    \"Thursday\", \"Friday\", \"Saterday\"};\n\n/**\n * @brief Entry point of the program\n * @param None\n * @retval None\n */\nvoid app_main(void)\n{\n    esp_err_t ret;\n    uint8_t tbuf[40];\n    uint8_t t = 0;\n\n    ret = nvs_flash_init();\n\n    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)\n    {\n        ESP_ERROR_CHECK(nvs_flash_erase());\n        ret = nvs_flash_init();\n    }\n\n    led_init();\n    rtc_set_time(2025, 02, 18, 22, 23, 00);\n\n    while (1)\n    {\n        t++;\n\n        if ((t % 10) == 0)\n        {\n            rtc_get_time();\n            sprintf((char *)tbuf, \"Time:%02d:%02d:%02d\", calendar.hour, calendar.min, calendar.sec);\n            printf(\"Time:%02d:%02d:%02d\\r\\n\", calendar.hour, calendar.min, calendar.sec);\n            sprintf((char *)tbuf, \"Date:%04d-%02d-%02d\", calendar.year, calendar.month, calendar.date);\n            printf(\"Date:%02d-%02d-%02d\\r\\n\", calendar.year, calendar.month, calendar.date);\n            sprintf((char *)tbuf, \"Week:%s\", weekdays[calendar.week - 1]);\n        }\n\n        if ((t % 20) == 0)\n        {\n            led_toggle();\n        }\n\n        vTaskDelay(10);\n    }\n}\n</code></pre>"},{"location":"DNESP32S3M/MAIN-CONTROL/RTC/integration/","title":"INTEGRATION","text":""},{"location":"DNESP32S3M/MAIN-CONTROL/RTC/integration/#introduction","title":"Introduction","text":"<p>Note</p> <p>In this section, we introduce how to integrate the esp_rtcer driver into the project.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/RTC/integration/#create-a-new-component","title":"Create a New Component","text":"<p>Warning</p> <p>Before you create a component in the <code>driver</code> directory, make sure you have incorporated the <code>driver</code> directory into the project by adding the path to the <code>driver</code> directory to the <code>EXTRA_COMPONENT_DIRS</code> variable in the project-level <code>CMakeLists.txt</code> file.</p> <p>Open the project in VSCode, open the integrated terminal, and type in</p> <p><pre><code>get_idf \n</code></pre> to actiate the ESP-IDF environment. Then type in the following command to create a new component named esp_rtc`:</p> <pre><code>idf.py -C driver create-component esp_rtc\n</code></pre> <p>The command above means to create a new component named <code>esp_rtc</code> in the <code>driver</code> directory. After executing the command, you will see a new directory named <code>esp_rtc</code> in the <code>driver</code> directory. And the command will automatically generate the <code>CMakeLists.txt</code> file for the new component, as well as the <code>esp_rtc.h</code> and <code>esp_rtc.c</code> files.</p> <p>Alternatively, you can mannually create the <code>esp_rtc</code> directory in the <code>driver</code> directory, and then create the <code>CMakeLists.txt</code>, <code>esp_rtc.h</code>, and <code>esp_rtc.c</code> files in the <code>esp_rtc</code> directory.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/RTC/integration/#replace-the-code","title":"Replace the Code","text":"<p>Component Level</p> <p>Replace the code in this section into the <code>CMakelists.txt</code>, <code>esp_rtc.h</code>, and <code>esp_rtc.c</code> files under the component.</p> <p>Project Level</p> <p>Replace the code in <code>main.c</code> with the corresponding code. No need to change the <code>CMakeLists.txt</code> file at the project level.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/RTC/integration/#compile-and-flash-the-project","title":"Compile and Flash the Project","text":"<p>Open the project in VSCode, open the integrated terminal, and type in</p> <pre><code>idf.py build flash monitor\n</code></pre> <p>Now, you will see printout date and time from the serial monitor.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/RTC/note/","title":"RTC (Real Time Clock)","text":""},{"location":"DNESP32S3M/MAIN-CONTROL/RTC/note/#introduction","title":"Introduction","text":"<p>Note</p> <p>This chapter introduces the use of the ESP32-S3 real-time clock (RTC). The real-time clock can provide an accurate time for the system. Even if the system is reset or the main power is cut off, the RTC can still run (with battery)\uff09. Therefore, the RTC is often used in various low-power scenarios.</p> <p>Real Time Clock</p> <p>RTC (Real Time Clock) refers to a clock installed on an electronic device or an IC (integrated circuit) that implements its functions.</p> <p>When you call it a \"clock\" in digital circuits, you may think of a periodic signal, but in English, \"clock\" also means \"clock\". So why do we need a separate RTC?</p> <p>The reason is that the CPU's timer clock function only runs when it is \"started\" or \"powered on\" and stops when it is powered off. Of course, if the clock cannot continuously track time, you must manually set the time.</p> <p>Usually, the RTC is equipped with a separate power source, such as a button battery (backup battery). Even if the power of the DNESP32S3M minimum system board is turned off, it can still operate and display the time in real-time. Then, when the DNESP32S3M minimum system board is turned on again, the built-in timer clock of the computer reads the current time from the RTC and displays the time based on its own mechanism while being powered. By the way, since the button battery is relatively cheap and has a long service life, the RTC can operate at a very low cost. Based on this function, it can also be used as memory.</p> <p>Note</p> <p>In the ESP32-S3, there is no RTC peripheral like the STM32 chip, but there is a system time. By using the system time, the function of a real-time clock can also be realized. The ESP32-S3 uses two hardware clock sources to establish and maintain system time. Depending on the application purpose and the accuracy requirements of the system time, you can use only one of the clock sources or both clock sources at the same time. These two hardware clock sources are the RTC timer and the high-resolution timer. By default, both timers are used. We will introduce them one by one below.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/RTC/note/#use-cases","title":"Use Cases","text":"<ol> <li>Display the RTC time in real-time through the LCD / UART</li> <li>The LED blinks to indicate that the program is running</li> </ol>"},{"location":"DNESP32S3M/MAIN-CONTROL/RTC/note/#dependencies","title":"Dependencies","text":"<p>There is no dependency for this chapter.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/RTC/note/#key-functions","title":"Key Functions","text":"Function Prototype Explanation Example void rtc_set_time(int year, int mon, int mday, int hour, int min, int sec); Set RTC time rtc_set_time(2022, 12, 31, 23, 59, 59); void rtc_get_time(void); /* Get time */ Get RTC time, store it in the global variable calendar rtc_get_time();"},{"location":"DNESP32S3M/MAIN-CONTROL/SD-CARD/code/","title":"TF CARD CODE","text":""},{"location":"DNESP32S3M/MAIN-CONTROL/SD-CARD/code/#component-architecture","title":"Component Architecture","text":"<pre><code>- driver\n    - spi_sdcard\n        - include\n            - spi_sdcard.h\n        - spi_sdcard.c\n        - CMakeLists.txt\n</code></pre>"},{"location":"DNESP32S3M/MAIN-CONTROL/SD-CARD/code/#driverspi_sdcardcmakeliststxt","title":"driver/spi_sdcard/CMakeLists.txt","text":"<pre><code>set(src_dirs\n    .\n)\n\nset(include_dirs\n    include\n)\n\nset(requires\n    driver\n    fatfs\n    vfs\n    sdmmc\n    spi\n)\n\nidf_component_register(SRC_DIRS ${src_dirs} INCLUDE_DIRS ${include_dirs} REQUIRES ${requires})\n</code></pre>"},{"location":"DNESP32S3M/MAIN-CONTROL/SD-CARD/code/#spi_sdcardc","title":"spi_sdcard.c","text":"<pre><code>/**\n * @file spi_sdcard.c\n * @author SHUAIWEN CUI (SHUAIWEN001@e.ntu.edu.sg)\n * @brief This file is for SD card initialization and related functions\n * @version 1.0\n * @date 2024-11-19\n * @copyright Copyright (c) 2024\n *\n */\n\n/* DEPENDENCIES */\n#include \"spi_sdcard.h\"\n\n/* VARIABLES */\nsdmmc_card_t *card;\n\nspi_device_handle_t MY_SD_Handle;\n\nconst char *TAG_SD = \"SD_CARD\";\nconst char mount_point[] = MOUNT_POINT; // modify the macro above to change the mount point\n\n/* FUNCTIONS */\n\n/**\n * @brief Initialize the SD card\n * ! Here, we assume that the SPI bus has been initialized before calling this function.\n * @param None\n * @retval esp_err_t\n */\nesp_err_t sd_card_init(void)\n{\n    /* Result Indicator */\n    esp_err_t ret;\n\n    // Configure parameters for file system mounting\n    esp_vfs_fat_sdmmc_mount_config_t mount_config = {\n#ifdef CONFIG_FORMAT_IF_MOUNT_FAILED\n        .format_if_mount_failed = true,   // Format the card if mounting fails\n#else\n        .format_if_mount_failed = false,  // Do not format the card if mounting fails\n#endif // FORMAT_IF_MOUNT_FAILED\n        .max_files = 5,                   // Maximum number of files that can be open at the same time\n        .allocation_unit_size = 16 * 1024 // FAT allocation unit size\n    };\n\n    ESP_LOGI(TAG_SD, \"Initializing SD card...\");\n\n    ESP_LOGI(TAG_SD, \"Configuring SPI Device for SD card...\");\n\n    sdmmc_host_t host = SDSPI_HOST_DEFAULT();\n    /*spi_bus_config_t bus_cfg = {\n        .mosi_io_num = PIN_NUM_MOSI,\n        .miso_io_num = PIN_NUM_MISO,\n        .sclk_io_num = PIN_NUM_CLK,\n        .quadwp_io_num = -1,\n        .quadhd_io_num = -1,\n        .max_transfer_sz = 4000,\n    };*/\n\n    host.slot = SPI2_HOST; // Use SPI2 for SD card\n\n    // In SPI mode, since the SD card's maximum frequency is 25 MHz in SPI mode, the configured value must not exceed this limit. \n    // The default frequency for SD-SPI in IDF is 20 MHz.\n\n    // If SPI2 has not been initialized, initialize it\n    /*ret = spi_bus_initialize(host.slot, &amp;bus_cfg, SPI_DMA_CHAN);\n    if (ret != ESP_OK) {\n        ESP_LOGE(TAG, \"Failed to initialize bus.\");\n        return false;\n    }*/\n\n    // This initialization does not include card detection (CD) and write protection (WP) signals.\n    // If your board has these signals, modify slot_config.gpio_cd and slot_config.gpio_wp.\n    sdspi_device_config_t slot_config = SDSPI_DEVICE_CONFIG_DEFAULT();\n    slot_config.gpio_cs = SD_PIN_NUM_CS;\n    slot_config.host_id = host.slot;\n\n    // Use SPI mode to drive the SD card and mount the FATFS file system\n    ret = esp_vfs_fat_sdspi_mount(mount_point, &amp;host, &amp;slot_config, &amp;mount_config, &amp;card);\n\n    if (ret != ESP_OK)\n    {\n        if (ret == ESP_FAIL)\n        {\n            ESP_LOGE(TAG_SD, \"Failed to mount filesystem. \"\n                          \"If you want the card to be formatted, set the EXAMPLE_FORMAT_IF_MOUNT_FAILED menuconfig option.\");\n        }\n        else\n        {\n            ESP_LOGE(TAG_SD, \"Failed to initialize the card (%s). \"\n                          \"Make sure SD card lines have pull-up resistors in place.\",\n                     esp_err_to_name(ret));\n        }\n        return false;\n    }\n\n    // The card has been initialized, print its properties\n    sdmmc_card_print_info(stdout, card);\n\n    // Progress Report\n    ESP_LOGI(TAG_SD, \"Filesystem mounted successfully.\");\n\n    return ret;\n}\n\n\n/**\n * @brief Test file operations on the SD card\n * @param None\n * @retval esp_err_t\n */\nesp_err_t sd_card_test_filesystem(void)\n{\n    char data[SD_MAX_CHAR_SIZE];\n\n    // Create a file\n    char file_path[SD_MAX_CHAR_SIZE];\n    snprintf(file_path, sizeof(file_path), \"%s/test.txt\", mount_point);\n    snprintf(data, sizeof(data), \"Hello Mr Cui!, %s!\\n\", card-&gt;cid.name);\n    FILE *f = fopen(file_path, \"w\");\n    if (!f)\n    {\n        ESP_LOGE(TAG_SD, \"Failed to create file\");\n        return ESP_FAIL;\n    }\n    fprintf(f, \"%s\", data);\n    fclose(f);\n\n    ESP_LOGI(TAG_SD, \"File created: %s\", file_path);\n\n    // Read the file\n    f = fopen(file_path, \"r\");\n    if (!f)\n    {\n        ESP_LOGE(TAG_SD, \"Failed to open file for reading\");\n        return ESP_FAIL;\n    }\n    char line[SD_MAX_CHAR_SIZE];\n    fgets(line, sizeof(line), f);\n    fclose(f);\n\n    ESP_LOGI(TAG_SD, \"File content: %s\", line);\n\n    return ESP_OK;\n}\n\n/**\n * @brief Unmount the File System and SPI Bus\n * @param None\n * @retval esp_err_t\n */\nesp_err_t sd_card_unmount(void)\n{\n    esp_err_t ret;\n\n    ret = esp_vfs_fat_sdcard_unmount(mount_point, card);\n    if (ret != ESP_OK)\n    {\n        ESP_LOGE(TAG_SD, \"Failed to unmount filesystem\");\n        return ret;\n    }\n\n    // Unmount SPI Bus\n    sdmmc_host_t host = SDSPI_HOST_DEFAULT();\n    ret = spi_bus_free(host.slot);\n    if (ret != ESP_OK)\n    {\n        ESP_LOGE(TAG_SD, \"Failed to free SPI bus\");\n        return ret;\n    }\n\n    ESP_LOGI(TAG_SD, \"Filesystem unmounted and SPI bus freed\");\n\n    return ret;\n}\n</code></pre>"},{"location":"DNESP32S3M/MAIN-CONTROL/SD-CARD/code/#mainc","title":"main.c","text":"<pre><code>/**\n * @file main.c\n * @author SHUAIWEN CUI (SHUAIWEN001@e.ntu.edu.sg)\n * @brief \n * @version 1.0\n * @date 2024-11-20\n * \n * @copyright Copyright (c) 2024\n * \n */\n\n/* DEPENDENCIES */\n// ESP\n#include \"esp_system.h\" // ESP32 System\n#include \"nvs_flash.h\"  // ESP32 NVS\n#include \"esp_chip_info.h\" // ESP32 Chip Info\n#include \"esp_psram.h\" // ESP32 PSRAM\n#include \"esp_flash.h\" // ESP32 Flash\n#include \"esp_log.h\" // ESP32 Logging\n\n// BSP\n#include \"led.h\"\n#include \"exit.h\"\n#include \"spi.h\"\n#include \"lcd.h\"\n#include \"tim.h\"\n#include \"esp_rtc.h\"\n#include \"spi_sdcard.h\"\n\n/**\n * @brief Entry point of the program\n * @param None\n * @retval None\n */\nvoid app_main(void)\n{\n    esp_err_t ret;\n    uint32_t flash_size;\n    esp_chip_info_t chip_info;\n\n    // Initialize NVS\n    ret = nvs_flash_init();\n    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)\n    {\n        ESP_ERROR_CHECK(nvs_flash_erase()); // Erase if needed\n        ret = nvs_flash_init();\n    }\n\n    // Get FLASH size\n    esp_flash_get_size(NULL, &amp;flash_size);\n    esp_chip_info(&amp;chip_info);\n\n    // Display CPU core count\n    printf(\"CPU Cores: %d\\n\", chip_info.cores);\n\n    // Display FLASH size\n    printf(\"Flash size: %ld MB flash\\n\", flash_size / (1024 * 1024));\n\n    // Display PSRAM size\n    printf(\"PSRAM size: %d bytes\\n\", esp_psram_get_size());\n\n    // BSP Initialization\n    led_init();\n    exit_init();\n    spi2_init();\n    lcd_init();\n\n    // spiffs_test();                                                  /* Run SPIFFS test */\n    while (sd_card_init())                               /* SD card not detected */\n    {\n        lcd_show_string(0, 0, 200, 16, 16, \"SD Card Error!\", RED);\n        vTaskDelay(500);\n        lcd_show_string(0, 20, 200, 16, 16, \"Please Check!\", RED);\n        vTaskDelay(500);\n    }\n\n    // clean the screen\n    lcd_clear(WHITE);\n\n    lcd_show_string(0, 0, 200, 16, 16, \"SD Initialized!\", RED);\n\n    sd_card_test_filesystem();                                        /* Run SD card test */\n\n    lcd_show_string(0, 0, 200, 16, 16, \"SD Tested CSW! \", RED);\n\n    // sd_card_unmount();\n\n    while (1)\n    {\n        led_toggle();\n        vTaskDelay(1000);\n    }\n}\n</code></pre>"},{"location":"DNESP32S3M/MAIN-CONTROL/SD-CARD/integration/","title":"INTEGRATION","text":""},{"location":"DNESP32S3M/MAIN-CONTROL/SD-CARD/integration/#introduction","title":"Introduction","text":"<p>Note</p> <p>In this section, we introduce how to integrate the spi_sdcarder driver into the project.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/SD-CARD/integration/#create-a-new-component","title":"Create a New Component","text":"<p>Warning</p> <p>Before you create a component in the <code>driver</code> directory, make sure you have incorporated the <code>driver</code> directory into the project by adding the path to the <code>driver</code> directory to the <code>EXTRA_COMPONENT_DIRS</code> variable in the project-level <code>CMakeLists.txt</code> file.</p> <p>Open the project in VSCode, open the integrated terminal, and type in</p> <p><pre><code>get_idf \n</code></pre> to actiate the ESP-IDF environment. Then type in the following command to create a new component named <code>spi_sdcard</code>:</p> <pre><code>idf.py -C driver create-component spi_sdcard\n</code></pre> <p>The command above means to create a new component named <code>spi_sdcard</code> in the <code>driver</code> directory. After executing the command, you will see a new directory named <code>spi_sdcard</code> in the <code>driver</code> directory. And the command will automatically generate the <code>CMakeLists.txt</code> file for the new component, as well as the <code>spi_sdcard.h</code> and <code>spi_sdcard.c</code> files.</p> <p>Alternatively, you can mannually create the <code>spi_sdcard</code> directory in the <code>driver</code> directory, and then create the <code>CMakeLists.txt</code>, <code>spi_sdcard.h</code>, and <code>spi_sdcard.c</code> files in the <code>spi_sdcard</code> directory.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/SD-CARD/integration/#replace-the-code","title":"Replace the Code","text":"<p>Component Level</p> <p>Replace the code in this section into the <code>CMakelists.txt</code>, <code>spi_sdcard.h</code>, and <code>spi_sdcard.c</code> files under the component.</p> <p>Project Level</p> <p>Replace the code in <code>main.c</code> with the corresponding code. No need to change the <code>CMakeLists.txt</code> file at the project level.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/SD-CARD/integration/#compile-and-flash-the-project","title":"Compile and Flash the Project","text":"<p>Open the project in VSCode, open the integrated terminal, and type in</p> <pre><code>idf.py build flash monitor\n</code></pre> <p>Then you will see the feedback from the serial monitor. Alternatively, you can check the SD card to verify.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/SD-CARD/note/","title":"TF CARD (SD CARD) Operation - SPI Mode","text":"<p>Warning</p> <p>For this chapter, I don't recommend you to refer to the code from the Alientek. After testing, I found that the program doesn't seem to work. So I referred to the content on the Internet and rewrote the content of this chapter.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/SD-CARD/note/#introduction","title":"Introduction","text":"<p>SD Card Overview</p> <p>Many microcontroller systems require high-capacity storage devices to store data. Common options include USB drives, FLASH chips, and SD cards. Each has its advantages, but overall, SD cards are the most suitable for microcontroller systems. They offer large capacities (over 32GB), support SPI/SDIO interfaces, and come in various sizes (standard SD card and Micro SD card sizes), meeting the requirements of different applications.</p> <p>With just a few IO pins, you can extend storage capacity to 32GB or more, with a wide range of choices from tens of megabytes to tens of gigabytes. They are easy to replace, simple to program, and are the preferred choice for large-capacity external storage in microcontroller systems.</p> <p>The ZD Atom ESP32-S3 minimal system board uses a Micro SD card interface with a self-locking card slot. The SD SPI host driver is implemented based on the SPI Master Driver. With the SPI host driver, the SD card and other SPI devices can share the same SPI bus. The SPI host driver handles exclusive access from different tasks.</p> <p>Info</p> <p>A complete SD card operation process involves the host (e.g., a microcontroller) initiating a \"command.\" The SD card determines whether to send a response or data based on the command's content. For read/write operations, the host must also send a command to stop reading/writing data to end the operation. This means that after the host sends a command, the SD card may not respond or provide data, depending on the command's meaning.</p> <p>Card Modes</p> <p>SD cards have two effective operation modes: \"Card Identification Mode\" and \"Data Transfer Mode.\" Based on the operation method, there are SD mode and SPI mode. The ZD Atom ESP32-S3 minimal system board uses SPI mode.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/SD-CARD/note/#key-steps","title":"Key Steps","text":"<ol> <li>SD card initialization (SPI mode/SDIO mode)</li> <li>SD card read/write operations</li> </ol> <p>Warning</p> <p>The ESP32's SDIO driver mode and SPI driver mode are not compatible. You can only choose one driver mode.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/SD-CARD/note/#use-case","title":"Use Case","text":"<p>This experiment introduces the following functionality: After a series of initializations, an SD card initialization condition is used within a <code>while</code> loop to check whether the SD card is successfully initialized. If initialization succeeds, SD card parameters will be output to the serial terminal or VSCode terminal, and the total capacity and remaining capacity will be displayed on the LCD. The LED blinks to indicate the program is running.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/SD-CARD/note/#resources-used","title":"Resources Used","text":"<ol> <li>LED</li> <li>LED: IO0</li> <li>0.96-inch LCD</li> <li>SD Card</li> <li>CS: IO2</li> <li>SCK: IO12</li> <li>MOSI: IO11</li> <li>MISO: IO13</li> </ol>"},{"location":"DNESP32S3M/MAIN-CONTROL/SD-CARD/note/#connection-diagram","title":"Connection Diagram","text":"<p>This experiment connects the SD card to the ESP32-S3 using the SPI interface. The DNESP32S3M minimal system board has an onboard Micro SD card slot for connecting the SD card. The schematic for connecting the SD card to the ESP32-S3 is shown below.</p> <p></p>"},{"location":"DNESP32S3M/MAIN-CONTROL/SD-CARD/note/#dependencies","title":"Dependencies","text":""},{"location":"DNESP32S3M/MAIN-CONTROL/SPI/code/","title":"SPI CODE","text":""},{"location":"DNESP32S3M/MAIN-CONTROL/SPI/code/#component-architecture","title":"Component Architecture","text":"<pre><code>- driver\n    - spi\n        - include\n            - spi.h\n        - spi.c\n        - CMakeLists.txt\n</code></pre>"},{"location":"DNESP32S3M/MAIN-CONTROL/SPI/code/#driverspicmakeliststxt","title":"driver/spi/CMakeLists.txt","text":"<pre><code>set(src_dirs\n    .\n)\n\nset(include_dirs\n    include\n)\n\nset(requires\n    driver\n)\n\nidf_component_register(SRC_DIRS ${src_dirs} INCLUDE_DIRS ${include_dirs} REQUIRES ${requires})\n</code></pre> <p>Note</p> <p>Note that in the drivers, we used spi and gpio related functions from the builtin <code>driver</code> library, therefore, we need to indicate these dependencies in the <code>CMakeLists.txt</code> file by adding <code>driver</code> to the <code>REQUIRES</code> field.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/SPI/code/#spih","title":"spi.h","text":"<pre><code>/**\n * @file spi.h\n * @author SHUAIWEN CUI (SHUAIWEN001@e.ntu.edu.sg)\n * @brief\n * @version 1.0\n * @date 2024-11-18\n * @ref Alientek SPI driver\n * @copyright Copyright (c) 2024\n *\n */\n\n#ifndef __SPI_H__\n#define __SPI_H__\n\n/* Dependencies */\n#include &lt;string.h&gt;\n#include \"esp_log.h\"\n#include \"driver/spi_master.h\"\n#include \"driver/gpio.h\"\n\n/* GPIO Definitions */\n#define SPI2_MOSI_GPIO_PIN GPIO_NUM_11 /* SPI2_MOSI */\n#define SPI2_CLK_GPIO_PIN GPIO_NUM_12  /* SPI2_CLK */\n#define SPI2_MISO_GPIO_PIN GPIO_NUM_13 /* SPI2_MISO */\n\n/* Function Prototypes */\n\n/**\n * @brief       Initialize SPI\n * @param       None\n * @retval      None\n */\nvoid spi2_init(void);\n\n/**\n * @brief       Send command via SPI\n * @param       handle : SPI handle\n * @param       cmd    : Command to send\n * @retval      None\n */\nvoid spi2_write_cmd(spi_device_handle_t handle, uint8_t cmd);\n\n/**\n * @brief       Send data via SPI\n * @param       handle : SPI handle\n * @param       data   : Data to send\n * @param       len    : Length of data to send\n * @retval      None\n */\nvoid spi2_write_data(spi_device_handle_t handle, const uint8_t *data, int len);\n\n/**\n * @brief       Process data via SPI\n * @param       handle       : SPI handle\n * @param       data         : Data to send\n * @retval      t.rx_data[0] : Received data\n */\nuint8_t spi2_transfer_byte(spi_device_handle_t handle, uint8_t byte);\n\n#endif\n</code></pre>"},{"location":"DNESP32S3M/MAIN-CONTROL/SPI/code/#spic","title":"spi.c","text":"<pre><code>/**\n * @file spi.c\n * @author \n * @brief \n * @version 1.0\n * @date 2024-11-18\n * @ref Alientek SPI driver\n * \n */\n\n #include \"spi.h\"\n\n /**\n  * @brief       Initialize SPI\n  * @param       None\n  * @retval      None\n  */\n void spi2_init(void)\n {\n     esp_err_t ret = 0;\n     spi_bus_config_t spi_bus_conf = {0};\n\n     /* SPI bus configuration */\n     spi_bus_conf.miso_io_num = SPI2_MISO_GPIO_PIN;                               /* SPI_MISO pin */\n     spi_bus_conf.mosi_io_num = SPI2_MOSI_GPIO_PIN;                               /* SPI_MOSI pin */\n     spi_bus_conf.sclk_io_num = SPI2_CLK_GPIO_PIN;                                /* SPI_SCLK pin */\n     spi_bus_conf.quadwp_io_num = -1;                                            /* SPI write protection signal pin, not enabled */\n     spi_bus_conf.quadhd_io_num = -1;                                            /* SPI hold signal pin, not enabled */\n     spi_bus_conf.max_transfer_sz = 160 * 80 * 2;                                /* Configure maximum transfer size in bytes */\n\n     /* Initialize SPI bus */\n     ret = spi_bus_initialize(SPI2_HOST, &amp;spi_bus_conf, SPI_DMA_CH_AUTO);        /* SPI bus initialization */\n     ESP_ERROR_CHECK(ret);                                                       /* Check parameter values */\n }\n\n /**\n  * @brief       Send command via SPI\n  * @param       handle : SPI handle\n  * @param       cmd    : Command to send\n  * @retval      None\n  */\n void spi2_write_cmd(spi_device_handle_t handle, uint8_t cmd)\n {\n     esp_err_t ret;\n     spi_transaction_t t = {0};\n\n     t.length = 8;                                       /* Number of bits to transmit (1 byte = 8 bits) */\n     t.tx_buffer = &amp;cmd;                                 /* Fill the command */\n     ret = spi_device_polling_transmit(handle, &amp;t);      /* Start transmission */\n     ESP_ERROR_CHECK(ret);                               /* Usually no issues */\n }\n\n /**\n  * @brief       Send data via SPI\n  * @param       handle : SPI handle\n  * @param       data   : Data to send\n  * @param       len    : Length of data to send\n  * @retval      None\n  */\n void spi2_write_data(spi_device_handle_t handle, const uint8_t *data, int len)\n {\n     esp_err_t ret;\n     spi_transaction_t t = {0};\n\n     if (len == 0)\n     {\n         return;                                     /* No data to transmit if length is 0 */\n     }\n\n     t.length = len * 8;                             /* Number of bits to transmit (1 byte = 8 bits) */\n     t.tx_buffer = data;                             /* Fill the data */\n     ret = spi_device_polling_transmit(handle, &amp;t);  /* Start transmission */\n     ESP_ERROR_CHECK(ret);                           /* Usually no issues */\n }\n\n /**\n  * @brief       Process data via SPI\n  * @param       handle       : SPI handle\n  * @param       data         : Data to send\n  * @retval      t.rx_data[0] : Received data\n  */\n uint8_t spi2_transfer_byte(spi_device_handle_t handle, uint8_t data)\n {\n     spi_transaction_t t;\n\n     memset(&amp;t, 0, sizeof(t));\n\n     t.flags = SPI_TRANS_USE_TXDATA | SPI_TRANS_USE_RXDATA;\n     t.length = 8;\n     t.tx_data[0] = data;\n     spi_device_transmit(handle, &amp;t);\n\n     return t.rx_data[0];\n }\n</code></pre>"},{"location":"DNESP32S3M/MAIN-CONTROL/SPI/code/#mainc","title":"main.c","text":"<pre><code>refer to LCD code\n</code></pre> <p>Note</p> <p>Above are the codes to setup SPI2 on ESP32-S3. If other SPI peripherals are used, the corresponding pins and SPI host should be configured accordingly. For example, we will use SPI3 for the SD card in the future, and the pins and SPI host should be configured accordingly.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/SPI/integration/","title":"INTEGRATION","text":""},{"location":"DNESP32S3M/MAIN-CONTROL/SPI/integration/#introduction","title":"Introduction","text":"<p>Note</p> <p>In this section, we introduce how to integrate the spier driver into the project.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/SPI/integration/#create-a-new-component","title":"Create a New Component","text":"<p>Warning</p> <p>Before you create a component in the <code>driver</code> directory, make sure you have incorporated the <code>driver</code> directory into the project by adding the path to the <code>driver</code> directory to the <code>EXTRA_COMPONENT_DIRS</code> variable in the project-level <code>CMakeLists.txt</code> file.</p> <p>Open the project in VSCode, open the integrated terminal, and type in</p> <p><pre><code>get_idf \n</code></pre> to actiate the ESP-IDF environment. Then type in the following command to create a new component named spi`:</p> <pre><code>idf.py -C driver create-component spi\n</code></pre> <p>The command above means to create a new component named <code>spi</code> in the <code>driver</code> directory. After executing the command, you will see a new directory named <code>spi</code> in the <code>driver</code> directory. And the command will automatically generate the <code>CMakeLists.txt</code> file for the new component, as well as the <code>spi.h</code> and <code>spi.c</code> files.</p> <p>Alternatively, you can mannually create the <code>spi</code> directory in the <code>driver</code> directory, and then create the <code>CMakeLists.txt</code>, <code>spi.h</code>, and <code>spi.c</code> files in the <code>spi</code> directory.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/SPI/integration/#replace-the-code","title":"Replace the Code","text":"<p>Component Level</p> <p>Replace the code in this section into the <code>CMakelists.txt</code>, <code>spi.h</code>, and <code>spi.c</code> files under the component.</p> <p>Project Level</p> <p>Replace the code in <code>main.c</code> with the corresponding code. No need to change the <code>CMakeLists.txt</code> file at the project level.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/SPI/integration/#compile-and-flash-the-project","title":"Compile and Flash the Project","text":"<p>Open the project in VSCode, open the integrated terminal, and type in</p> <pre><code>idf.py build flash monitor\n</code></pre> <p>Note</p> <p>Note that this chapter needs to be used in conjunction with other components that use the SPI to see the effect.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/SPI/note/","title":"SPI","text":""},{"location":"DNESP32S3M/MAIN-CONTROL/SPI/note/#spi-introduction","title":"SPI INTRODUCTION","text":"<p>Serial Peripheral Interface</p> <p>SPI (Serial Peripheral Interface) is, as the name suggests, a serial communication interface for peripheral devices. It was originally defined by Motorola for its MC68HCXX series processors. SPI is a high-speed, full-duplex, synchronous serial communication bus and has been widely used in communication between many MCUs, storage chips, AD converters, and LCDs. Similar to I2C communication, SPI allows one master device and one or more slave devices on the communication bus. To communicate with a slave device, the master device requires at least four data lines:</p> <ul> <li> <p>MOSI (Master Out / Slave In): Master data output, slave data input, used for the master to send data to the slave.</p> </li> <li> <p>MISO (Master In / Slave Out): Master data input, slave data output, used for the slave to send data to the master.</p> </li> <li> <p>SCLK (Serial Clock): Clock signal generated by the master device to determine the communication rate.</p> </li> <li> <p>CS (Chip Select): Slave device chip select signal generated by the master device; the slave device is selected when the signal is low.</p> </li> </ul> <p>Multiple slave SPI communication networks are connected as shown in the diagram below:</p> <p></p> <p>From the diagram, it can be observed that the MOSI, MISO, and SCLK pins are connected to every device on the SPI bus. If the CS pin is set to low, the slave device listens to and communicates with the master. The SPI master can communicate with only one slave at a time. To communicate with another slave device, the master must terminate the current communication before starting a new one.</p> <p>SPI communication operates in four different modes. Some slave devices may be pre-configured at the factory to operate in a specific mode, which cannot be changed. Both the master and slave must operate in the same mode for successful communication. The SPI mode is determined by configuring CPOL (Clock Polarity) and CPHA (Clock Phase).</p> <ul> <li>CPOL (Clock Polarity): Refers to the idle state of the clock signal when no data is being transmitted. If the idle state is high, CPOL = 1; if the idle state is low, CPOL = 0.</li> <li>CPHA (Clock Phase): Refers to the clock edge at which data is sampled. CPHA = 0 means data is sampled on the first edge (odd edge), determined by CPOL (either rising or falling edge). CPHA = 1 means data is sampled on the second edge (even edge).</li> </ul> <p></p> <p>1) Mode 0 (CPOL=0, CPHA=0):    In idle state, SCLK is low. Data is sampled on the first edge, which is the rising edge (SCLK transitions from low to high). Data is transmitted on the falling edge.</p> <p>2) Mode 1 (CPOL=0, CPHA=1):    In idle state, SCLK is low. Data is sampled on the second edge, which is the falling edge (SCLK transitions from high to low). Data is transmitted on the rising edge.</p> <p>3) Mode 2 (CPOL=1, CPHA=0):    In idle state, SCLK is high. Data is sampled on the first edge, which is the falling edge (SCLK transitions from high to low). Data is transmitted on the rising edge.</p> <p>4) Mode 3 (CPOL=1, CPHA=1):    In idle state, SCLK is high. Data is sampled on the second edge, which is the rising edge (SCLK transitions from low to high). Data is transmitted on the falling edge.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/SPI/note/#esp32-s3-spi-controller","title":"ESP32-S3 SPI Controller","text":"<p>The ESP32-S3 chip integrates four SPI controllers: SPI0, SPI1, SPI2, and SPI3. Among these, SPI0 and SPI1 are primarily used internally to access external FLASH and PSRAM, leaving SPI2 and SPI3 available for general use. SPI2 is also known as HSPI, and SPI3 is referred to as VSPI. Both are classified as GP-SPI (General Purpose SPI).</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/SPI/note/#gp-spi-features","title":"GP-SPI Features:","text":"<ul> <li>Supports both master and slave modes.</li> <li>Supports half-duplex and full-duplex communication.</li> <li>Supports multiple data modes:</li> <li>SPI2: 1-bit SPI mode, 2-bit Dual SPI mode, 4-bit Quad SPI mode, QPI mode, 8-bit Octal mode, and OPI mode.</li> <li>SPI3: 1-bit SPI mode, 2-bit Dual SPI mode, 4-bit Quad SPI mode, and QPI mode.</li> <li>Configurable clock frequency:</li> <li>In master mode: Up to 80 MHz.</li> <li>In slave mode: Up to 60 MHz.</li> <li>Configurable read/write order for data bits.</li> <li>Configurable clock polarity (CPOL) and phase (CPHA).</li> <li>Supports four SPI clock modes (Mode 0 to Mode 3).</li> <li>Provides multiple CS (Chip Select) lines in master mode:</li> <li>SPI2: CS0 ~ CS5.</li> <li>SPI3: CS0 ~ CS2.</li> <li>Supports interfacing with SPI-connected devices such as sensors, display controllers, flash, or RAM chips.</li> </ul> <p>The SPI2 and SPI3 interface signal lines can be mapped to chip pins through the GPIO matrix and IO_MUX, offering great flexibility in pin assignment.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/SPI/note/#test-case","title":"Test Case","text":"<p>This section demonstrates using SPI to control an LCD display. Please refer to the LCD chapter for detailed guidance. The test case is as follows:</p> <p>\"After pressing reset, the SPI LCD module will continuously display some information and switch background colors. The blinking LED indicates that the program is running.\"</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/SPI/note/#circuit-diagram","title":"Circuit Diagram","text":""},{"location":"DNESP32S3M/MAIN-CONTROL/SPI/note/#dependencies","title":"Dependencies","text":"<p>ESP-IDF provides a set of APIs to use SPI. To enable this functionality, the necessary header files must be included:</p> <pre><code>#include \"driver/spi_master.h\"\n</code></pre>"},{"location":"DNESP32S3M/MAIN-CONTROL/SPI/note/#key-function-analysis","title":"Key Function Analysis","text":""},{"location":"DNESP32S3M/MAIN-CONTROL/SPI/note/#initialization-and-configuration","title":"Initialization and Configuration","text":"<p>This function initializes the SPI bus and configures its GPIO pins, clock parameters, and master mode settings. The function prototype is as follows:</p> <pre><code>esp_err_t spi_bus_initialize(spi_host_device_t host_id,\n                    const spi_bus_config_t *bus_config,\n                                spi_dma_chan_t dma_chan);\n</code></pre> <p>The parameters of this function are described in the table below:</p> Parameter Description host_id Specifies the host device ID of the SPI bus bus_config Pointer to a <code>spi_bus_config_t</code> structure used to configure the SPI bus pins (SCLK, MISO, MOSI) and other parameters dma_chan Specifies which DMA channel to use. Valid values are: <code>SPI_DMA_CH_AUTO</code>, <code>SPI_DMA_DISABLED</code>, or a number between 1 and 2 <p>Return Value: <code>ESP_OK</code> indicates successful configuration. Other values indicate configuration failure.</p> <p>This function uses a <code>spi_bus_config_t</code> structure as an input parameter. Below is the definition of the <code>spi_bus_config_t</code> structure relevant to our use case:</p> <p><pre><code>typedef struct {\n    int miso_io_num;     /* MISO pin number */\n    int mosi_io_num;     /* MOSI pin number */\n    int sclk_io_num;     /* Clock pin number */\n    int quadwp_io_num;   /* WP pin number for Quad mode, set to -1 if unused */\n    int quadhd_io_num;   /* HD pin number for Quad mode, set to -1 if unused */\n    int max_transfer_sz; /* Maximum transfer size */\n    \u2026                    /* Other specific configuration parameters */\n} spi_bus_config_t;\n</code></pre> After completing the configuration of the above structure parameters, the structure can be passed to the <code>spi_bus_initialize</code> function to instantiate the SPI bus.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/SPI/note/#device-configuration","title":"Device Configuration","text":"<p>This function is used to allocate a device on the SPI bus. The function prototype is as follows:</p> <p><pre><code>esp_err_t spi_bus_add_device(spi_host_device_t host_id,\n       const spi_device_interface_config_t *dev_config,\n                           spi_device_handle_t *handle);\n</code></pre> | Parameter | Description | |-----------|-------------| | host_id | Specifies the host device ID of the SPI bus. | | dev_config | A pointer to an <code>spi_device_interface_config_t</code> structure, used to configure the communication parameters of the SPI device, such as clock rate and SPI mode. | | handle | Returns the created device handle. |</p> <p>Return Value: - ESP_OK: Configuration was successful. - Other values indicate a configuration failure.</p> <p>This function uses <code>spi_host_device_t</code> and <code>spi_device_interface_config_t</code> structured variables to pass configuration parameters to the SPI peripheral device. The definition of the structure is shown as follows:</p> <pre><code>/**\n * @brief Enumeration of three SPI peripheral devices accessible via software\n */\ntypedef enum {\n    /* SPI1 can only be used as GPSPI on ESP32 */\n    SPI1_HOST = 0, /* SPI1 */\n    SPI2_HOST = 1, /* SPI2 */\n#if SOC_SPI_PERIPH_NUM &gt; 2\n    SPI3_HOST = 2, /* SPI3 */\n#endif\n    SPI_HOST_MAX, /* Invalid host value */\n} spi_host_device_t;\n\ntypedef struct {\n    uint32_t command_bits; /* Number of bits in the command phase */\n    uint32_t address_bits; /* Number of bits in the address phase */\n    uint32_t dummy_bits;   /* Number of bits in the dummy phase */\n    int clock_speed_hz;    /* Clock speed in Hz */\n    uint32_t mode;         /* SPI mode (0-3) */\n    int spics_io_num;      /* CS pin number */\n    ...                    /* Other device-specific configuration parameters */\n} spi_device_interface_config_t;\n</code></pre>"},{"location":"DNESP32S3M/MAIN-CONTROL/SPI/note/#data-transmission","title":"Data Transmission","text":"<p>Based on their functionality, the following functions can be categorized together. Below is a table introducing each function's purpose and parameters.</p> Function Description spi_device_transmit() This function sends an SPI transaction, waits for it to complete, and returns the result.  handle: The handle of the device.  trans_desc: A pointer to an <code>spi_transaction_t</code> structure, describing the details of the transaction to be sent. spi_device_polling_transmit() This function sends a polling transaction, waits for it to complete, and returns the result.  handle: The handle of the device.  trans_desc: A pointer to an <code>spi_transaction_t</code> structure, describing the details of the transaction to be sent."},{"location":"DNESP32S3M/MAIN-CONTROL/SPI/note/#dependencies_1","title":"Dependencies","text":""},{"location":"DNESP32S3M/MAIN-CONTROL/TF-CARD/code/","title":"TF CARD CODE","text":""},{"location":"DNESP32S3M/MAIN-CONTROL/TF-CARD/code/#component-architecture","title":"Component Architecture","text":"<pre><code>- driver\n    - spi_sdcard\n        - include\n            - spi_sdcard.h\n        - spi_sdcard.c\n        - CMakeLists.txt\n</code></pre>"},{"location":"DNESP32S3M/MAIN-CONTROL/TF-CARD/code/#driverrngcmakeliststxt","title":"driver/rng/CMakeLists.txt","text":"<pre><code>set(src_dirs\n    .\n)\n\nset(include_dirs\n    include\n)\n\nset(requires\n    driver\n    fatfs\n    vfs\n    spi\n)\n\nidf_component_register(SRC_DIRS ${src_dirs} INCLUDE_DIRS ${include_dirs} REQUIRES ${requires})\n</code></pre>"},{"location":"DNESP32S3M/MAIN-CONTROL/TF-CARD/code/#spi_sdcardh","title":"spi_sdcard.h","text":"<pre><code>/**\n * @file spi_sdcard.h\n * @author SHUAIWEN CUI (SHUAIWEN001@e.ntu.edu.sg)\n * @brief This file is for SD card initialization and related functions\n * @version 1.0\n * @date 2024-11-19\n * @ref Alientek SD card driver.\n * @copyright Copyright (c) 2024\n * \n */\n\n #ifndef __SPI_SDCARD_H__\n #define __SPI_SDCARD_H__\n\n #include &lt;unistd.h&gt;\n #include \"esp_vfs_fat.h\"\n #include \"driver/sdspi_host.h\"\n #include \"driver/spi_common.h\"\n #include \"sdmmc_cmd.h\"\n #include \"driver/sdmmc_host.h\"\n #include \"spi.h\"\n\n\n /* Pin definitions */\n #define SD_NUM_CS       GPIO_NUM_2\n #define MOUNT_POINT     \"/0:\"\n\n /* Function declarations */\n esp_err_t sd_spi_init(void);                                                /* Initialize SD card */\n void sd_get_fatfs_usage(size_t *out_total_bytes, size_t *out_free_bytes);   /* Get SD card usage information */\n\n #endif\n</code></pre>"},{"location":"DNESP32S3M/MAIN-CONTROL/TF-CARD/code/#spi_sdcardc","title":"spi_sdcard.c","text":"<pre><code>/**\n * @file spi_sdcard.c\n * @author SHUAIWEN CUI\n * @brief This file is for SD card initialization and related functions\n * @version 1.0\n * @date 2024-11-19\n * @ref Alientek SD card driver.\n */\n\n #include \"spi_sdcard.h\"\n\n spi_device_handle_t MY_SD_Handle = NULL;                            /* SD card handle */\n sdmmc_card_t *card;                                                 /* SD/MMC card structure */\n const char mount_point[] = MOUNT_POINT;                             /* Mount point/root directory */\n esp_err_t ret = ESP_OK;\n esp_err_t mount_ret = ESP_OK;\n\n /**\n  * @brief       Initialize SD card\n  * @param       None\n  * @retval      esp_err_t\n  */\n esp_err_t sd_spi_init(void)\n {\n     if (MY_SD_Handle != NULL)                                       /* Re-mount or reinitialize SD card */\n     {\n         spi_bus_remove_device(MY_SD_Handle);                        /* Remove SD card device from SPI bus */\n\n         if (mount_ret == ESP_OK)\n         {\n             esp_vfs_fat_sdcard_unmount(mount_point, card);          /* Unmount file system */\n         }\n     }\n\n     /* SPI driver interface configuration. SPI SD card clock is 20-25MHz */\n     spi_device_interface_config_t devcfg = {\n         .clock_speed_hz = 20 * 1000 * 1000,                         /* SPI clock speed */\n         .mode = 0,                                                  /* SPI mode 0 */\n         .spics_io_num = SD_NUM_CS,                                  /* Chip select pin */\n         .queue_size = 7,                                            /* Queue size: 7 transactions */\n     };\n\n     /* Add SPI bus device */\n     ret = spi_bus_add_device(SPI2_HOST, &amp;devcfg, &amp;MY_SD_Handle);\n\n     /* File system mount configuration */\n     esp_vfs_fat_sdmmc_mount_config_t mount_config = {\n         .format_if_mount_failed = false,                            /* If mounting fails: true to reformat, false otherwise */\n         .max_files = 5,                                             /* Maximum number of open files */\n         .allocation_unit_size = 4 * 1024 * sizeof(uint8_t)          /* Allocation unit size of disk clusters */\n     };\n\n     /* SD card host configuration */\n     sdmmc_host_t host = SDSPI_HOST_DEFAULT();\n\n     /* SD card pin configuration */\n     sdspi_device_config_t slot_config = {0};\n     slot_config.host_id   = host.slot;\n     slot_config.gpio_cs   = SD_NUM_CS;\n     slot_config.gpio_cd   = GPIO_NUM_NC;\n     slot_config.gpio_wp   = GPIO_NUM_NC;\n     slot_config.gpio_int  = GPIO_NUM_NC;\n\n     mount_ret = esp_vfs_fat_sdspi_mount(mount_point, &amp;host, &amp;slot_config, &amp;mount_config, &amp;card);      /* Mount file system */\n     ret |= mount_ret;\n\n     return ret;\n }\n\n /**\n  * @brief       Get SD card usage information\n  * @param       out_total_bytes: Total size\n  * @param       out_free_bytes: Free size\n  * @retval      None\n  */\n void sd_get_fatfs_usage(size_t *out_total_bytes, size_t *out_free_bytes)\n {\n     FATFS *fs;\n     size_t free_clusters;\n     int res = f_getfree(\"0:\", (DWORD *)&amp;free_clusters, &amp;fs);\n     assert(res == FR_OK);\n     size_t total_sectors = (fs-&gt;n_fatent - 2) * fs-&gt;csize;\n     size_t free_sectors = free_clusters * fs-&gt;csize;\n\n     size_t sd_total = total_sectors / 1024;\n     size_t sd_total_KB = sd_total * fs-&gt;ssize;\n     size_t sd_free = free_sectors / 1024;\n     size_t sd_free_KB = sd_free * fs-&gt;ssize;\n\n     /* Assuming total size is less than 4GiB, which should be true for SPI flash */\n     if (out_total_bytes != NULL)\n     {\n         *out_total_bytes = sd_total_KB;\n     }\n\n     if (out_free_bytes != NULL)\n     {\n         *out_free_bytes = sd_free_KB;\n     }\n }\n</code></pre>"},{"location":"DNESP32S3M/MAIN-CONTROL/TF-CARD/code/#spi_sdcardc_1","title":"spi_sdcard.c","text":"<pre><code>/**\n * @file main.c\n * @author\n * @brief Main application to demonstrate the use of ESP32 internal temperature sensor\n * @version 1.0\n * @date 2024-11-17\n *\n * @copyright Copyright (c) 2024\n *\n */\n\n/* Dependencies */\n// Basic\n#include \"esp_system.h\"\n#include \"esp_chip_info.h\"\n#include \"esp_psram.h\"\n#include \"esp_flash.h\"\n#include \"nvs_flash.h\"\n#include \"esp_log.h\"\n\n// RTOS\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n\n// BSP\n#include \"led.h\"\n#include \"lcd.h\"\n#include \"spi.h\"\n#include \"spi_sdcard.h\"\n\nvoid app_main(void)\n{\n    esp_err_t ret;\n    size_t bytes_total, bytes_free;                     /* Total and free space of the SD card */\n\n    ret = nvs_flash_init();                             /* Initialize NVS */\n\n    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)\n    {\n        ESP_ERROR_CHECK(nvs_flash_erase());\n        ret = nvs_flash_init();\n    }\n\n    led_init();                                         /* Initialize LED */\n    spi2_init();                                        /* Initialize SPI */\n    lcd_init();                                         /* Initialize LCD */\n\n    while (sd_spi_init())                               /* SD card not detected */\n    {\n        lcd_show_string(0, 0, 200, 16, 16, \"SD Card Error!\", RED);\n        vTaskDelay(500);\n        lcd_show_string(0, 20, 200, 16, 16, \"Please Check!\", RED);\n        vTaskDelay(500);\n    }\n\n    lcd_show_string(0, 0, 200, 16, 16, \"SD Card OK!\", RED);\n    lcd_show_string(0, 20, 200, 16, 16, \"Total:       MB\", RED);\n    lcd_show_string(0, 40, 200, 16, 16, \"Free :       MB\", RED);\n    sd_get_fatfs_usage(&amp;bytes_total, &amp;bytes_free);\n\n    lcd_show_num(60, 20, (int)bytes_total / 1024, 5, 16, BLUE);\n    lcd_show_num(60, 40, (int)bytes_free / 1024, 5, 16, BLUE);\n\n    while (1)\n    {\n        led_toggle();\n        vTaskDelay(500);\n    }\n}\n</code></pre>"},{"location":"DNESP32S3M/MAIN-CONTROL/TF-CARD/integration/","title":"INTEGRATION","text":""},{"location":"DNESP32S3M/MAIN-CONTROL/TF-CARD/integration/#introduction","title":"Introduction","text":"<p>Note</p> <p>In this section, we introduce how to integrate the spi_sdcarder driver into the project.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/TF-CARD/integration/#create-a-new-component","title":"Create a New Component","text":"<p>Warning</p> <p>Before you create a component in the <code>driver</code> directory, make sure you have incorporated the <code>driver</code> directory into the project by adding the path to the <code>driver</code> directory to the <code>EXTRA_COMPONENT_DIRS</code> variable in the project-level <code>CMakeLists.txt</code> file.</p> <p>Open the project in VSCode, open the integrated terminal, and type in</p> <p><pre><code>get_idf \n</code></pre> to actiate the ESP-IDF environment. Then type in the following command to create a new component named <code>spi_sdcard</code>:</p> <pre><code>idf.py -C driver create-component spi_sdcard\n</code></pre> <p>The command above means to create a new component named <code>spi_sdcard</code> in the <code>driver</code> directory. After executing the command, you will see a new directory named <code>spi_sdcard</code> in the <code>driver</code> directory. And the command will automatically generate the <code>CMakeLists.txt</code> file for the new component, as well as the <code>spi_sdcard.h</code> and <code>spi_sdcard.c</code> files.</p> <p>Alternatively, you can mannually create the <code>spi_sdcard</code> directory in the <code>driver</code> directory, and then create the <code>CMakeLists.txt</code>, <code>spi_sdcard.h</code>, and <code>spi_sdcard.c</code> files in the <code>spi_sdcard</code> directory.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/TF-CARD/integration/#replace-the-code","title":"Replace the Code","text":"<p>Component Level</p> <p>Replace the code in this section into the <code>CMakelists.txt</code>, <code>spi_sdcard.h</code>, and <code>spi_sdcard.c</code> files under the component.</p> <p>Project Level</p> <p>Replace the code in <code>main.c</code> with the corresponding code. No need to change the <code>CMakeLists.txt</code> file at the project level.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/TF-CARD/integration/#compile-and-flash-the-project","title":"Compile and Flash the Project","text":"<p>Open the project in VSCode, open the integrated terminal, and type in</p> <pre><code>idf.py build flash monitor\n</code></pre> <p>Then you will see the information of SD card showing on the LCD screen.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/TF-CARD/note/","title":"TF CARD (SD CARD) Operation - SPI Mode","text":""},{"location":"DNESP32S3M/MAIN-CONTROL/TF-CARD/note/#introduction","title":"Introduction","text":"<p>SD Card Overview</p> <p>Many microcontroller systems require high-capacity storage devices to store data. Common options include USB drives, FLASH chips, and SD cards. Each has its advantages, but overall, SD cards are the most suitable for microcontroller systems. They offer large capacities (over 32GB), support SPI/SDIO interfaces, and come in various sizes (standard SD card and Micro SD card sizes), meeting the requirements of different applications.</p> <p>With just a few IO pins, you can extend storage capacity to 32GB or more, with a wide range of choices from tens of megabytes to tens of gigabytes. They are easy to replace, simple to program, and are the preferred choice for large-capacity external storage in microcontroller systems.</p> <p>The ZD Atom ESP32-S3 minimal system board uses a Micro SD card interface with a self-locking card slot. The SD SPI host driver is implemented based on the SPI Master Driver. With the SPI host driver, the SD card and other SPI devices can share the same SPI bus. The SPI host driver handles exclusive access from different tasks.</p> <p>Info</p> <p>A complete SD card operation process involves the host (e.g., a microcontroller) initiating a \"command.\" The SD card determines whether to send a response or data based on the command's content. For read/write operations, the host must also send a command to stop reading/writing data to end the operation. This means that after the host sends a command, the SD card may not respond or provide data, depending on the command's meaning.</p> <p>Card Modes</p> <p>SD cards have two effective operation modes: \"Card Identification Mode\" and \"Data Transfer Mode.\" Based on the operation method, there are SD mode and SPI mode. The ZD Atom ESP32-S3 minimal system board uses SPI mode.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/TF-CARD/note/#key-steps","title":"Key Steps","text":"<ol> <li>SD card initialization (SPI mode/SDIO mode)</li> <li>SD card read/write operations</li> </ol> <p>Warning</p> <p>The ESP32's SDIO driver mode and SPI driver mode are not compatible. You can only choose one driver mode.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/TF-CARD/note/#use-case","title":"Use Case","text":"<p>This experiment introduces the following functionality: After a series of initializations, an SD card initialization condition is used within a <code>while</code> loop to check whether the SD card is successfully initialized. If initialization succeeds, SD card parameters will be output to the serial terminal or VSCode terminal, and the total capacity and remaining capacity will be displayed on the LCD. The LED blinks to indicate the program is running.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/TF-CARD/note/#resources-used","title":"Resources Used","text":"<ol> <li>LED</li> <li>LED: IO0</li> <li>0.96-inch LCD</li> <li>SD Card</li> <li>CS: IO2</li> <li>SCK: IO12</li> <li>MOSI: IO11</li> <li>MISO: IO13</li> </ol>"},{"location":"DNESP32S3M/MAIN-CONTROL/TF-CARD/note/#connection-diagram","title":"Connection Diagram","text":"<p>This experiment connects the SD card to the ESP32-S3 using the SPI interface. The DNESP32S3M minimal system board has an onboard Micro SD card slot for connecting the SD card. The schematic for connecting the SD card to the ESP32-S3 is shown below.</p> <p></p>"},{"location":"DNESP32S3M/MAIN-CONTROL/TF-CARD/note/#esp-idf-api","title":"ESP-IDF API","text":"<p>To use SD card-related functionality, you must first import the required files.</p> <pre><code>#include \"driver/sdspi_host.h\"\n#include \"driver/spi_common.h\"\n#include \"sdmmc_cmd.h\"\n#include \"driver/sdmmc_host.h\"\n#include \"spi.h\"\n</code></pre>"},{"location":"DNESP32S3M/MAIN-CONTROL/TF-CARD/note/#key-functions","title":"Key Functions","text":""},{"location":"DNESP32S3M/MAIN-CONTROL/TF-CARD/note/#mount-sd-card","title":"Mount SD Card","text":"<pre><code>esp_err_t esp_vfs_fat_sdspi_mount(const char* base_path,\n                                  const sdmmc_host_t* host_config_input,\n                                  const sdspi_device_config_t* slot_config,\n                                  const esp_vfs_fat_mount_config_t*mount_config,\n                                  sdmmc_card_t** out_card);\n</code></pre> Parameter Description <code>base_path</code> Mount point, the path where the partition should be registered (e.g., \"/sdcard\"). <code>host_config_input</code> SDMMC host configuration, a pointer to a structure describing the SDMMC host. This structure can be initialized using the <code>SDSPI_HOST_DEFAULT</code> macro. <code>slot_config</code> SD card configuration, a pointer to a structure with slot configuration. For SPI peripherals, pass a pointer to an <code>sdspi_device_config_t</code> structure initialized using <code>sdspi_device_config_DEFAULT</code>. <code>mount_config</code> Mount configuration, a pointer to an <code>esp_vfs_fat_mount_config_t</code> structure to configure the FAT file system mount options. <code>out_card</code> If not <code>NULL</code>, a pointer to the card information structure will be returned through this parameter. Return Value Description <code>ESP_OK</code> Operation succeeded. <code>ESP_ERR_INVALID_STATE</code> Invalid state, if <code>esp_vfs_fat_sdmmc_mount</code> has already been called. <code>ESP_ERR_NO_MEM</code> Memory allocation failure. <code>ESP_FAIL</code> If the partition cannot be mounted, other error codes from the SDMMC or SPI driver, SDMMC protocol, or FATFS driver."},{"location":"DNESP32S3M/MAIN-CONTROL/TF-CARD/note/#unmount-sd-card","title":"Unmount SD Card","text":"<pre><code>esp_err_t esp_vfs_fat_sdspi_unmount(const char* base_path, sdmmc_card_t* card);\n</code></pre>"},{"location":"DNESP32S3M/MAIN-CONTROL/TF-CARD/note/#parameter-description","title":"Parameter Description","text":"Parameter Description <code>base_path</code> Mount point, the path where the partition should be registered (e.g., \"/sdcard\"). <code>card</code> SD/MMC card structure."},{"location":"DNESP32S3M/MAIN-CONTROL/TF-CARD/note/#return-value-description","title":"Return Value Description","text":"Return Value Description <code>ESP_OK</code> Operation succeeded. <code>ESP_ERR_INVALID_ARG</code> If the <code>card</code> parameter is not registered. <code>ESP_ERR_INVALID_STATE</code> If <code>esp_vfs_fat_sdmmc_mount</code> has not been called yet."},{"location":"DNESP32S3M/MAIN-CONTROL/TF-CARD/note/#dependencies","title":"Dependencies","text":""},{"location":"DNESP32S3M/MAIN-CONTROL/TIMER/code/","title":"TIMER CODE","text":""},{"location":"DNESP32S3M/MAIN-CONTROL/TIMER/code/#component-architecture","title":"Component Architecture","text":"<pre><code>- driver\n    - tim\n        - include\n            - tim.h\n        - tim.c\n        - CMakeLists.txt\n</code></pre>"},{"location":"DNESP32S3M/MAIN-CONTROL/TIMER/code/#drivertimercmakeliststxt","title":"driver/timer/CMakeLists.txt","text":"<pre><code>set(src_dirs\n    .\n)\n\nset(include_dirs\n    include\n)\n\nset(requires\n    driver\n    esp_timer\n    led\n)\n\nidf_component_register(SRC_DIRS ${src_dirs} INCLUDE_DIRS ${include_dirs} REQUIRES ${requires})\n</code></pre> <p>Note</p> <p>Note that in the drivers, we used gpio from the ESP-IDF builtin <code>driver</code> library, therefore, we need to indicate this dependency in the <code>REQUIRES</code> field of the <code>CMakeLists.txt</code> file. Also, we use the LED to show the effect of the external interrupt, so we need to add <code>led</code> in the <code>REQUIRES</code> field. Apart from that, for timer, we need to add <code>esp_timer</code> in the <code>REQUIRES</code> field.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/TIMER/code/#timh","title":"tim.h","text":"<pre><code>/**\n * @file tim.h\n * @author SHUAIWEN CUI (SHUAIWEN001@e.ntu.edu.sg)\n * @brief This file contains the function prototypes for the TIM component.\n * @version 1.0\n * @date 2024-11-18\n *\n * @copyright Copyright (c) 2024\n *\n */\n\n#ifndef __TIM_H__\n#define __TIM_H__\n\n/* Dependencies */\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"driver/gpio.h\"\n#include \"esp_tim.h\"\n#include \"led.h\"\n\n/* Function Prototypes */\n\n/**\n * @brief       Initialize a high-precision timer (ESP_TIMER)\n * @param       tps: Timer period in microseconds (\u03bcs). For example, to execute the timer interrupt once every second,\n *                   set tps = 1s = 1000000\u03bcs.\n * @retval      None\n */\nvoid esptim_int_init(uint64_t tps);\n\n/**\n * @brief       Timer callback function\n * @param       arg: No arguments passed\n * @retval      None\n */\nvoid esptim_callback(void *arg);\n\n#endif /*__TIM_H__*/\n</code></pre>"},{"location":"DNESP32S3M/MAIN-CONTROL/TIMER/code/#timc","title":"tim.c","text":"<pre><code>/**\n * @file tim.c\n * @author SHUAIWEN CUI (SHUAIWEN001@e.ntu.edu.sg)\n * @brief This file contains the implementation of the TIM component.\n * @version 1.0\n * @date 2024-11-18\n *\n * @copyright Copyright (c) 2024\n *\n */\n\n#include \"tim.h\"\n\n/**\n * @brief       Initialize a high-precision timer (ESP_TIMER)\n * @param       tps: Timer period in microseconds (\u03bcs). For example, to execute the timer interrupt once every second,\n *                   set tps = 1s = 1000000\u03bcs.\n * @retval      None\n */\nvoid esptim_int_init(uint64_t tps)\n{\n    esp_timer_handle_t esp_tim_handle; /* Timer callback function handle */\n\n    /* Define a timer configuration structure */\n    esp_timer_create_args_t tim_periodic_arg = {\n        .callback = &amp;esptim_callback, /* Set the callback function */\n        .arg = NULL,                  /* No arguments passed */\n    };\n\n    esp_timer_create(&amp;tim_periodic_arg, &amp;esp_tim_handle); /* Create a timer event */\n    esp_timer_start_periodic(esp_tim_handle, tps);        /* Trigger periodically based on the timer period */\n}\n\n/**\n * @brief       Timer callback function\n * @param       arg: No arguments passed\n * @retval      None\n */\nvoid esptim_callback(void *arg)\n{\n    led_toggle();\n}\n</code></pre>"},{"location":"DNESP32S3M/MAIN-CONTROL/TIMER/code/#mainc","title":"main.c","text":"<pre><code>/**\n * @file main.c\n * @author SHUAIWEN CUI (SHUAIWEN001@e.ntu.edu.sg)\n * @brief \n * @version 1.0\n * @date 2024-11-17\n * \n * @copyright Copyright (c) 2024\n * \n */\n\n/* Dependencies */\n// Basic\n#include \"esp_system.h\"\n#include \"esp_chip_info.h\"\n#include \"esp_psram.h\"\n#include \"esp_flash.h\"\n#include \"nvs_flash.h\"\n#include \"esp_log.h\"\n\n// RTOS\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n\n// BSP\n#include \"led.h\"\n#include \"exit.h\"\n#include \"tim.h\"\n\n/**\n * @brief Entry point of the program\n * @param None\n * @retval None\n */\nvoid app_main(void)\n{\n    esp_err_t ret;\n    uint32_t flash_size;\n    esp_chip_info_t chip_info;\n\n    // uint8_t key;\n\n    // Initialize NVS\n    ret = nvs_flash_init();\n    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)\n    {\n        ESP_ERROR_CHECK(nvs_flash_erase()); // Erase if needed\n        ret = nvs_flash_init();\n    }\n\n    // Get FLASH size\n    esp_flash_get_size(NULL, &amp;flash_size);\n    esp_chip_info(&amp;chip_info);\n\n    // Display CPU core count\n    printf(\"CPU Cores: %d\\n\", chip_info.cores);\n\n    // Display FLASH size\n    printf(\"Flash size: %ld MB flash\\n\", flash_size / (1024 * 1024));\n\n    // Display PSRAM size\n    printf(\"PSRAM size: %d bytes\\n\", esp_psram_get_size());\n\n    // BSP\n    led_init();\n\n    // key_init();\n    exit_init();\n    esptim_int_init(1000000); // 1s enable timer, of which the callback function toggles the LED\n\n    while (1)\n    {\n        printf(\"Hello-ESP32\\r\\n\");\n        vTaskDelay(1000);\n    }\n\n}\n</code></pre>"},{"location":"DNESP32S3M/MAIN-CONTROL/TIMER/integration/","title":"INTEGRATION","text":""},{"location":"DNESP32S3M/MAIN-CONTROL/TIMER/integration/#introduction","title":"Introduction","text":"<p>Note</p> <p>In this section, we introduce how to integrate the timer driver into the project.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/TIMER/integration/#create-a-new-component","title":"Create a New Component","text":"<p>Warning</p> <p>Before you create a component in the <code>driver</code> directory, make sure you have incorporated the <code>driver</code> directory into the project by adding the path to the <code>driver</code> directory to the <code>EXTRA_COMPONENT_DIRS</code> variable in the project-level <code>CMakeLists.txt</code> file.</p> <p>Open the project in VSCode, open the integrated terminal, and type in</p> <p><pre><code>get_idf \n</code></pre> to actiate the ESP-IDF environment. Then type in the following command to create a new component named tim`:</p> <pre><code>idf.py -C driver create-component tim\n</code></pre> <p>The command above means to create a new component named tim<code>in the</code>driver<code>directory. After executing the command, you will see a new directory named tim</code> in the <code>driver</code> directory. And the command will automatically generate the <code>CMakeLists.txt</code> file for the new component, as well as the <code>tim.h</code> and <code>tim.c</code> files.</p> <p>Alternatively, you can mannually create the tim<code>directory in the</code>driver<code>directory, and then create the</code>CMakeLists.txt<code>,</code>tim.h<code>, and</code>tim.c<code>files in the tim</code> directory.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/TIMER/integration/#replace-the-code","title":"Replace the Code","text":"<p>Component Level</p> <p>Replace the code in this section into the <code>CMakelists.txt</code>, <code>tim.h</code>, and <code>tim.c</code> files under the component.</p> <p>Project Level</p> <p>Replace the code in <code>main.c</code> with the corresponding code. No need to change the <code>CMakeLists.txt</code> file at the project level.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/TIMER/integration/#compile-and-flash-the-project","title":"Compile and Flash the Project","text":"<p>Open the project in VSCode, open the integrated terminal, and type in</p> <pre><code>idf.py build flash monitor\n</code></pre> <p>Now, you will see the LED blinks at the interval of 1s, which is set by the timer period.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/TIMER/note/","title":"TIMER","text":""},{"location":"DNESP32S3M/MAIN-CONTROL/TIMER/note/#introduction","title":"Introduction","text":"<p>This document introduces the use of the ESP32 timer.</p> <p>Timer</p> <p>The timer is an integrated function of the microcontroller, which can be flexibly controlled by programming. The timing function of the microcontroller depends on the internal counter. Whenever the microcontroller experiences a machine cycle and generates a pulse, the counter will increase. The main function of the timer is to time. When the set time is reached, it will trigger an interrupt to notify the system that the timing is complete. In the interrupt service function, we can write specific programs to achieve the desired function.</p> <p>What can a timer do</p> <ul> <li> <p>Execute scheduled tasks: Timers are often used to periodically execute specific tasks. For example, if a task needs to be executed every 500 milliseconds, the timer can accurately meet this requirement.</p> </li> <li> <p>Time measurement: The timer can accurately measure time, whether it is the execution time of a code segment or the interval time of an event, it can be accurately measured by the timer.</p> </li> <li> <p>Accurate delay: For delay scenarios that require microsecond accuracy, the timer can provide a reliable   solution to ensure the accuracy of the delay.</p> </li> <li> <p>PWN signal generation: Through the precise control of the timer, we can generate PWM (pulse width modulation) signals, which is crucial for applications such as driving motors and adjusting LED brightness.</p> </li> <li> <p>Event triggering and monitoring: The timer is not only used to trigger interrupts and implement event-driven logic, but also to implement watchdog functions, monitor system status, and perform reset operations when necessary to ensure stable operation of the system.</p> </li> </ul> <p>Types of Timers</p> <p>Timers can be implemented either in hardware or software, each with its unique characteristics suited for different scenarios:</p> <p>Hardware Timers rely on the built-in hardware mechanisms of microcontrollers, utilizing dedicated timing/counter circuits to achieve timing functionality. Their key advantages are high precision and reliability because hardware timers operate independently of software tasks and operating system scheduling, remaining unaffected by them. In scenarios demanding extremely high timing accuracy, such as generating PWM signals or performing precise time measurements, hardware timers are undoubtedly the best choice. Their design ensures that even if the main CPU is occupied with other tasks, the timer can still accurately trigger the designated operation at the preset time.</p> <p>Software Timers, on the other hand, simulate timing functionality through the operating system or software libraries. The performance of these timers is affected by the system's current load and task scheduling strategies, resulting in slightly lower precision compared to hardware timers. However, software timers excel in flexibility, allowing the creation of numerous timers, making them ideal for scenarios where strict timing control is not required. It is important to note that software timers may encounter timing accuracy issues, especially under heavy system loads or when there are many high-priority tasks. Nevertheless, for simple delays where high precision is not critical, software timers are typically sufficient to meet the requirements.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/TIMER/note/#esp32-s3-timer-overview","title":"ESP32-S3 Timer Overview","text":"<p>The system timer has two built-in counters UNIT0 and UNIT1 (as shown in the figure) and three comparators COMP0, COMP1, and COMP2 (as shown in the figure). The comparators are used to monitor whether the counter's count value reaches the alarm value.</p> <p>(1) Counter</p> <p>UNIT0 and UNIT1 are 52-bit counters built into the ESP32-S3 system timer. The counters use XTAL_CLK as the clock source (40MHz). After XTAL_CLK is divided, a clock signal with a frequency of fXTAL_CLK/3 is generated in one counting cycle, and then a clock signal with a frequency of fXTAL_CLK/2 is generated in another counting cycle. Therefore, the clock CNT_CLK used by the counter has an actual average frequency of fXTAL_CLK/2.5, which is 16MHz, as shown in Figure 14.1.2. For each CNT_CLK clock cycle, the count increases by 1/16\u00b5s, that is, 16 cycles increase by 1\u00b5s. Users can control the counter UNITn by configuring the following three bits in register SYSTIMER_CONF_REG. These three bits are: \u2460: SYSTIMER_TIMER_UNITn_WORK_EN \u2461: SYSTIMER_TIMER_UNITn_CORE0_STALL_EN \u2462: SYSTIMER_TIMER_UNITn_CORE1_STALL_EN For the configuration of these three bits, please refer to the \"esp32-s3_technical_reference_manual_en\".</p> <p>(2) Comparator</p> <p>COMP0, COMP1, and COMP2 are 52-bit comparators built into the ESP32-S3 system timer. The comparators also use XTAL_CLK as the clock source (40MHz).</p> <p></p> <p>The above figure shows the process of the system timer generating an alarm. In the above process, a counter (Timer Countern) and a comparator (Timer Comparatorx) are used to generate an alarm interrupt based on the comparison result.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/TIMER/note/#use-case","title":"Use Case","text":"<p>Let's design a program that configures a high-resolution timer to enable interrupts and toggle the LED status in the interrupt callback function. Since we are using on-board resources, no wiring is required.</p>"},{"location":"DNESP32S3M/MAIN-CONTROL/TIMER/note/#dependencies","title":"Dependencies","text":""},{"location":"DNESP32S3M/MAIN-CONTROL/TIMER/note/#key-functions","title":"Key Functions","text":"Function Prototype Explanation Example void esptim_int_init(uint64_t tps); Initialize a high-precision timer (ESP_TIMER) exit_init(); void esptim_callback(void *arg); Timer callback function exit_callback(); esp_err_t esp_timer_create(const esp_timer_create_args_t* args, esp_timer_handle_t* out_handle) Create a new timer esp_timer_create(&amp;tim_periodic_arg, &amp;esp_tim_handle); esp_err_t IRAM_ATTR esp_timer_start_periodic(esp_timer_handle_t timer, uint64_t period_us) Start a periodic timer esp_timer_start_periodic(esp_tim_handle, tps);"},{"location":"DNESP32S3M/MAIN-CONTROL/TIMER/note/#summary","title":"Summary","text":"<p>Note</p> <p>This chapter introduces the use of ESP32 timers. By designing a program, the configuration of high-resolution timers is realized, interrupts are enabled, and the state of LEDs is flipped in the interrupt callback function. Several key points:</p> <ul> <li> <p>How to add timer files to the project, source files, header files, path dependencies, etc.</p> </li> <li> <p>How to construct the timer initialization function.</p> </li> <li> <p>How to construct the timer callback function.</p> </li> <li> <p>How to call the timer initialization function at the application layer.</p> </li> </ul>"},{"location":"DNESP32S3M/MIDDLEWARE/middleware/","title":"MIDDLEWARE","text":"<p>Note</p> <p>This chapter introduces the middleware layer of the DNESP32S3M project.</p>"},{"location":"DNESP32S3M/MIDDLEWARE/ESP-DL/esp-dl/","title":"ESP-DL LIBRARY","text":""},{"location":"DNESP32S3M/MIDDLEWARE/ESP-DL/esp-dl/#component-introduction-and-integration-guidance","title":"COMPONENT INTRODUCTION AND INTEGRATION GUIDANCE","text":"<ul> <li> <p> ESP-DL COMPONENT</p> <p>Provided by Espressif Official</p> <p>  Portal </p> </li> </ul> <p>Note</p> <p>In this chapter, I did not use the default component manager. That is to say, the incorporated middleware are manually moved to the <code>middleware</code> directory, rather than staying in the <code>managed_components</code> directory.</p> <p>Tip</p> <p>You will also see esp_jpg downloaded along with esp-dl. This is because esp-dl depends on esp-jpg.</p>"},{"location":"DNESP32S3M/MIDDLEWARE/ESP-DL/esp-dl/#component-online-documentation","title":"COMPONENT ONLINE DOCUMENTATION","text":"<ul> <li> <p> ESP-DSP DOC</p> <p>  Portal </p> </li> </ul>"},{"location":"DNESP32S3M/MIDDLEWARE/ESP-DSP/esp-dsp/","title":"ESP-DSP LIBRARY","text":""},{"location":"DNESP32S3M/MIDDLEWARE/ESP-DSP/esp-dsp/#component-introduction-and-integration-guidance","title":"COMPONENT INTRODUCTION AND INTEGRATION GUIDANCE","text":"<ul> <li> <p> ESP-DSP COMPONENT</p> <p>Provided by Espressif Official</p> <p>  Portal </p> </li> </ul> <p>Note</p> <p>In this chapter, I did not use the default component manager. That is to say, the incorporated middleware are manually moved to the <code>middleware</code> directory, rather than staying in the <code>managed_components</code> directory.</p>"},{"location":"DNESP32S3M/MIDDLEWARE/ESP-DSP/esp-dsp/#component-online-documentation","title":"COMPONENT ONLINE DOCUMENTATION","text":"<ul> <li> <p> ESP-DSP DOC</p> <p>  Portal </p> </li> </ul>"},{"location":"DNESP32S3M/PERCEPTION/perception/","title":"PERCEPTION","text":""},{"location":"DNESP32S3M/PROJECT/project/","title":"PROJECT CONSTRUCTION","text":""},{"location":"DNESP32S3M/PROJECT/project/#project-level-cmakeliststxt","title":"PROJECT-LEVEL CMakelists.txt","text":"<pre><code># The following five lines of boilerplate have to be in your project's\n# CMakeLists in this exact order for cmake to work correctly\ncmake_minimum_required(VERSION 3.16)\n\ninclude($ENV{IDF_PATH}/tools/cmake/project.cmake)\n\nset(EXTRA_COMPONENT_DIRS \"./driver\" \"./middleware\" \"./application\")\n\nproject(DNESP32S3-CORE)\n</code></pre> <p>Note</p> <p>To be consistent with the project code architecture introduced previously, we recommend that you create a <code>driver</code>, <code>middleware</code>, and <code>application</code> directory in the project root directory and place the corresponding code in the corresponding directory. To incorporate these directories into the project, you need to add the path to these directories to the <code>EXTRA_COMPONENT_DIRS</code> variable in the project-level <code>CMakeLists.txt</code> file.</p> <p>Danger</p> <p>Must note that <code>set(EXTRA_COMPONENT_DIRS \"./driver\" \"./middleware\" \"./application\")</code> should be placed before <code>project(DNESP32S3-CORE)</code>. Otherwise, the project will not be able to find the components in the directories. Refer to LINK.</p>"},{"location":"DNESP32S3M/PROJECT/project/#main-foldeer-cmakeliststxt","title":"MAIN FOLDEER CMakelists.txt","text":"<pre><code># Define source directories\nset(src_dirs\n    .\n)\n\n# Define include directories\nset(include_dirs\n    .\n)\n\n# Define required components\nset(requires\n)\n\n# Register the component\nidf_component_register(\n    SRC_DIRS ${src_dirs}\n    INCLUDE_DIRS ${include_dirs}\n    REQUIRES ${requires}\n)\n\n# Add compilation options\n# component_compile_options(-ffast-math -O3 -Wno-error=format -Wno-format)\n</code></pre>"},{"location":"FKH743M2-IIT6/fkh743m2-iit6/","title":"FANKE TECH FKH743M2-IIT6","text":"<p>\ud83d\udcc6</p>"},{"location":"KICK_START/kick_start/","title":"KICK START","text":""},{"location":"KICK_START/ESP32/ENVIRONMENT/environment/","title":"ESP32 DEVELOPMENT ENVIRONMENT SETUP","text":"<p>Tip</p> <p>You are strongly recommended to read the official guide for setting up the development environment before proceeding. The official guide can be found here. </p> <p>Note</p> <p>To start using ESP-IDF on ESP32, install the following software:</p> <ul> <li> <p>Toolchain to compile code for ESP32</p> </li> <li> <p>Build tools - CMake and Ninja to build a full Application for ESP32</p> </li> <li> <p>ESP-IDF that essentially contains API (software libraries and source code) for ESP32 and scripts to  operate the Toolchain</p> </li> </ul> <p></p> <p>Note</p> <p>There are two ways for ESP32 ESP-IDF programming:</p> <ul> <li> <p>Command Line Interface (CLI): fundamental for ESP-IDF programming</p> </li> <li> <p>IDE: easier for beginners</p> </li> </ul>"},{"location":"KICK_START/ESP32/ENVIRONMENT/environment/#windows","title":"WINDOWS","text":""},{"location":"KICK_START/ESP32/ENVIRONMENT/environment/#cli","title":"CLI","text":"<ul> <li> <p> How to Install the ESP-IDF Toolchain on Windows (CLI)</p> <p>  Portal </p> </li> </ul>"},{"location":"KICK_START/ESP32/ENVIRONMENT/environment/#ide","title":"IDE","text":"<ul> <li> <p> How to Install the ESP-IDF Toolchain on Windows (VSCode)</p> <p>  Portal </p> </li> </ul>"},{"location":"KICK_START/ESP32/ENVIRONMENT/environment/#linux","title":"LINUX","text":"<p>Tip</p> <p>ESP-IDF is much faster on Linux than on Windows. It is recommended to use Linux for ESP-IDF development.</p>"},{"location":"KICK_START/ESP32/ENVIRONMENT/environment/#cli_1","title":"CLI \ud83c\udfaf","text":"<p>Note</p> <p>There are a total of five steps:</p> <ul> <li> <p>Step 1: Installation Preparation</p> </li> <li> <p>Step 2: Get ESP-IDF</p> </li> <li> <p>Step 3: Set up the Toolchain</p> </li> <li> <p>Step 4: Set up the Build System</p> </li> <li> <p>Step 5: Start Using</p> </li> </ul>"},{"location":"KICK_START/ESP32/ENVIRONMENT/environment/#step-1-installation-preparation","title":"Step 1 - Installation Preparation","text":"<ul> <li>UBUNTU &amp; DEBIAN</li> </ul> <pre><code>sudo apt-get install git wget flex bison gperf python3 python3-pip python3-venv cmake ninja-build ccache libffi-dev libssl-dev dfu-util libusb-1.0-0\n</code></pre> <ul> <li>CENTOS</li> </ul> <pre><code>sudo yum -y update &amp;&amp; sudo yum install git wget flex bison gperf python3 python3-setuptools cmake ninja-build ccache dfu-util libusbx\n</code></pre>"},{"location":"KICK_START/ESP32/ENVIRONMENT/environment/#step-2-get-esp-idf","title":"Step 2 - Get ESP-IDF","text":"<p>Before building applications around the ESP32, obtain the ESP-IDF repository, the software library files provided by Espressif.</p> <p>To get a local copy of ESP-IDF, open the terminal, navigate to the working directory where you want to save ESP-IDF, and clone the remote repository using git clone. See detailed steps for different operating systems below.</p> <p>Open the terminal and run the following commands:</p> <p><pre><code>mkdir -p ~/esp\ncd ~/esp\ngit clone --recursive https://github.com/espressif/esp-idf.git\n</code></pre> ESP-IDF will be downloaded to <code>~/esp/esp-idf</code>.</p> <p>Visit the ESP-IDF Version Overview to check specific applicable scenarios for different ESP-IDF versions.</p>"},{"location":"KICK_START/ESP32/ENVIRONMENT/environment/#step-3-set-up-the-toolchain","title":"Step 3 - Set Up the Toolchain","text":"<p>Besides ESP-IDF itself, various tools used by ESP-IDF, such as compilers, debuggers, and Python packages, must also be installed to support ESP32 projects. <pre><code>cd ~/esp/esp-idf\n./install.sh all\n</code></pre></p>"},{"location":"KICK_START/ESP32/ENVIRONMENT/environment/#step-4-set-up-the-environment-variables","title":"Step 4 - Set Up the Environment Variables","text":"<p>At this stage, the tools you just installed are not yet added to the PATH environment variable, so they cannot be used from the command line. Therefore, some environment variables must be set. This can be done using another script provided by ESP-IDF.</p> <p>Run the following command in the terminal where you need to use ESP-IDF:</p> <pre><code>. $HOME/esp/esp-idf/export.sh\n</code></pre> <p>If you frequently use ESP-IDF, you can create an alias for running export.sh as follows:</p> <p>(1) Open the shell configuration file</p> <pre><code>nano ~/.bashrc\n</code></pre> <p>(2) Copy and paste the following command into your shell configuration file.</p> <pre><code>alias get_idf='. $HOME/esp/esp-idf/export.sh'\n</code></pre> <p>(3) Refresh the configuration file by restarting the terminal or by running <code>source [path to profile]</code>, such as <code>source ~/.bashrc</code>.</p> <p>You can now run <code>get_idf</code> in any terminal window to set up or refresh the ESP-IDF environment.</p> <p>It is not recommended to add <code>export.sh</code> directly to the shell configuration file, as this will activate the IDF virtual environment in every terminal session, including those where ESP-IDF is not needed. This goes against the purpose of using a virtual environment and may interfere with other software.</p>"},{"location":"KICK_START/ESP32/ENVIRONMENT/environment/#ide_1","title":"IDE","text":"<ul> <li> <p> How to Install the ESP-IDF Toolchain on Ubuntu \ud83c\udfaf\ud83c\udfc6\u2705</p> <p>  Portal </p> </li> </ul>"},{"location":"KICK_START/ESP32/ENVIRONMENT/environment/#uninstalling-esp-idf","title":"Uninstalling ESP-IDF","text":"<p>(1) Delete the <code>esp</code> directory.</p> <p>First, navigate to the directory where you cloned the ESP-IDF repository and delete the <code>esp</code> directory, typically at <code>~/esp/esp-idf</code>.</p> <pre><code>rm -rf ~/esp/esp-idf\n</code></pre> <p>(2) Remove the toolchain.</p> <p>If you installed the toolchain using the <code>install.sh</code> script, typically in <code>~/.espressif</code>, you can remove it by running the following command:</p> <pre><code>rm -rf ~/.espressif\n</code></pre> <p>(3) Remove the environment variables.</p> <p>If you added an alias to quickly load the ESP-IDF environment variables in your shell configuration file (e.g., <code>~/.bashrc</code> or <code>~/.zshrc</code>), you need to edit these configuration files and remove the alias. You can open and edit the file using the following command:</p> <pre><code>nano ~/.bashrc\n</code></pre> <p>(4) Refresh the configuration file.</p> <p>After removing the alias, refresh the configuration file by running the following command:</p> <pre><code>source ~/.bashrc\n</code></pre>"},{"location":"KICK_START/ESP32/ENVIRONMENT/environment/#vscode-esp-idf-plugin","title":"VSCode ESP-IDF Plugin","text":"<p>Note</p> <p>This is currently one of the most popular ways to develop with ESP-IDF. VSCode is a lightweight code editor that supports multiple programming languages, including C/C++. The ESP-IDF plugin provides full support for ESP-IDF in VSCode, including features like code autocompletion, debugging, building, and flashing.</p> <ol> <li> <p>Install VSCode</p> <p>First, you need to install VSCode. You can download the installer for your operating system here.</p> </li> <li> <p>Install the ESP-IDF Plugin</p> <p>To install the ESP-IDF plugin, follow these steps:</p> <ul> <li>Open VSCode.</li> <li>Click the Extensions icon on the left sidebar.</li> <li>Type \u201cESP-IDF\u201d in the search bar.</li> <li>Click the \u201cInstall\u201d button.</li> </ul> </li> <li> <p>Configure ESP-IDF Path and ESP-IDF Tools Path</p> <p>After installing the ESP-IDF plugin, you need to configure the ESP-IDF path and ESP-IDF tools path. These paths tell the plugin where to find ESP-IDF and its related tools.</p> <ul> <li>Open VSCode.</li> <li>Click the \u201cSettings\u201d icon in the lower left corner.</li> <li>Type \u201cESP-IDF\u201d in the search bar.</li> <li>Enter the paths for ESP-IDF and ESP-IDF tools in the \u201cESP-IDF Path\u201d and \u201cESP-IDF Tools Path\u201d fields. (If they are not already installed, the plugin will automatically download them once the paths are set.)</li> <li>Save the settings.</li> </ul> </li> <li> <p>Create a New Project</p> </li> </ol>"},{"location":"KICK_START/ESP32/HANDS-ON/hands-on/","title":"HANDS ON","text":""},{"location":"KICK_START/ESP32/HANDS-ON/hands-on/#program-preparation","title":"Program Preparation","text":"<p>Find some programs for testing, here, I use the following repository: </p> <pre><code>git clone --recursive https://gitee.com/vi-iot/esp32-board.git\n</code></pre>"},{"location":"KICK_START/ESP32/HANDS-ON/hands-on/#hardware-preparation","title":"Hardware Preparation","text":"<p>Connect the ESP32 development board to the computer</p>"},{"location":"KICK_START/ESP32/HANDS-ON/hands-on/#select-a-program","title":"Select a Program","text":"<p>Enter the repository <code>esp32-board</code> we just downloaded, find a program, such as <code>helloworld</code>, enter the directory:</p> <pre><code>cd esp32-board\ncd helloworld\n</code></pre>"},{"location":"KICK_START/ESP32/HANDS-ON/hands-on/#set-the-development-board-type","title":"Set the Development Board Type","text":"<p>ESP32 Environment Issue</p> <p>Type in <code>get_idf</code> to call the ESP32 environment if you are not currently in the ESP32 environment. Note that, the use of <code>get_idf</code> is only available after you properly set up the alias in the SHELL as indicated in the last tutorial.</p> <p>If it is a general ESP32 development board, you can ignore this step, but if it is another development board, it is better to specify the development board type, such as esp32-s3:</p> <pre><code>idf.py set-target esp32s3\n</code></pre>"},{"location":"KICK_START/ESP32/HANDS-ON/hands-on/#compile-the-program","title":"Compile the Program","text":"<pre><code>idf.py build\n</code></pre>"},{"location":"KICK_START/ESP32/HANDS-ON/hands-on/#flash-the-program","title":"Flash the Program","text":"<pre><code>idf.py flash\n</code></pre> <p>Note that you can view the USB port where the device is located:</p> <pre><code>ls /dev/tty*\n</code></pre> <p>By comparing the linked/non-linked, find the port where the device is located, such as <code>/dev/ttyACM1</code>, and then flash the program:</p> <pre><code>idf.py -p /dev/ttyACM1 flash\n</code></pre>"},{"location":"KICK_START/ESP32/HANDS-ON/hands-on/#monitor-the-program-running","title":"Monitor the Program Running","text":"<pre><code>idf.py monitor\n</code></pre> <p>or you can use a specific port</p> <pre><code>idf.py -p /dev/ttyACM1 monitor\n</code></pre>"},{"location":"KICK_START/ESP32/HANDS-ON/hands-on/#exit-monitoring","title":"Exit Monitoring","text":"<p>Press <code>Ctrl + ]</code> to exit monitoring</p>"},{"location":"KICK_START/ESP32/HARDWARE/hardware/","title":"HARDWARE","text":"<p>Alientek DNESP32S3M Main Control Board</p> <p></p> <p></p> <p>Alientek DNESP32S3 Development Board</p> <p></p> <p></p> <p></p> <p></p> <p>DNESP32S3M/DNESP32S3</p> <p>The hardware platform used in this document is the DNESP32S3M/DNESP32S3 from Alientek\uff0c which is based on ESP32-S3, as shown in the figure above. It should be possible to migrate the relevant programs to other development boards, but adaptation should be made according to the actual situation.</p> <p>DNESP32S3M/DNESP32S3 Hardware Features</p> <p>ESP32-S3 is a system on a chip that integrates the following features:</p> <ul> <li> <p>Wi-Fi (2.4 GHz band)</p> </li> <li> <p>Bluetooth Low Energy</p> </li> <li> <p>Dual high performance Xtensa\u00ae 32-bit LX7 CPU cores</p> </li> <li> <p>Ultra Low Power co-processor running either RISC-V or FSM core</p> </li> <li> <p>Multiple peripherals</p> </li> <li> <p>Built-in security hardware</p> </li> <li> <p>USB OTG interface</p> </li> <li> <p>USB Serial/JTAG Controller</p> </li> </ul> <p>Powered by 40 nm technology, ESP32-S3 provides a robust, highly integrated platform, which helps meet   the continuous demands for efficient power usage, compact design, security, high performance, and     reliability.</p> <p>Espressif provides basic hardware and software resources to help application developers realize their   ideas using the ESP32-S3 series hardware. The software development framework by Espressif is intended     for development of Internet-of-Things (IoT) applications with Wi-Fi, Bluetooth, power management and    several other system features.</p> <p>Note</p> <p>To start programming, you need:</p> <ul> <li> <p>A computer with a USB port</p> </li> <li> <p>A USB cable</p> </li> <li> <p>A DNESP32S3M/DNESP32S3 development board or other ESP32 development board</p> </li> </ul>"},{"location":"KICK_START/ESP32/TEMPLATE/template/","title":"TEMPLATE PROJECT BUILDING-UP","text":""},{"location":"KICK_START/ESP32/TEMPLATE/template/#environment-setup","title":"ENVIRONMENT SETUP","text":"<p>Info</p> <p>We use VSCode + ESP-IDF for development. Details to setup the development environment can be found on the internet. I assume you have already set up the development environment.</p>"},{"location":"KICK_START/ESP32/TEMPLATE/template/#create-a-new-project","title":"CREATE A NEW PROJECT","text":"<ol> <li>Launch VSCode and then open the command palette by pressing <code>Ctrl+Shift+P</code> (Windows/Linux) or <code>Cmd+Shift+P</code> (macOS).</li> <li>Type <code>ESP-IDF: New Project</code> and press <code>Enter</code>. </li> <li>Enter the project configuration UI and fill in the required information. </li> <li>Choose a template to create a new project. </li> <li>Open in a new window.  </li> </ol>"},{"location":"KICK_START/ESP32/TEMPLATE/template/#templated-project-structure","title":"TEMPLATED PROJECT STRUCTURE","text":"<pre><code>sample_proj/ # Project root directory\n\u251c\u2500\u2500 CMakeLists.txt # Project CMake configuration file\n\u251c\u2500\u2500 main/ # Main application directory\n\u2502   \u251c\u2500\u2500 CMakeLists.txt # Application CMake configuration file\n\u2502   \u2514\u2500\u2500 main.c # Application source file\n\u2514\u2500\u2500 sdkconfig # Project configuration file\n</code></pre>"},{"location":"KICK_START/ESP32/TEMPLATE/template/#project-configuration","title":"PROJECT CONFIGURATION","text":"<p>Note</p> <p>This step is to configure the project settings to maximize the power of the hardware, i.e., use target-specific configurations rather than default configurations.</p> <p>Warning</p> <p>Before you open the project configuration UI, make sure you have the project open in VSCode, set the target to your board, and have the ESP-IDF extension installed.</p> <ol> <li>Enter the project configuration UI by pressing <code>Ctrl+Shift+P</code> (Windows/Linux) or <code>Cmd+Shift+P</code> (macOS) and type <code>ESP-IDF: Configure Project</code>. Alternatively, one can click the gear icon on the bottom menu of the VSCode window. </li> <li>'FLASH' configuration. In the search bar, type <code>flash</code> and press <code>Enter</code>.  </li> <li>'Partition Table' configuration. In the search bar, type <code>partition</code> and press <code>Enter</code>.  details to be provided later</li> <li>'PSRAM' configuration. In the search bar, type <code>psram</code> and press <code>Enter</code>. </li> <li>Change the CPU frequency. In the search bar, type <code>cpu</code> and press <code>Enter</code>. Modify the CPU frequency to 240 MHz. </li> <li>Modify the FreeRTOS tick clock frequency. In the search bar, type <code>tick</code> and press <code>Enter</code>. Modify the tick clock frequency to 1000 Hz. </li> <li>Modify the partition table. In the command palette, type <code>ESP-IDF: Open Partition Table Editor UI</code>. </li> <li>Modify the partition table as shown below. </li> <li>Save the all the modifications.</li> </ol> <p>By far, we have finished the project initialization. The configuration is now consistent with the hardware onboard resources. </p>"},{"location":"KICK_START/ESP32/TEMPLATE/template/#template-program","title":"TEMPLATE PROGRAM","text":"<p>Now, let's create a simple program to test the board. </p> <p>Go to the main.c file and the default content is:</p> <p><pre><code>#include &lt;stdio.h&gt;\n\nvoid app_main(void)\n{\n\n}\n</code></pre> replace the content with the following code:</p> <pre><code>#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"nvs_flash.h\"\n#include \"esp_system.h\"\n#include \"esp_chip_info.h\"\n#include \"esp_psram.h\"\n#include \"esp_flash.h\"\n\n/**\n * @brief Entry point of the program\n * @param None\n * @retval None\n */\nvoid app_main(void)\n{\n    esp_err_t ret;\n    uint32_t flash_size;\n    esp_chip_info_t chip_info;\n\n    // Initialize NVS\n    ret = nvs_flash_init();\n    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)\n    {\n        ESP_ERROR_CHECK(nvs_flash_erase()); // Erase if needed\n        ret = nvs_flash_init();\n    }\n\n    // Get FLASH size\n    esp_flash_get_size(NULL, &amp;flash_size);\n    esp_chip_info(&amp;chip_info);\n\n    // Display CPU core count\n    printf(\"CPU Cores: %d\\n\", chip_info.cores);\n\n    // Display FLASH size\n    printf(\"Flash size: %ld MB flash\\n\", flash_size / (1024 * 1024));\n\n    // Display PSRAM size\n    printf(\"PSRAM size: %d bytes\\n\", esp_psram_get_size());\n\n    while (1)\n    {\n        printf(\"Hello-ESP32\\r\\n\");\n        vTaskDelay(1000);\n    }\n}\n</code></pre> <p>Then, ensure the serial port number is corrrect, the target board is selected, then click the \"fire flame\" icon to build, flash and monitor the program. Then, you should be able to see the printouts on the serial monitor. </p>"},{"location":"KICK_START/ESP32/TEMPLATE/template/#conclusions","title":"CONCLUSIONS","text":"<p>Note</p> <p>This project sets up the minimal system development board DNESP32S3M/DNESP32S3, and this project can serve as a useful template for future development. Compared to STM32, many low level details are hidden from the user, therefore the set up process is much simpler.</p> <p>Tip</p> <p>This template is applicable to both DNESP32S3M and DNESP32S3.</p>"},{"location":"KICK_START/STM32/stm32/","title":"STM32","text":"<p>Coming Soon ... Please Refer the Following Repository First:</p> <ul> <li> <p> MCU_NODE_STM32\ud83c\udfaf\ud83c\udfc6</p> <p>MCU IoT Node with High Performance Edge Computing, Based on STM32</p> <p>  Portal </p> </li> </ul>"},{"location":"RELEASE/release/","title":"RELEASE","text":""},{"location":"RELEASE/release/#code-repository","title":"CODE REPOSITORY","text":"<ul> <li> <p> NexNode</p> <p>  Portal </p> </li> </ul>"},{"location":"RELEASE/release/#release-note","title":"RELEASE NOTE","text":""},{"location":"RELEASE/release/#folder-code-esp32-dnesp32s3m","title":"FOLDER - CODE-ESP32-DNESP32S3M","text":"BRANCH STATUS INIT TEMPLATE \u2705 MAIN CONTROL FUNCTIONS \u2705 PERIPHERAL FUNCTIONS \ud83d\udcc6 MATH + DSP + AI \ud83c\udfd7\ufe0f DNESP32S3M-INIT \u2705 \u2714\ufe0f DNESP32S3M-CORE \u2705 \u2714\ufe0f \u2714\ufe0f DNESP32S3M-IOT \ud83d\udcc6 \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f DNESP32S3M-AI \ud83c\udfd7\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f"},{"location":"RELEASE/release/#folder-code-esp32-dnesp32s3","title":"FOLDER - CODE-ESP32-DNESP32S3","text":"<p>\ud83d\udcc6</p>"},{"location":"RELEASE/release/#folder-code-stm32-fkh743m2-iit6","title":"FOLDER - CODE-STM32-FKH743M2-IIT6","text":"<p>\ud83d\udcc6</p>"},{"location":"ROADMAP/roadmap/","title":"ROADMAP","text":""},{"location":"ROADMAP/roadmap/#architecture","title":"ARCHITECTURE","text":""},{"location":"ROADMAP/roadmap/#layered-architecture","title":"LAYERED ARCHITECTURE","text":"<pre><code>+------------------------------+\n| APPLICATION                  |\n+------------------------------+\n| MIDDLEWARE                   |\n+------------------------------+\n| DRIVERS                      |\n+------------------------------+\n| HARDWARE                     |\n+------------------------------+\n</code></pre>"},{"location":"ROADMAP/roadmap/#system-of-systems","title":"SYSTEM OF SYSTEMS","text":"<pre><code>MAIN CONTROL + PERCEPTION + COMMUNICATION + ACTUATION + POWER\n</code></pre>"},{"location":"ROADMAP/roadmap/#host-mcu","title":"HOST MCU","text":"<ul> <li>ESP32</li> <li>STM32</li> </ul>"},{"location":"ROADMAP/roadmap/#host-dev-boards","title":"HOST DEV BOARDS","text":"<p>ESP32</p> <ul> <li>DNESP32S3M </li> <li>DNESP32S3</li> </ul> <p>STM32</p> <ul> <li>FKH743M2-IIT6</li> </ul>"},{"location":"blog/","title":"Blog","text":""},{"location":"zh/","title":"NexNode","text":"<p>\u8fd9\u4e2a\u9879\u76ee\u81f4\u529b\u4e8e\u4e3a\u9762\u5411\u672a\u6765\u7684\u5e94\u7528\u5f00\u53d1\u4e00\u6b3e\u57fa\u4e8eEdgeAI\u7684MCU\u7ea7IoT\u8282\u70b9\u3002</p> <p>\"Nex\" \u6e90\u81ea \"Next\" \u548c \"Nexus\"\uff0c\u610f\u5473\u7740\u4e0b\u4e00\u4ee3IoT\u8bbe\u5907\u548c\u7269\u7406\u4e16\u754c\u4e0e\u6570\u5b57\u4e16\u754c\u4e4b\u95f4\u7684\u8fde\u63a5\u3002</p> <p></p>"},{"location":"zh/DNESP32S3/dnesp32s3/","title":"\u6b63\u70b9\u539f\u5b50 DNESP32S3 \u5f00\u53d1\u677f","text":"<p>\u6b63\u70b9\u539f\u5b50 DNESP32S3 \u5f00\u53d1\u677f</p> <p></p> <p></p> <p>\ud83c\udfd7\ufe0f</p>"},{"location":"zh/DNESP32S3M/dnesp32s3m/","title":"\u6b63\u70b9\u539f\u5b50 DNESP32S3M \u5f00\u53d1\u677f","text":""},{"location":"zh/DNESP32S3M/dnesp32s3m/#_1","title":"\u786c\u4ef6\u67b6\u6784","text":"<p>\u786c\u4ef6\u67b6\u6784</p> <p>\u4e3b\u63a7 + \u611f\u77e5 + \u901a\u4fe1 + \u6267\u884c + \u7535\u6e90</p> <p>\u6b63\u70b9\u539f\u5b50 DNESP32S3M \u4e3b\u63a7\u677f</p> <p></p> <p></p>"},{"location":"zh/DNESP32S3M/dnesp32s3m/#_2","title":"\u4ee3\u7801\u67b6\u6784","text":"<p>\u4e00\u822c\u610f\u4e49\u4e0a\u7684 ESP32 \u9879\u76ee\u7ed3\u6784</p> <pre><code>- myProject/\n             - CMakeLists.txt\n             - sdkconfig\n             - components/ - component1/ - CMakeLists.txt\n                                         - Kconfig\n                                         - src1.c\n                           - component2/ - CMakeLists.txt\n                                         - Kconfig\n                                         - src1.c\n                                         - include/ - component2.h\n             - main/       - CMakeLists.txt\n                           - src1.c\n                           - src2.c\n             - build/\n</code></pre> <p>DNESP32S3M \u6a21\u677f\u9879\u76ee\u7ed3\u6784</p> <pre><code>- DNESP32S3M-XXX/\n             - .vscode/ (vscode \u8bbe\u7f6e\u6587\u4ef6\uff0c\u53ef\u4ee5\u5ffd\u7565)\n             - CMakeLists.txt (\u9879\u76ee\u7ea7 cmake \u6587\u4ef6)\n             - sdkconfig (\u9879\u76ee\u7ea7 sdkconfig \u6587\u4ef6\uff0c\u901a\u8fc7 idf.py menuconfig \u751f\u6210)\n             - sdkconfig.old (sdkconfig \u5907\u4efd)\n             - partitions-16MiB.csv (16MiB flash \u8c03\u6574\u7684\u5206\u533a\u8868\u6587\u4ef6)\n             - dependencies.lock (\u4f9d\u8d56\u5e93\u7248\u672c\u9501\u5b9a\u6587\u4ef6)\n             - application/         - component1/ - CMakeLists.txt\n                                                  - Kconfig\n                                                  - src1.c\n                                    - component2/ - CMakeLists.txt\n                                                  - Kconfig\n                                                  - src1.c\n                                                  - include/ - component2.h\n             - middleware/          - component1/ - CMakeLists.txt\n                                                  - Kconfig\n                                                  - src1.c\n                                    - component2/ - CMakeLists.txt\n                                                  - Kconfig\n                                                  - src1.c\n                                                  - include/ - component2.h\n             - driver/              - component1/ - CMakeLists.txt\n                                                  - Kconfig\n                                                  - src1.c\n                                    - component2/ - CMakeLists.txt\n                                                  - Kconfig\n                                                  - src1.c\n                                                  - include/ - component2.h\n             - main/                - CMakeLists.txt\n                                    - src1.c\n                                    - src2.c\n             - build/\n</code></pre> <p>DNESP32S3M \u6a21\u677f\u9879\u76ee\u7ed3\u6784</p> <ul> <li><code>application</code> \u76ee\u5f55\u4e0b\u653e\u7f6e\u5e94\u7528\u5c42\u4ee3\u7801</li> <li><code>middleware</code> \u76ee\u5f55\u4e0b\u653e\u7f6e\u4e2d\u95f4\u4ef6\u4ee3\u7801</li> <li><code>driver</code> \u76ee\u5f55\u4e0b\u653e\u7f6e\u9a71\u52a8\u4ee3\u7801</li> <li><code>main</code> \u76ee\u5f55\u4e0b\u653e\u7f6e\u4e3b\u51fd\u6570\u4ee3\u7801</li> </ul>"},{"location":"zh/DNESP32S3M/dnesp32s3m/#_3","title":"\u63a8\u8350\u4e0a\u624b\u987a\u5e8f","text":"<p>\u603b\u4e4b\uff0c\u53ef\u4ee5\u770b\u6bcf\u4e2a\u7ae0\u8282\u91cc\u9762\u7684\u4f9d\u8d56\u5173\u7cfb\uff0c\u4fdd\u8bc1\u524d\u7f6e\u6761\u4ef6\u6ee1\u8db3\u5373\u53ef\u3002</p> <ol> <li>\u9879\u76ee\u6784\u5efa</li> <li>\u6267\u884c&gt;LED</li> <li>\u4e3b\u63a7&gt;\u5916\u90e8\u4e2d\u65ad</li> <li>\u4e3b\u63a7&gt;\u5b9a\u65f6\u5668</li> <li>\u4e3b\u63a7&gt;\u5b9e\u65f6\u65f6\u949f</li> <li>\u4e3b\u63a7&gt;\u968f\u673a\u6570\u53d1\u751f\u5668</li> <li>\u4e3b\u63a7&gt;SPI &amp; \u6267\u884c LCD</li> <li>\u4e3b\u63a7&gt;SPI &amp; SD \u5361</li> </ol>"},{"location":"zh/DNESP32S3M/ACTUATION/actuation/","title":"\u6267\u884c","text":""},{"location":"zh/DNESP32S3M/ACTUATION/KEY%28EXIT%29/code/","title":"KEY(EXIT) \u4ee3\u7801","text":""},{"location":"zh/DNESP32S3M/ACTUATION/KEY%28EXIT%29/code/#_1","title":"\u7ec4\u4ef6\u67b6\u6784","text":"<pre><code>- driver\n    - exit\n        - include\n            - exit.h\n        - exit.c\n        - CMakeLists.txt\n</code></pre>"},{"location":"zh/DNESP32S3M/ACTUATION/KEY%28EXIT%29/code/#driverexitcmakeliststxt","title":"driver/exit/CMakeLists.txt","text":"<pre><code>set(src_dirs\n    .\n)\n\nset(include_dirs\n    include\n)\n\nset(requires\n    driver\n    led\n)\n\nidf_component_register(SRC_DIRS ${src_dirs} INCLUDE_DIRS ${include_dirs} REQUIRES ${requires})\n</code></pre> <p>Note</p> <p>\u6ce8\u610f\uff0c\u5728\u9a71\u52a8\u7a0b\u5e8f\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 ESP-IDF \u5185\u7f6e\u7684 <code>driver</code> \u5e93\u4e2d\u7684 gpio\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u5728 <code>CMakeLists.txt</code> \u6587\u4ef6\u7684 <code>REQUIRES</code> \u5b57\u6bb5\u4e2d\u6307\u5b9a\u6b64\u4f9d\u8d56\u9879\u3002 \u6b64\u5916\uff0c\u6211\u4eec\u4f7f\u7528LED\u6765\u4f53\u73b0\u5916\u90e8\u4e2d\u65ad\u7684\u6548\u679c\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5728<code>REQUIRES</code>\u5b57\u6bb5\u4e2d\u6dfb\u52a0<code>led</code>\u3002 </p>"},{"location":"zh/DNESP32S3M/ACTUATION/KEY%28EXIT%29/integration/","title":"\u96c6\u6210","text":""},{"location":"zh/DNESP32S3M/ACTUATION/KEY%28EXIT%29/integration/#_2","title":"\u4ecb\u7ecd","text":"<p>Note</p> <p>\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u5982\u4f55\u5c06 KEY(exit) \u9a71\u52a8\u96c6\u6210\u5230\u9879\u76ee\u4e2d\u3002</p>"},{"location":"zh/DNESP32S3M/ACTUATION/KEY%28EXIT%29/integration/#_3","title":"\u521b\u5efa\u65b0\u7ec4\u4ef6","text":"<p>Warning</p> <p>\u5728 <code>driver</code> \u76ee\u5f55\u4e2d\u521b\u5efa\u7ec4\u4ef6\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u60a8\u5df2\u5c06 <code>driver</code> \u76ee\u5f55\u5408\u5e76\u5230\u9879\u76ee\u4e2d\uff0c\u65b9\u6cd5\u662f\u5c06 <code>driver</code> \u76ee\u5f55\u7684\u8def\u5f84\u6dfb\u52a0\u5230\u9879\u76ee\u7ea7 <code>CMakeLists.txt</code> \u6587\u4ef6\u4e2d\u7684 <code>EXTRA_COMPONENT_DIRS</code> \u53d8\u91cf\u4e2d\u3002</p> <p>\u5728 VSCode \u4e2d\u6253\u5f00\u9879\u76ee\uff0c\u6253\u5f00\u96c6\u6210\u7ec8\u7aef\uff0c\u8f93\u5165</p> <pre><code>get_idf \n</code></pre> <p>\u6fc0\u6d3b ESP-IDF \u73af\u5883\u3002\u7136\u540e\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a <code>exit</code> \u7684\u65b0\u7ec4\u4ef6\uff1a</p> <pre><code>idf.py -C driver create-component exit\n</code></pre> <p>\u4e0a\u9762\u7684\u547d\u4ee4\u610f\u5473\u7740\u5728 <code>driver</code> \u76ee\u5f55\u4e2d\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a <code>exit</code> \u7684\u65b0\u7ec4\u4ef6\u3002\u6267\u884c\u547d\u4ee4\u540e\uff0c\u60a8\u5c06\u5728 <code>driver</code> \u76ee\u5f55\u4e2d\u770b\u5230\u4e00\u4e2a\u540d\u4e3a <code>exit</code> \u7684\u65b0\u76ee\u5f55\u3002\u547d\u4ee4\u5c06\u81ea\u52a8\u751f\u6210\u65b0\u7ec4\u4ef6\u7684 <code>CMakeLists.txt</code> \u6587\u4ef6\uff0c\u4ee5\u53ca <code>exit.h</code> \u548c <code>exit.c</code> \u6587\u4ef6\u3002</p> <p>\u6216\u8005\uff0c\u60a8\u53ef\u4ee5\u5728 <code>driver</code> \u76ee\u5f55\u4e2d\u624b\u52a8\u521b\u5efa <code>exit</code> \u76ee\u5f55\uff0c\u7136\u540e\u5728 <code>exit</code> \u76ee\u5f55\u4e2d\u521b\u5efa <code>CMakeLists.txt</code>\u3001<code>exit.h</code> \u548c <code>exit.c</code> \u6587\u4ef6\u3002</p>"},{"location":"zh/DNESP32S3M/ACTUATION/KEY%28EXIT%29/integration/#_4","title":"\u66ff\u6362\u4ee3\u7801","text":"<p>\u7ec4\u4ef6\u5c42\u9762</p> <p>\u5c06\u672c\u8282\u4e2d\u4ee3\u7801\u5206\u522b\u66ff\u6362\u5230\u7ec4\u4ef6\u4e0b\u7684<code>CMakelists.txt</code>\u3001<code>exit.h</code>\u548c<code>exit.c</code>\u6587\u4ef6\u4e2d\u3002</p> <p>\u9879\u76ee\u5c42\u9762</p> <p>\u5c06<code>main.c</code>\u4e2d\u7684\u4ee3\u7801\u66ff\u6362\u4e3a\u76f8\u5e94\u7684\u4ee3\u7801\u3002\u9879\u76ee\u5c42\u9762\u7684<code>CMakeLists.txt</code>\u6587\u4ef6\u65e0\u9700\u66f4\u6539\u3002</p>"},{"location":"zh/DNESP32S3M/ACTUATION/KEY%28EXIT%29/integration/#_5","title":"\u7f16\u8bd1\u70e7\u5f55","text":"<p>\u5728 VSCode \u4e2d\u6253\u5f00\u9879\u76ee\uff0c\u6253\u5f00\u96c6\u6210\u7ec8\u7aef\uff0c\u8f93\u5165</p> <p><pre><code>idf.py build flash monitor\n</code></pre> \u6b64\u65f6\uff0c\u6309\u4e0b\u6309\u94ae\uff0c\u5373\u53ef\u770b\u5230LED\u72b6\u6001\u7ffb\u8f6c\u3002</p>"},{"location":"zh/DNESP32S3M/ACTUATION/KEY%28EXIT%29/note/","title":"\u6309\u952e\uff08\u4e2d\u65ad\u65b9\u5f0f\uff09\u7b14\u8bb0","text":""},{"location":"zh/DNESP32S3M/ACTUATION/KEY%28EXIT%29/note/#_2","title":"\u4ecb\u7ecd","text":"<p>Note</p> <p>\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u8ba8\u8bbadesp32s3m\u5f00\u53d1\u677f\u4e0a\u7684\u677f\u8f7d\u6309\u952e\uff0c\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u8be5\u6309\u952e\u4e0d\u4f7f\u7528\u963b\u585e\u6a21\u5f0f\uff0c\u800c\u662f\u7528\u4e8e\u4e2d\u65ad\u6a21\u5f0f\u3002\u6211\u4eec\u4f7f\u7528\u5916\u90e8\u4e2d\u65ad\u6765\u68c0\u6d4b\u6309\u952e\u6309\u4e0b\u3002\u5b9e\u9645\u4e0a\u6211\u4eec\u672c\u7ae0\u8ba8\u8bba\u7684\u662f\u4e2d\u65ad\uff0c\u4f46\u662f\u8f7d\u4f53\u662f\u6309\u952e\u3002</p>"},{"location":"zh/DNESP32S3M/ACTUATION/KEY%28EXIT%29/note/#_3","title":"\u6309\u952e","text":""},{"location":"zh/DNESP32S3M/ACTUATION/KEY%28EXIT%29/note/#_4","title":"\u677f\u8f7d\u7535\u8def","text":""},{"location":"zh/DNESP32S3M/ACTUATION/KEY%28EXIT%29/note/#_5","title":"\u4f9d\u8d56\u5173\u7cfb","text":""},{"location":"zh/DNESP32S3M/ACTUATION/KEY%28EXIT%29/note/#_6","title":"\u5173\u952e\u51fd\u6570","text":"\u51fd\u6570\u539f\u578b \u8bf4\u660e \u793a\u4f8b static void IRAM_ATTR exit_gpio_isr_handler(void *arg) \u5916\u90e8\u4e2d\u65ad\u670d\u52a1\u4f8b\u7a0b\uff0c\u5c06\u60a8\u5e0c\u671b\u5728\u68c0\u6d4b\u5230\u4e8b\u4ef6\u540e\u6267\u884c\u7684\u64cd\u4f5c\u653e\u5728\u8fd9\u91cc \u5728\u8fd9\u91cc\u653e\u7f6e\u60a8\u7684\u64cd\u4f5c esp_err_t gpio_install_isr_service(int intr_alloc_flags) \u5b89\u88c5\u9a71\u52a8\u7a0b\u5e8f\u7684GPIO ISR\u670d\u52a1\uff0c\u5141\u8bb8\u60a8\u4e3aGPIO\u5f15\u811a\u6ce8\u518cISR\u5904\u7406\u7a0b\u5e8f gpio_install_isr_service(0); esp_err_t gpio_isr_handler_add(gpio_num_t gpio_num, gpio_isr_t isr_handler, void *args) \u4e3aGPIO\u5f15\u811a\u6dfb\u52a0\u5904\u7406\u7a0b\u5e8f gpio_isr_handler_add(BOOT_INT_GPIO_PIN, exit_gpio_isr_handler, (void*) BOOT_INT_GPIO_PIN); esp_err_t gpio_intr_enable(gpio_num_t gpio_num) \u542f\u7528GPIO\u4e2d\u65ad gpio_intr_enable(BOOT_INT_GPIO_PIN); <p>Tip</p> <p>\u4e00\u65e6\u4f60\u8bbe\u7f6e\u597d\u4e86\u5904\u7406\u51fd\u6570\uff0c\u4f60\u5c31\u4e0d\u9700\u8981\u5728\u4e3b\u5faa\u73af\u4e2d\u8c03\u7528\u8be5\u51fd\u6570\uff0c\u56e0\u4e3a\u4e00\u65e6\u68c0\u6d4b\u5230\u4e8b\u4ef6\uff0c\u4e2d\u65ad\u5c06\u81ea\u52a8\u89e6\u53d1\u3002</p>"},{"location":"zh/DNESP32S3M/ACTUATION/LCD/code/","title":"\u6db2\u6676\u663e\u793a\u5c4f \u4ee3\u7801","text":""},{"location":"zh/DNESP32S3M/ACTUATION/LCD/code/#_2","title":"\u7ec4\u4ef6\u67b6\u6784","text":"<pre><code>- driver\n    - lcd\n        - include\n            - lcd.h\n        - lcd.c\n        - CMakeLists.txt\n</code></pre>"},{"location":"zh/DNESP32S3M/ACTUATION/LCD/code/#driverlcdcmakeliststxt","title":"driver/lcd/CMakeLists.txt","text":"<pre><code>set(src_dirs\n    .\n)\n\nset(include_dirs\n    include\n)\n\nset(requires\n    driver\n    spi\n)\n\nidf_component_register(SRC_DIRS ${src_dirs} INCLUDE_DIRS ${include_dirs} REQUIRES ${requires})\n</code></pre> <p>Note</p> <p>\u6ce8\u610f\uff0c\u5728\u9a71\u52a8\u7a0b\u5e8f\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 ESP-IDF \u5185\u7f6e\u7684 <code>driver</code> \u5e93\u4e2d\u7684 gpio\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u5728 <code>CMakeLists.txt</code> \u6587\u4ef6\u7684 <code>REQUIRES</code> \u5b57\u6bb5\u4e2d\u6307\u5b9a\u6b64\u4f9d\u8d56\u9879\u3002\u6211\u4eec\u8fd8\u9700\u8981\u5c06 <code>spi</code> \u5e93\u6dfb\u52a0\u4e3a\u4f9d\u8d56\u9879\u3002</p>"},{"location":"zh/DNESP32S3M/ACTUATION/LCD/integration/","title":"\u96c6\u6210","text":""},{"location":"zh/DNESP32S3M/ACTUATION/LCD/integration/#_2","title":"\u4ecb\u7ecd","text":"<p>Note</p> <p>\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u5982\u4f55\u5c06\u5b9a\u65f6\u5668\u9a71\u52a8\u96c6\u6210\u5230\u9879\u76ee\u4e2d\u3002</p>"},{"location":"zh/DNESP32S3M/ACTUATION/LCD/integration/#_3","title":"\u521b\u5efa\u65b0\u7ec4\u4ef6","text":"<p>Warning</p> <p>\u5728 <code>driver</code> \u76ee\u5f55\u4e2d\u521b\u5efa\u7ec4\u4ef6\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u60a8\u5df2\u5c06 <code>driver</code> \u76ee\u5f55\u5408\u5e76\u5230\u9879\u76ee\u4e2d\uff0c\u65b9\u6cd5\u662f\u5c06 <code>driver</code> \u76ee\u5f55\u7684\u8def\u5f84\u6dfb\u52a0\u5230\u9879\u76ee\u7ea7 <code>CMakeLists.txt</code> \u6587\u4ef6\u4e2d\u7684 <code>EXTRA_COMPONENT_DIRS</code> \u53d8\u91cf\u4e2d\u3002</p> <p>\u5728 VSCode \u4e2d\u6253\u5f00\u9879\u76ee\uff0c\u6253\u5f00\u96c6\u6210\u7ec8\u7aef\uff0c\u8f93\u5165</p> <pre><code>get_idf \n</code></pre> <p>\u6fc0\u6d3b ESP-IDF \u73af\u5883\u3002\u7136\u540e\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a <code>lcd</code> \u7684\u65b0\u7ec4\u4ef6\uff1a</p> <pre><code>idf.py -C driver create-component lcd\n</code></pre> <p>\u4e0a\u9762\u7684\u547d\u4ee4\u610f\u5473\u7740\u5728 <code>driver</code> \u76ee\u5f55\u4e2d\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a <code>lcd</code> \u7684\u65b0\u7ec4\u4ef6\u3002\u6267\u884c\u547d\u4ee4\u540e\uff0c\u60a8\u5c06\u5728 <code>driver</code> \u76ee\u5f55\u4e2d\u770b\u5230\u4e00\u4e2a\u540d\u4e3a <code>lcd</code> \u7684\u65b0\u76ee\u5f55\u3002\u547d\u4ee4\u5c06\u81ea\u52a8\u751f\u6210\u65b0\u7ec4\u4ef6\u7684 <code>CMakeLists.txt</code> \u6587\u4ef6\uff0c\u4ee5\u53ca <code>lcd.h</code> \u548c <code>lcd.c</code> \u6587\u4ef6\u3002</p> <p>\u6216\u8005\uff0c\u60a8\u53ef\u4ee5\u5728 <code>driver</code> \u76ee\u5f55\u4e2d\u624b\u52a8\u521b\u5efa <code>lcd</code> \u76ee\u5f55\uff0c\u7136\u540e\u5728 <code>lcd</code> \u76ee\u5f55\u4e2d\u521b\u5efa <code>CMakeLists.txt</code>\u3001<code>lcd.h</code> \u548c <code>lcd.c</code> \u6587\u4ef6\u3002</p> <p>Note</p> <p>\u672c\u7ae0\u4e2d\u8fd8\u6709\u4e00\u4e2a <code>lcdfont.h</code> \u6587\u4ef6\uff0c\u60a8\u53ef\u4ee5\u5c06\u5176\u653e\u5728 <code>lcd</code> \u7684<code>include</code>\u76ee\u5f55\u4e2d\u3002</p>"},{"location":"zh/DNESP32S3M/ACTUATION/LCD/integration/#_4","title":"\u66ff\u6362\u4ee3\u7801","text":"<p>\u7ec4\u4ef6\u5c42\u9762</p> <p>\u5c06\u672c\u8282\u4e2d\u4ee3\u7801\u5206\u522b\u66ff\u6362\u5230\u7ec4\u4ef6\u4e0b\u7684<code>CMakelists.txt</code>\u3001<code>lcdfont.h</code>\u3001<code>lcd.h</code>\u548c<code>lcd.c</code>\u6587\u4ef6\u4e2d\u3002</p> <p>\u9879\u76ee\u5c42\u9762</p> <p>\u5c06<code>main.c</code>\u4e2d\u7684\u4ee3\u7801\u66ff\u6362\u4e3a\u76f8\u5e94\u7684\u4ee3\u7801\u3002\u9879\u76ee\u5c42\u9762\u7684<code>CMakeLists.txt</code>\u6587\u4ef6\u65e0\u9700\u66f4\u6539\u3002</p>"},{"location":"zh/DNESP32S3M/ACTUATION/LCD/integration/#_5","title":"\u7f16\u8bd1\u70e7\u5f55","text":"<p>\u5728 VSCode \u4e2d\u6253\u5f00\u9879\u76ee\uff0c\u6253\u5f00\u96c6\u6210\u7ec8\u7aef\uff0c\u8f93\u5165</p> <p><pre><code>idf.py build flash monitor\n</code></pre> \u6b64\u65f6\uff0c\u60a8\u5c06\u770b\u5230LCD\u5c4f\u5e55\u88ab\u70b9\u4eae\u5e76\u663e\u793a\u5185\u5bb9\u3002</p>"},{"location":"zh/DNESP32S3M/ACTUATION/LCD/lcd/","title":"\u6db2\u6676\u663e\u793a\u5c4f","text":"<p>ESP32S3 \u6700\u5c0f\u7cfb\u7edf\u677f\u677f\u8f7d 0.96 \u82f1\u5bf8\u9ad8\u6e05 IPS LCD \u663e\u793a\u5c4f\uff0c\u5176\u5206\u8fa8\u7387\u4e3a 160x80\uff0c\u652f\u6301 16 \u4f4d\u771f\u5f69\u8272\u663e\u793a\u3002\u8be5\u663e\u793a\u5c4f\u91c7\u7528 ST7735S \u4f5c\u4e3a\u9a71\u52a8\u82af\u7247\uff0c\u5176\u5185\u7f6e RAM \u65e0\u9700\u5916\u90e8\u9a71\u52a8\u5668\u6216\u5b58\u50a8\u5668\u3002ESP32S3 \u82af\u7247\u4ec5\u9700\u901a\u8fc7 SPI \u63a5\u53e3\u5373\u53ef\u8f7b\u677e\u9a71\u52a8\u6b64\u663e\u793a\u5c4f\u30020.96 \u5bf8 LCD \u5c4f\u5728\u56db\u7ebf SPI \u901a\u8baf\u6a21\u5f0f\u4e0b\uff0c\u4ec5\u9700\u56db\u6839\u4fe1\u53f7\u7ebf\uff08CS\u3001SCL\u3001SDA\u3001RS\uff08DC\uff09\uff09\u5c31\u80fd\u591f\u9a71\u52a8\u3002</p> <p></p> <p></p> <p>\u8be5\u5c4f\u5e55\u901a\u8fc7 13 \u4e2a\u5f15\u811a\u4e0e PCB \u7535\u8def\u8fde\u63a5\u3002\u5f15\u811a\u8be6\u7ec6\u63cf\u8ff0\uff0c\u5982\u4e0b\u8868\u6240\u793a\u3002</p> \u5e8f\u53f7 \u540d\u79f0 \u8bf4\u660e 1 TP0 NC 2 TP1 NC 3 SDA SPI \u901a\u8baf MOSI \u4fe1\u53f7\u7ebf 4 SCL SPI \u901a\u8baf SCK \u4fe1\u53f7\u7ebf 5 RS \u5199\u547d\u4ee4/\u6570\u636e\u4fe1\u53f7\u7ebf\uff08\u4f4e\u7535\u5e73\uff1a\u5199\u547d\u4ee4\uff1b\u9ad8\u7535\u5e73\uff1a\u5199\u6570\u636e\uff09 6 RES \u786c\u4ef6\u590d\u4f4d\u5f15\u811a\uff08\u4f4e\u7535\u5e73\u6709\u6548\uff09 7 CS SPI \u901a\u8baf\u7247\u9009\u4fe1\u53f7\uff08\u4f4e\u7535\u5e73\u6709\u6548\uff09 8 GND \u7535\u6e90\u5730 9 NC NC 10 VCC 3.3V \u7535\u6e90\u4f9b\u7535 11 LEDK LCD \u80cc\u5149\u63a7\u5236\u5f15\u811a\uff08\u9634\u6781\uff09 12 LEDA LCD \u80cc\u5149\u63a7\u5236\u5f15\u811a\uff08\u9633\u6781\uff09 13 GND \u7535\u6e90\u5730 <p> </p> <p>\u4ece\u4e0a\u56fe\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c0.96 \u5bf8 LCD \u6a21\u5757\u56db\u7ebf SPI \u7684\u5199\u5468\u671f\u662f\u975e\u5e38\u5feb\u7684\uff08TSCYCW = 66ns\uff09\uff0c\u800c\u8bfb\u5468\u671f\u5c31\u76f8\u5bf9\u6162\u4e86\u5f88\u591a\uff08TSCYCR = 150ns\uff09\u3002</p> <p>0.96 \u5bf8 LCD \u5c4f\u91c7\u7528 ST7735S \u4f5c\u4e3a LCD \u9a71\u52a8\u5668\uff0cLCD \u7684\u663e\u5b58\u53ef\u76f4\u63a5\u5b58\u653e\u5728 ST7735S \u7684\u7247\u4e0aRAM\u4e2d\uff0cST7735S\u7684\u7247\u4e0aRAM\u6709132*162*18-bits\uff0c\u5e76\u4e14ST7735S\u4f1a\u5728\u6ca1\u6709\u5916\u90e8\u65f6\u949f\u7684\u60c5\u51b5\u4e0b\uff0c\u81ea\u52a8\u5c06\u5176\u7247\u4e0a RAM \u7684\u6570\u636e\u663e\u793a\u81f3 LCD \u4e0a\uff0c\u4ee5\u6700\u5c0f\u5316\u529f\u8017\u3002</p> <p>\u5728\u6bcf\u6b21\u521d\u59cb\u5316\u663e\u793a\u6a21\u5757\u4e4b\u524d\uff0c\u5fc5\u987b\u5148\u901a\u8fc7 RST \u5f15\u811a\u5bf9\u663e\u793a\u6a21\u5757\u8fdb\u884c\u786c\u4ef6\u590d\u4f4d\uff0c\u786c\u4ef6\u590d\u4f4d\u8981\u6c42 RST \u81f3\u5c11\u88ab\u62c9\u4f4e 10 \u5fae\u79d2\uff0c\u62c9\u9ad8 RST \u7ed3\u675f\u786c\u4ef6\u590d\u4f4d\u540e\uff0c\u987b\u5ef6\u65f6 120 \u6beb\u79d2\u7b49\u5f85\u590d\u4f4d\u5b8c\u6210\u540e\uff0c\u624d\u80fd\u591f\u5f80\u663e\u793a\u6a21\u5757\u4f20\u8f93\u6570\u636e\u3002</p> <p>LEDK \u5f15\u811a\u7528\u4e8e\u63a7\u5236\u663e\u793a\u6a21\u5757\u7684 LCD \u80cc\u5149\uff0c\u8be5\u5f15\u811a\u81ea\u5e26\u4e0b\u62c9\u7535\u963b\uff0c\u5f53 LEDK \u5f15\u811a\u88ab\u62c9\u9ad8\u6216\u60ac\u7a7a\u65f6\uff0c0.96 \u5bf8 LCD \u6a21\u5757\u7684 LCD \u80cc\u5149\u90fd\u5904\u4e8e\u5173\u95ed\u72b6\u6001\uff0c\u5f53 LEDK \u5f15\u811a\u88ab\u62c9\u4f4e\u65f6\uff0c\u663e\u793a\u6a21\u5757\u7684LCD \u80cc\u5149\u624d\u4f1a\u70b9\u4eae\u3002</p> <p>ST7735S \u6700\u9ad8\u652f\u6301 18 \u4f4d\u8272\u6df1\uff08262K \u8272\uff09\uff0c\u4e0d\u8fc7\u4e00\u822c\u4f7f\u7528 16 \u4f4d\u989c\u8272\u6df1\u5ea6\uff0865K \u8272\uff09\uff0cRGB565\u683c\u5f0f\uff0c\u8fd9\u6837\u53ef\u4ee5\u5728 16 \u4f4d\u8272\u6df1\u4e0b\u8fbe\u5230\u6700\u5feb\u7684\u901f\u5ea6\u3002\u5728 16 \u4f4d\u8272\u6df1\u6a21\u5f0f\u4e0b\uff0cST7789V \u91c7\u7528 RGB565\u683c\u5f0f\u4f20\u8f93\u3001\u5b58\u50a8\u989c\u8272\u6570\u636e\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002</p> <p>\u4e0a\u56fe\u662f\u4e00\u4e2a\u4f20\u8f93\u50cf\u7d20\u6570\u636e\u7684\u65f6\u5e8f\u8fc7\u7a0b\uff0cD/CX \u7ebf\u9700\u8981\u62c9\u9ad8\uff0c\u8868\u793a\u4f20\u8f93\u7684\u662f\u6570\u636e\u3002\u4e00\u4e2a\u50cf\u7d20\u7684\u989c\u8272\u6570\u636e\u9700\u8981\u4f7f\u7528 16\u6bd4\u7279\u6765\u4f20\u8f93\uff0c\u8fd9 16 \u6bd4\u7279\u6570\u636e\u4e2d\uff0c\u9ad8 5 \u6bd4\u7279\u7528\u4e8e\u8868\u793a\u7ea2\u8272\uff0c\u4f4e 5 \u6bd4\u7279\u7528\u4e8e\u8868\u793a\u84dd\u8272\uff0c\u4e2d\u95f4\u7684 6 \u6bd4\u7279\u7528\u4e8e\u8868\u793a\u7eff\u8272\u3002\u6570\u636e\u7684\u6570\u503c\u8d8a\u5927\uff0c\u5bf9\u5e94\u8868\u793a\u7684\u989c\u8272\u5c31\u8d8a\u6df1\u3002</p> <p>ST7735S\u652f\u6301\u8fde\u7eed\u8bfb\u5199RAM\u4e2d\u5b58\u653e\u7684LCD\u4e0a\u989c\u8272\u5bf9\u5e94\u7684\u6570\u636e\uff0c\u5e76\u4e14\u8fde\u7eed\u8bfb\u5199\u7684\u65b9\u5411\uff08LCD\u7684\u626b\u63cf\u65b9\u5411\uff09\u662f\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4 0x36 \u8fdb\u884c\u914d\u7f6e\u7684\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002</p> <p></p> <p>\u4ece\u4e0a\u56fe\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u547d\u4ee4 0x36 \u53ef\u4ee5\u914d\u7f6e 6 \u4e2a\u53c2\u6570\uff0c\u4f46\u5bf9\u4e8e\u914d\u7f6e LCD \u7684\u626b\u63cf\u65b9\u5411\uff0c\u4ec5\u9700\u5173\u5fc3 MY\u3001MX \u548c MV \u8fd9\u4e09\u4e2a\u53c2\u6570\uff0c\u5982\u4e0b\u8868\u6240\u793a\u3002</p> MY MX MY LCD \u626b\u63cf\u65b9\u5411\uff08RAM \u81ea\u589e\u65b9\u5411\uff09 0 0 0 \u4ece\u5de6\u5230\u53f3\uff0c\u4ece\u4e0a\u5230\u4e0b 1 0 0 \u4ece\u5de6\u5230\u53f3\uff0c\u4ece\u4e0b\u5230\u4e0a 0 1 0 \u4ece\u53f3\u5230\u5de6\uff0c\u4ece\u4e0a\u5230\u4e0b 1 1 0 \u4ece\u53f3\u5230\u5de6\uff0c\u4ece\u4e0b\u5230\u4e0a 0 0 1 \u4ece\u4e0a\u5230\u4e0b\uff0c\u4ece\u5de6\u5230\u53f3 1 0 1 \u4ece\u4e0b\u5230\u4e0a\uff0c\u4ece\u5de6\u5230\u53f3 0 1 1 \u4ece\u4e0a\u5230\u4e0b\uff0c\u4ece\u53f3\u5230\u5de6 1 1 1 \u4ece\u4e0b\u5230\u4e0a\uff0c\u4ece\u53f3\u5230\u5de6 <p>\u8fd9\u6837\uff0c\u6211\u4eec\u5728\u4f7f\u7528 ST7735S \u663e\u793a\u5185\u5bb9\u7684\u65f6\u5019\uff0c\u5c31\u6709\u5f88\u5927\u7075\u6d3b\u6027\u4e86\uff0c\u6bd4\u5982\u663e\u793a BMP \u56fe\u7247\uff0cBMP\u89e3\u7801\u6570\u636e\uff0c\u5c31\u662f\u4ece\u56fe\u7247\u7684\u5de6\u4e0b\u89d2\u5f00\u59cb\uff0c\u6162\u6162\u663e\u793a\u5230\u53f3\u4e0a\u89d2\uff0c\u5982\u679c\u8bbe\u7f6eLCD\u626b\u63cf\u65b9\u5411\u4e3a\u4ece\u5de6\u5230\u53f3\uff0c\u4ece\u4e0b\u5230\u4e0a\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u8bbe\u7f6e\u4e00\u6b21\u5750\u6807\uff0c\u7136\u540e\u5c31\u4e0d\u505c\u7684\u5f80 LCD \u586b\u5145\u989c\u8272\u6570\u636e\u5373\u53ef\uff0c\u8fd9 \u6837\u53ef\u4ee5\u5927\u5927\u63d0\u9ad8\u663e\u793a\u901f\u5ea6\u3002</p> <p>\u5728\u5f80 ST7735S \u5199\u5165\u989c\u8272\u6570\u636e\u524d\uff0c\u8fd8\u9700\u8981\u8bbe\u7f6e\u5730\u5740\uff0c\u4ee5\u786e\u5b9a\u968f\u540e\u5199\u5165\u7684\u989c\u8272\u6570\u636e\u5bf9\u5e94 LCD \u4e0a\u7684\u54ea\u4e00\u4e2a\u50cf\u7d20\uff0c\u901a\u8fc7\u547d\u4ee4 0x2A \u548c\u547d\u4ee4 0x2B \u53ef\u4ee5\u5206\u522b\u8bbe\u7f6e ST7735S \u663e\u793a\u989c\u8272\u6570\u636e\u7684\u5217\u5730\u5740\u548c\u884c\u5730\u5740\uff0c\u547d\u4ee4 0x2A \u7684\u63cf\u8ff0\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002</p> <p></p> <p>\u547d\u4ee4 0x2B \u7684\u63cf\u8ff0\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002</p> <p></p> <p>\u4ee5\u9ed8\u8ba4\u7684 LCD \u626b\u63cf\u65b9\u5f0f\uff08\u4ece\u5de6\u5230\u53f3\uff0c\u4ece\u4e0a\u5230\u4e0b\uff09\u4e3a\u4f8b\uff0c\u547d\u4ee4 0x2A \u7684\u53c2\u6570 XS \u548c XE \u548c\u547d\u4ee40x2B \u7684\u53c2\u6570 YS \u548c YE \u5c31\u5728 LCD \u4e0a\u786e\u5b9a\u4e86\u4e00\u4e2a\u533a\u57df\uff0c\u5728\u8fde\u8bfb\u8bfb\u5199\u989c\u8272\u6570\u636e\u65f6\uff0cST7735S \u5c31\u4f1a\u6309\u7167\u4ece\u5de6\u5230\u53f3\uff0c\u4ece\u4e0a\u5230\u4e0b\u7684\u626b\u63cf\u65b9\u5f0f\u8bfb\u5199\u8bbe\u4e2a\u533a\u57df\u7684\u989c\u8272\u6570\u636e</p>"},{"location":"zh/DNESP32S3M/ACTUATION/LCD/lcd/#_2","title":"\u4ee3\u7801","text":""},{"location":"zh/DNESP32S3M/ACTUATION/LCD/note/","title":"\u6db2\u6676\u663e\u793a\u5c4f","text":"<p>ESP32S3 \u6700\u5c0f\u7cfb\u7edf\u677f\u677f\u8f7d 0.96 \u82f1\u5bf8\u9ad8\u6e05 IPS LCD \u663e\u793a\u5c4f\uff0c\u5176\u5206\u8fa8\u7387\u4e3a 160x80\uff0c\u652f\u6301 16 \u4f4d\u771f\u5f69\u8272\u663e\u793a\u3002\u8be5\u663e\u793a\u5c4f\u91c7\u7528 ST7735S \u4f5c\u4e3a\u9a71\u52a8\u82af\u7247\uff0c\u5176\u5185\u7f6e RAM \u65e0\u9700\u5916\u90e8\u9a71\u52a8\u5668\u6216\u5b58\u50a8\u5668\u3002ESP32S3 \u82af\u7247\u4ec5\u9700\u901a\u8fc7 SPI \u63a5\u53e3\u5373\u53ef\u8f7b\u677e\u9a71\u52a8\u6b64\u663e\u793a\u5c4f\u30020.96 \u5bf8 LCD \u5c4f\u5728\u56db\u7ebf SPI \u901a\u8baf\u6a21\u5f0f\u4e0b\uff0c\u4ec5\u9700\u56db\u6839\u4fe1\u53f7\u7ebf\uff08CS\u3001SCL\u3001SDA\u3001RS\uff08DC\uff09\uff09\u5c31\u80fd\u591f\u9a71\u52a8\u3002</p> <p></p> <p></p> <p>\u8be5\u5c4f\u5e55\u901a\u8fc7 13 \u4e2a\u5f15\u811a\u4e0e PCB \u7535\u8def\u8fde\u63a5\u3002\u5f15\u811a\u8be6\u7ec6\u63cf\u8ff0\uff0c\u5982\u4e0b\u8868\u6240\u793a\u3002</p> \u5e8f\u53f7 \u540d\u79f0 \u8bf4\u660e 1 TP0 NC 2 TP1 NC 3 SDA SPI \u901a\u8baf MOSI \u4fe1\u53f7\u7ebf 4 SCL SPI \u901a\u8baf SCK \u4fe1\u53f7\u7ebf 5 RS \u5199\u547d\u4ee4/\u6570\u636e\u4fe1\u53f7\u7ebf\uff08\u4f4e\u7535\u5e73\uff1a\u5199\u547d\u4ee4\uff1b\u9ad8\u7535\u5e73\uff1a\u5199\u6570\u636e\uff09 6 RES \u786c\u4ef6\u590d\u4f4d\u5f15\u811a\uff08\u4f4e\u7535\u5e73\u6709\u6548\uff09 7 CS SPI \u901a\u8baf\u7247\u9009\u4fe1\u53f7\uff08\u4f4e\u7535\u5e73\u6709\u6548\uff09 8 GND \u7535\u6e90\u5730 9 NC NC 10 VCC 3.3V \u7535\u6e90\u4f9b\u7535 11 LEDK LCD \u80cc\u5149\u63a7\u5236\u5f15\u811a\uff08\u9634\u6781\uff09 12 LEDA LCD \u80cc\u5149\u63a7\u5236\u5f15\u811a\uff08\u9633\u6781\uff09 13 GND \u7535\u6e90\u5730 <p> </p> <p>\u4ece\u4e0a\u56fe\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c0.96 \u5bf8 LCD \u6a21\u5757\u56db\u7ebf SPI \u7684\u5199\u5468\u671f\u662f\u975e\u5e38\u5feb\u7684\uff08TSCYCW = 66ns\uff09\uff0c\u800c\u8bfb\u5468\u671f\u5c31\u76f8\u5bf9\u6162\u4e86\u5f88\u591a\uff08TSCYCR = 150ns\uff09\u3002</p> <p>0.96 \u5bf8 LCD \u5c4f\u91c7\u7528 ST7735S \u4f5c\u4e3a LCD \u9a71\u52a8\u5668\uff0cLCD \u7684\u663e\u5b58\u53ef\u76f4\u63a5\u5b58\u653e\u5728 ST7735S \u7684\u7247\u4e0aRAM\u4e2d\uff0cST7735S\u7684\u7247\u4e0aRAM\u6709132*162*18-bits\uff0c\u5e76\u4e14ST7735S\u4f1a\u5728\u6ca1\u6709\u5916\u90e8\u65f6\u949f\u7684\u60c5\u51b5\u4e0b\uff0c\u81ea\u52a8\u5c06\u5176\u7247\u4e0a RAM \u7684\u6570\u636e\u663e\u793a\u81f3 LCD \u4e0a\uff0c\u4ee5\u6700\u5c0f\u5316\u529f\u8017\u3002</p> <p>\u5728\u6bcf\u6b21\u521d\u59cb\u5316\u663e\u793a\u6a21\u5757\u4e4b\u524d\uff0c\u5fc5\u987b\u5148\u901a\u8fc7 RST \u5f15\u811a\u5bf9\u663e\u793a\u6a21\u5757\u8fdb\u884c\u786c\u4ef6\u590d\u4f4d\uff0c\u786c\u4ef6\u590d\u4f4d\u8981\u6c42 RST \u81f3\u5c11\u88ab\u62c9\u4f4e 10 \u5fae\u79d2\uff0c\u62c9\u9ad8 RST \u7ed3\u675f\u786c\u4ef6\u590d\u4f4d\u540e\uff0c\u987b\u5ef6\u65f6 120 \u6beb\u79d2\u7b49\u5f85\u590d\u4f4d\u5b8c\u6210\u540e\uff0c\u624d\u80fd\u591f\u5f80\u663e\u793a\u6a21\u5757\u4f20\u8f93\u6570\u636e\u3002</p> <p>LEDK \u5f15\u811a\u7528\u4e8e\u63a7\u5236\u663e\u793a\u6a21\u5757\u7684 LCD \u80cc\u5149\uff0c\u8be5\u5f15\u811a\u81ea\u5e26\u4e0b\u62c9\u7535\u963b\uff0c\u5f53 LEDK \u5f15\u811a\u88ab\u62c9\u9ad8\u6216\u60ac\u7a7a\u65f6\uff0c0.96 \u5bf8 LCD \u6a21\u5757\u7684 LCD \u80cc\u5149\u90fd\u5904\u4e8e\u5173\u95ed\u72b6\u6001\uff0c\u5f53 LEDK \u5f15\u811a\u88ab\u62c9\u4f4e\u65f6\uff0c\u663e\u793a\u6a21\u5757\u7684LCD \u80cc\u5149\u624d\u4f1a\u70b9\u4eae\u3002</p> <p>ST7735S \u6700\u9ad8\u652f\u6301 18 \u4f4d\u8272\u6df1\uff08262K \u8272\uff09\uff0c\u4e0d\u8fc7\u4e00\u822c\u4f7f\u7528 16 \u4f4d\u989c\u8272\u6df1\u5ea6\uff0865K \u8272\uff09\uff0cRGB565\u683c\u5f0f\uff0c\u8fd9\u6837\u53ef\u4ee5\u5728 16 \u4f4d\u8272\u6df1\u4e0b\u8fbe\u5230\u6700\u5feb\u7684\u901f\u5ea6\u3002\u5728 16 \u4f4d\u8272\u6df1\u6a21\u5f0f\u4e0b\uff0cST7789V \u91c7\u7528 RGB565\u683c\u5f0f\u4f20\u8f93\u3001\u5b58\u50a8\u989c\u8272\u6570\u636e\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002</p> <p>\u4e0a\u56fe\u662f\u4e00\u4e2a\u4f20\u8f93\u50cf\u7d20\u6570\u636e\u7684\u65f6\u5e8f\u8fc7\u7a0b\uff0cD/CX \u7ebf\u9700\u8981\u62c9\u9ad8\uff0c\u8868\u793a\u4f20\u8f93\u7684\u662f\u6570\u636e\u3002\u4e00\u4e2a\u50cf\u7d20\u7684\u989c\u8272\u6570\u636e\u9700\u8981\u4f7f\u7528 16\u6bd4\u7279\u6765\u4f20\u8f93\uff0c\u8fd9 16 \u6bd4\u7279\u6570\u636e\u4e2d\uff0c\u9ad8 5 \u6bd4\u7279\u7528\u4e8e\u8868\u793a\u7ea2\u8272\uff0c\u4f4e 5 \u6bd4\u7279\u7528\u4e8e\u8868\u793a\u84dd\u8272\uff0c\u4e2d\u95f4\u7684 6 \u6bd4\u7279\u7528\u4e8e\u8868\u793a\u7eff\u8272\u3002\u6570\u636e\u7684\u6570\u503c\u8d8a\u5927\uff0c\u5bf9\u5e94\u8868\u793a\u7684\u989c\u8272\u5c31\u8d8a\u6df1\u3002</p> <p>ST7735S\u652f\u6301\u8fde\u7eed\u8bfb\u5199RAM\u4e2d\u5b58\u653e\u7684LCD\u4e0a\u989c\u8272\u5bf9\u5e94\u7684\u6570\u636e\uff0c\u5e76\u4e14\u8fde\u7eed\u8bfb\u5199\u7684\u65b9\u5411\uff08LCD\u7684\u626b\u63cf\u65b9\u5411\uff09\u662f\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4 0x36 \u8fdb\u884c\u914d\u7f6e\u7684\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002</p> <p></p> <p>\u4ece\u4e0a\u56fe\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u547d\u4ee4 0x36 \u53ef\u4ee5\u914d\u7f6e 6 \u4e2a\u53c2\u6570\uff0c\u4f46\u5bf9\u4e8e\u914d\u7f6e LCD \u7684\u626b\u63cf\u65b9\u5411\uff0c\u4ec5\u9700\u5173\u5fc3 MY\u3001MX \u548c MV \u8fd9\u4e09\u4e2a\u53c2\u6570\uff0c\u5982\u4e0b\u8868\u6240\u793a\u3002</p> MY MX MY LCD \u626b\u63cf\u65b9\u5411\uff08RAM \u81ea\u589e\u65b9\u5411\uff09 0 0 0 \u4ece\u5de6\u5230\u53f3\uff0c\u4ece\u4e0a\u5230\u4e0b 1 0 0 \u4ece\u5de6\u5230\u53f3\uff0c\u4ece\u4e0b\u5230\u4e0a 0 1 0 \u4ece\u53f3\u5230\u5de6\uff0c\u4ece\u4e0a\u5230\u4e0b 1 1 0 \u4ece\u53f3\u5230\u5de6\uff0c\u4ece\u4e0b\u5230\u4e0a 0 0 1 \u4ece\u4e0a\u5230\u4e0b\uff0c\u4ece\u5de6\u5230\u53f3 1 0 1 \u4ece\u4e0b\u5230\u4e0a\uff0c\u4ece\u5de6\u5230\u53f3 0 1 1 \u4ece\u4e0a\u5230\u4e0b\uff0c\u4ece\u53f3\u5230\u5de6 1 1 1 \u4ece\u4e0b\u5230\u4e0a\uff0c\u4ece\u53f3\u5230\u5de6 <p>\u8fd9\u6837\uff0c\u6211\u4eec\u5728\u4f7f\u7528 ST7735S \u663e\u793a\u5185\u5bb9\u7684\u65f6\u5019\uff0c\u5c31\u6709\u5f88\u5927\u7075\u6d3b\u6027\u4e86\uff0c\u6bd4\u5982\u663e\u793a BMP \u56fe\u7247\uff0cBMP\u89e3\u7801\u6570\u636e\uff0c\u5c31\u662f\u4ece\u56fe\u7247\u7684\u5de6\u4e0b\u89d2\u5f00\u59cb\uff0c\u6162\u6162\u663e\u793a\u5230\u53f3\u4e0a\u89d2\uff0c\u5982\u679c\u8bbe\u7f6eLCD\u626b\u63cf\u65b9\u5411\u4e3a\u4ece\u5de6\u5230\u53f3\uff0c\u4ece\u4e0b\u5230\u4e0a\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u8bbe\u7f6e\u4e00\u6b21\u5750\u6807\uff0c\u7136\u540e\u5c31\u4e0d\u505c\u7684\u5f80 LCD \u586b\u5145\u989c\u8272\u6570\u636e\u5373\u53ef\uff0c\u8fd9 \u6837\u53ef\u4ee5\u5927\u5927\u63d0\u9ad8\u663e\u793a\u901f\u5ea6\u3002</p> <p>\u5728\u5f80 ST7735S \u5199\u5165\u989c\u8272\u6570\u636e\u524d\uff0c\u8fd8\u9700\u8981\u8bbe\u7f6e\u5730\u5740\uff0c\u4ee5\u786e\u5b9a\u968f\u540e\u5199\u5165\u7684\u989c\u8272\u6570\u636e\u5bf9\u5e94 LCD \u4e0a\u7684\u54ea\u4e00\u4e2a\u50cf\u7d20\uff0c\u901a\u8fc7\u547d\u4ee4 0x2A \u548c\u547d\u4ee4 0x2B \u53ef\u4ee5\u5206\u522b\u8bbe\u7f6e ST7735S \u663e\u793a\u989c\u8272\u6570\u636e\u7684\u5217\u5730\u5740\u548c\u884c\u5730\u5740\uff0c\u547d\u4ee4 0x2A \u7684\u63cf\u8ff0\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002</p> <p></p> <p>\u547d\u4ee4 0x2B \u7684\u63cf\u8ff0\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002</p> <p></p> <p>\u4ee5\u9ed8\u8ba4\u7684 LCD \u626b\u63cf\u65b9\u5f0f\uff08\u4ece\u5de6\u5230\u53f3\uff0c\u4ece\u4e0a\u5230\u4e0b\uff09\u4e3a\u4f8b\uff0c\u547d\u4ee4 0x2A \u7684\u53c2\u6570 XS \u548c XE \u548c\u547d\u4ee40x2B \u7684\u53c2\u6570 YS \u548c YE \u5c31\u5728 LCD \u4e0a\u786e\u5b9a\u4e86\u4e00\u4e2a\u533a\u57df\uff0c\u5728\u8fde\u8bfb\u8bfb\u5199\u989c\u8272\u6570\u636e\u65f6\uff0cST7735S \u5c31\u4f1a\u6309\u7167\u4ece\u5de6\u5230\u53f3\uff0c\u4ece\u4e0a\u5230\u4e0b\u7684\u626b\u63cf\u65b9\u5f0f\u8bfb\u5199\u8bbe\u4e2a\u533a\u57df\u7684\u989c\u8272\u6570\u636e</p>"},{"location":"zh/DNESP32S3M/ACTUATION/LCD/note/#_2","title":"\u4f9d\u8d56\u5173\u7cfb","text":""},{"location":"zh/DNESP32S3M/ACTUATION/LCD/note/#_3","title":"\u5173\u952e\u51fd\u6570","text":"<pre><code>/* Function declarations */\nvoid lcd_init(void);                                                                                                  /* Initialize the LCD */\nvoid lcd_clear(uint16_t color);                                                                                       /* Clear the screen */\nvoid lcd_scan_dir(uint8_t dir);                                                                                       /* Set the LCD auto scan direction */\nvoid lcd_write_data(const uint8_t *data, int len);                                                                    /* Write data to the LCD */\nvoid lcd_write_data16(uint16_t data);                                                                                 /* Write 16-bit data to the LCD */\nvoid lcd_set_cursor(uint16_t xpos, uint16_t ypos);                                                                    /* Set the cursor position */\nvoid lcd_set_window(uint16_t xstar, uint16_t ystar, uint16_t xend, uint16_t yend);                                    /* Set the display window size */\nvoid lcd_fill(uint16_t sx, uint16_t sy, uint16_t ex, uint16_t ey, uint16_t color);                                    /* Fill a specific area with a single color */\nvoid lcd_show_num(uint16_t x, uint16_t y, uint32_t num, uint8_t len, uint8_t size, uint16_t color);                   /* Display a number with len digits */\nvoid lcd_show_xnum(uint16_t x, uint16_t y, uint32_t num, uint8_t len, uint8_t size, uint8_t mode, uint16_t color);    /* Display an extended number with len digits */\nvoid lcd_show_string(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t size, char *p, uint16_t color); /* Display a string */\nvoid lcd_draw_rectangle(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color);                          /* Draw a rectangle */\nvoid lcd_draw_hline(uint16_t x, uint16_t y, uint16_t len, uint16_t color);                                            /* Draw a horizontal line */\nvoid lcd_draw_line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);                               /* Draw a straight or slanted line */\nvoid lcd_draw_pixel(uint16_t x, uint16_t y, uint16_t color);                                                          /* Draw a pixel */\nvoid lcd_show_char(uint16_t x, uint16_t y, uint8_t chr, uint8_t size, uint8_t mode, uint16_t color);                  /* Display a character at a specified position */\n</code></pre>"},{"location":"zh/DNESP32S3M/ACTUATION/LED/code/","title":"LED \u4ee3\u7801","text":""},{"location":"zh/DNESP32S3M/ACTUATION/LED/code/#_1","title":"\u7ec4\u4ef6\u67b6\u6784","text":"<pre><code>- driver\n    - led\n        - include\n            - led.h\n        - led.c\n        - CMakeLists.txt\n</code></pre>"},{"location":"zh/DNESP32S3M/ACTUATION/LED/code/#driverledcmakeliststxt","title":"driver/led/CMakeLists.txt","text":"<pre><code>set(src_dirs\n    .\n)\n\nset(include_dirs\n    include\n)\n\nset(requires\n    driver\n)\n\nidf_component_register(SRC_DIRS ${src_dirs} INCLUDE_DIRS ${include_dirs} REQUIRES ${requires})\n</code></pre> <p>Note</p> <p>\u6ce8\u610f\uff0c\u5728\u9a71\u52a8\u7a0b\u5e8f\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 ESP-IDF \u5185\u7f6e\u7684 <code>driver</code> \u5e93\u4e2d\u7684 gpio\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u5728 <code>CMakeLists.txt</code> \u6587\u4ef6\u7684 <code>REQUIRES</code> \u5b57\u6bb5\u4e2d\u6307\u5b9a\u6b64\u4f9d\u8d56\u9879\u3002</p>"},{"location":"zh/DNESP32S3M/ACTUATION/LED/integration/","title":"\u96c6\u6210","text":""},{"location":"zh/DNESP32S3M/ACTUATION/LED/integration/#_2","title":"\u4ecb\u7ecd","text":"<p>Note</p> <p>\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u5982\u4f55\u5c06 LED \u9a71\u52a8\u96c6\u6210\u5230\u9879\u76ee\u4e2d\u3002</p>"},{"location":"zh/DNESP32S3M/ACTUATION/LED/integration/#_3","title":"\u521b\u5efa\u65b0\u7ec4\u4ef6","text":"<p>Warning</p> <p>\u5728 <code>driver</code> \u76ee\u5f55\u4e2d\u521b\u5efa\u7ec4\u4ef6\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u60a8\u5df2\u5c06 <code>driver</code> \u76ee\u5f55\u5408\u5e76\u5230\u9879\u76ee\u4e2d\uff0c\u65b9\u6cd5\u662f\u5c06 <code>driver</code> \u76ee\u5f55\u7684\u8def\u5f84\u6dfb\u52a0\u5230\u9879\u76ee\u7ea7 <code>CMakeLists.txt</code> \u6587\u4ef6\u4e2d\u7684 <code>EXTRA_COMPONENT_DIRS</code> \u53d8\u91cf\u4e2d\u3002</p> <p>\u5728 VSCode \u4e2d\u6253\u5f00\u9879\u76ee\uff0c\u6253\u5f00\u96c6\u6210\u7ec8\u7aef\uff0c\u8f93\u5165</p> <pre><code>get_idf \n</code></pre> <p>\u6fc0\u6d3b ESP-IDF \u73af\u5883\u3002\u7136\u540e\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a <code>led</code> \u7684\u65b0\u7ec4\u4ef6\uff1a</p> <pre><code>idf.py -C driver create-component led\n</code></pre> <p>\u4e0a\u9762\u7684\u547d\u4ee4\u610f\u5473\u7740\u5728 <code>driver</code> \u76ee\u5f55\u4e2d\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a <code>led</code> \u7684\u65b0\u7ec4\u4ef6\u3002\u6267\u884c\u547d\u4ee4\u540e\uff0c\u60a8\u5c06\u5728 <code>driver</code> \u76ee\u5f55\u4e2d\u770b\u5230\u4e00\u4e2a\u540d\u4e3a <code>led</code> \u7684\u65b0\u76ee\u5f55\u3002\u547d\u4ee4\u5c06\u81ea\u52a8\u751f\u6210\u65b0\u7ec4\u4ef6\u7684 <code>CMakeLists.txt</code> \u6587\u4ef6\uff0c\u4ee5\u53ca <code>led.h</code> \u548c <code>led.c</code> \u6587\u4ef6\u3002</p> <p>\u6216\u8005\uff0c\u60a8\u53ef\u4ee5\u5728 <code>driver</code> \u76ee\u5f55\u4e2d\u624b\u52a8\u521b\u5efa <code>led</code> \u76ee\u5f55\uff0c\u7136\u540e\u5728 <code>led</code> \u76ee\u5f55\u4e2d\u521b\u5efa <code>CMakeLists.txt</code>\u3001<code>led.h</code> \u548c <code>led.c</code> \u6587\u4ef6\u3002</p>"},{"location":"zh/DNESP32S3M/ACTUATION/LED/integration/#_4","title":"\u66ff\u6362\u4ee3\u7801","text":"<p>\u7ec4\u4ef6\u5c42\u9762</p> <p>\u5c06\u672c\u8282\u4e2d\u4ee3\u7801\u5206\u522b\u66ff\u6362\u5230\u7ec4\u4ef6\u4e0b\u7684<code>CMakelists.txt</code>\u3001<code>led.h</code>\u548c<code>led.c</code>\u6587\u4ef6\u4e2d\u3002</p> <p>\u9879\u76ee\u5c42\u9762</p> <p>\u5c06<code>main.c</code>\u4e2d\u7684\u4ee3\u7801\u66ff\u6362\u4e3a\u76f8\u5e94\u7684\u4ee3\u7801\u3002\u9879\u76ee\u5c42\u9762\u7684<code>CMakeLists.txt</code>\u6587\u4ef6\u65e0\u9700\u66f4\u6539\u3002</p>"},{"location":"zh/DNESP32S3M/ACTUATION/LED/integration/#_5","title":"\u7f16\u8bd1\u70e7\u5f55","text":"<p>\u5728 VSCode \u4e2d\u6253\u5f00\u9879\u76ee\uff0c\u6253\u5f00\u96c6\u6210\u7ec8\u7aef\uff0c\u8f93\u5165</p> <pre><code>idf.py build flash monitor\n</code></pre> <p>\u6216\u8005\u70b9\u51fb VSCode \u5de6\u4e0b\u89d2\u7684\u5c0f\u706b\u7130\u56fe\u6807\uff0c\u7f16\u8bd1\u70e7\u5f55\u5e76\u6253\u5f00\u76d1\u89c6\u5668\u3002\u6b64\u65f6\u5e94\u8be5\u53ef\u4ee5\u770b\u5230\u5f00\u53d1\u677f\u4e0a\u7684 LED \u706f\u4eae\u8d77\uff0c\u4e14\u5728\u76d1\u89c6\u5668\u4e2d\u770b\u5230\u76f8\u5e94\u7684\u8f93\u51fa\u3002</p>"},{"location":"zh/DNESP32S3M/ACTUATION/LED/note/","title":"LED \u7b14\u8bb0","text":""},{"location":"zh/DNESP32S3M/ACTUATION/LED/note/#_1","title":"\u4ecb\u7ecd","text":"<p>Note</p> <p>\u672c\u7ae0\u6211\u4eec\u8bb2\u89e3DNESP32S3M\u5f00\u53d1\u677f\u4e0a\u7684\u677f\u8f7dLED\u706f\u7684\u9a71\u52a8\u548c\u63a7\u5236\u3002\u901a\u8fc7\u4fee\u6539GPIO\u5f15\u811a\uff0c\u4ee3\u7801\u4e5f\u53ef\u4ee5\u7528\u4e8e\u5176\u4ed6\u5f00\u53d1\u677f\u3002</p>"},{"location":"zh/DNESP32S3M/ACTUATION/LED/note/#led_1","title":"LED\u706f","text":""},{"location":"zh/DNESP32S3M/ACTUATION/LED/note/#_2","title":"\u7535\u8def\u793a\u610f\u56fe","text":"<p>\u5982\u56fe\u6240\u793a\uff0c\u63a7\u5236LED\u7684GPIO\u662fIO1\u3002</p>"},{"location":"zh/DNESP32S3M/ACTUATION/LED/note/#_3","title":"\u6548\u679c\u56fe","text":""},{"location":"zh/DNESP32S3M/ACTUATION/LED/note/#_4","title":"\u4f9d\u8d56\u5173\u7cfb","text":"<p>Tip</p> <p>\"[ ]\" \u4ee3\u8868\u8be5\u4f9d\u8d56\u6765\u81ea\u4e8eESP-IDF\u5185\u7f6e\u7684\u5e93</p>"},{"location":"zh/DNESP32S3M/ACTUATION/LED/note/#_5","title":"\u5173\u952e\u51fd\u6570","text":"\u51fd\u6570\u539f\u578b \u8bf4\u660e \u793a\u4f8b <code>void led_init(void)</code> \u521d\u59cb\u5316LED <code>led_init();</code> <code>void led(int x)</code> \u63a7\u5236LED <code>led(1);</code> <code>void led_toggle(void)</code> \u5207\u6362LED <code>led_toggle();</code>"},{"location":"zh/DNESP32S3M/COMMUNICATION/communication/","title":"\u901a\u4fe1","text":""},{"location":"zh/DNESP32S3M/MAIN-CONTROL/main-control/","title":"\u4e3b\u63a7","text":""},{"location":"zh/DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/code/","title":"\u6587\u4ef6\u7cfb\u7edf\uff08SPIFFS\uff09\u4ee3\u7801","text":""},{"location":"zh/DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/code/#_1","title":"\u7ec4\u4ef6\u67b6\u6784","text":"<pre><code>- driver\n    - spiffs\n        - include\n            - spiffs.h\n        - spiffs.c\n        - CMakeLists.txt\n</code></pre>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/fs/","title":"\u6587\u4ef6\u7cfb\u7edf (SPIFFS)","text":""},{"location":"zh/DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/fs/#_1","title":"\u4ecb\u7ecd","text":"<p>\u6211\u4eec\u5df2\u7ecf\u4ecb\u7ecd\u8fc7\u5982\u4f55\u9a71\u52a8SD\u5361\uff0c\u4f46\u662f\u5bf9SD\u5361\u7684\u64cd\u4f5c\u90fd\u662f\u76f4\u63a5\u6216\u8005\u5199\u5165\u4e8c\u8fdb\u5236\u6570\u636e\uff0c\u8fd9\u6837\u7684\u64cd\u4f5c\u5bf9\u4e8e\u7528\u6237\u6765\u8bf4\u662f\u4e0d\u53cb\u597d\u7684\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u6587\u4ef6\u7cfb\u7edf\u6765\u7ba1\u7406\u6587\u4ef6\uff0c\u8fd9\u6837\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u6587\u4ef6\u540d\u6765\u64cd\u4f5c\u6587\u4ef6\uff0c\u800c\u4e0d\u662f\u901a\u8fc7\u5730\u5740\u3002</p> <p>SPIFFS \u662f\u4e00\u4e2a\u7528\u4e8e\u5d4c\u5165\u5f0f\u76ee\u6807\u4e0a\u7684 SPI NOR flash \u8bbe\u5907\u7684\u6587\u4ef6\u7cfb\u7edf\uff0c\u5e76\u4e14\u6709\u5982\u4e0b\u7279\u70b9\uff1a</p> <ul> <li>\u5c0f\u76ee\u6807\uff0c\u6ca1\u6709\u5806\u7684\u5c11\u91cf RAM</li> <li>\u53ea\u6709\u5927\u8303\u56f4\u7684\u6570\u636e\u5757\u624d\u80fd\u88ab\u64e6\u9664</li> <li>\u64e6\u9664\u4f1a\u5c06\u5757\u4e2d\u7684\u6240\u6709\u4f4d\u91cd\u7f6e\u4e3a 1</li> <li>\u5199\u64cd\u4f5c\u5c06 1 \u7f6e 0</li> <li>0 \u53ea\u80fd\u88ab\u64e6\u9664\u6210 1</li> <li>\u78e8\u635f\u5747\u8861</li> <li>\u4ee5\u4e0a\u51e0\u70b9\u662f SPIFFS \u7684\u7279\u70b9\uff0c\u4e0b\u9762\u5219\u8bf4\u660e\u4e86 SPIFFS \u5177\u4f53\u80fd\u505a\u4e9b\u4ec0\u4e48\uff1a</li> <li>\u4e13\u95e8\u4e3a\u4f4e ram \u4f7f\u7528\u800c\u8bbe\u8ba1</li> <li>\u4f7f\u7528\u9759\u6001\u5927\u5c0f\u7684 ram \u7f13\u51b2\u533a\uff0c\u4e0e\u6587\u4ef6\u7684\u6570\u91cf\u65e0\u5173</li> <li>\u7c7b\u53ef\u79fb\u690d\u64cd\u4f5c\u7cfb\u7edf\u63a5\u53e3:\u6253\u5f00\u3001\u5173\u95ed\u3001\u8bfb\u3001\u5199\u3001\u67e5\u627e\u3001\u7edf\u8ba1\u7b49</li> <li>\u5b83\u53ef\u4ee5\u5728\u4efb\u4f55 NOR \u95ea\u5b58\u4e0a\u8fd0\u884c\uff0c\u4e0d\u4ec5\u662f SPI \u95ea\u5b58\uff0c\u7406\u8bba\u4e0a\u4e5f\u53ef\u4ee5\u5728\u5fae\u5904\u7406\u5668\u7684\u5d4c\u5165\u5f0f \u95ea\u5b58\u4e0a\u8fd0\u884c</li> <li>\u591a\u4e2a spiffs \u914d\u7f6e\u53ef\u4ee5\u5728\u76f8\u540c\u7684\u76ee\u6807\u4e0a\u8fd0\u884c\u2014\u751a\u81f3\u53ef\u4ee5\u5728\u76f8\u540c\u7684 SPI \u95ea\u5b58\u8bbe\u5907\u4e0a\u8fd0\u884c</li> <li>\u5b9e\u73b0\u9759\u6001\u78e8\u635f\u8c03\u5e73\uff08\u4e5f\u5c31\u662f flash \u7684\u5bff\u547d\u7ef4\u62a4\uff09</li> <li>\u5185\u7f6e\u6587\u4ef6\u7cfb\u7edf\u4e00\u81f4\u6027\u68c0\u67e5</li> <li>\u9ad8\u5ea6\u53ef\u914d\u7f6e\u7684</li> </ul> <p>VFS</p> <p>VFS\u662fESP-IDF\u7684\u4e00\u4e2a\u7ec4\u4ef6\uff0c\u5b83\u662f\u4e00\u4e2a\u865a\u62df\u6587\u4ef6\u7cfb\u7edf\uff0c\u5b83\u53ef\u4ee5\u5c06\u4e0d\u540c\u7684\u6587\u4ef6\u7cfb\u7edf\u7edf\u4e00\u8d77\u6765\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u63a5\u53e3\u6765\u64cd\u4f5c\u4e0d\u540c\u7684\u6587\u4ef6\u7cfb\u7edf\u3002SPIFFS\u5c31\u662fVFS\u7684\u4e00\u4e2a\u5b9e\u73b0\u3002</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/fs/#_2","title":"\u7528\u4f8b","text":"<p>1.\u5728 nor flash \u6307\u5b9a\u533a\u57df\u65b0\u5efa holle.txt \u6587\u4ef6\uff0c\u7136\u540e\u5bf9\u8fd9\u6587\u4ef6\u8fdb\u884c\u8bfb\u5199\u64cd\u4f5c 2.LED \u95ea\u70c1\uff0c\u6307\u793a\u7a0b\u5e8f\u6b63\u5728\u8fd0\u884c</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/fs/#_3","title":"\u6d89\u53ca\u8d44\u6e90","text":"<p>1.LED \u706f LED -IO0 2.0.96 \u5bf8 LCD 3.SPIFFS</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/fs/#spiffs_1","title":"\u6ce8\u518c\u88c5\u8f7dSPIFFS","text":"<p>\u8be5\u51fd\u6570\u4f7f\u7528\u7ed9\u5b9a\u7684\u8def\u5f84\u524d\u7f00\u5c06SPIFFS\u6ce8\u518c\u5e76\u88c5\u8f7d\u5230VFS\uff0c\u5176\u51fd\u6570\u539f\u578b\u5982\u4e0b\uff1a</p> <pre><code>esp_err_t esp_vfs_spiffs_register(const esp_vfs_spiffs_conf_t * conf);\n</code></pre> <p>\u8be5\u51fd\u6570\u5f62\u53c2\u63cf\u8ff0\u5982\u4e0b\uff1a</p> \u53c2\u6570 \u63cf\u8ff0 conf \u6307\u5411 esp_vfs_spiffs_conf_t \u914d\u7f6e\u7ed3\u6784\u7684\u6307\u9488 <p>\u8fd4\u56de\u503c\uff1a</p> \u8fd4\u56de\u503c \u63cf\u8ff0 ESP_OK \u8fd4\u56de\uff1a0\uff0c\u914d\u7f6e\u6210\u529f ESP_ERR_NO_MEM \u5982\u679c\u65e0\u6cd5\u5206\u914d\u5bf9\u8c61 ESP_ERR_INVALID_STATE \u5982\u679c\u5df2\u5b89\u88c5\u6216\u5206\u533a\u5df2\u52a0\u5bc6 ESP_ERR_NOT_FOUND \u5982\u679c\u627e\u4e0d\u5230 SPIFFS \u7684\u5206\u533a ESP_FAIL \u5982\u679c\u88c5\u8f7d\u6216\u683c\u5f0f\u5316\u5931\u8d25 <p>\u8be5\u51fd\u6570\u4f7f\u7528 esp_vfs_spiffs_conf_t \u7c7b\u578b\u7684\u7ed3\u6784\u4f53\u53d8\u91cf\u4f20\u5165\uff0c\u8be5\u7ed3\u6784\u4f53\u7684\u5b9a\u4e49\u5982\u4e0b\u6240\u793a\uff1a</p> \u6210\u5458\u53d8\u91cf \u8bf4\u660e <code>base_path</code> \u4e0e\u6587\u4ef6\u7cfb\u7edf\u5173\u8054\u7684\u6587\u4ef6\u8def\u5f84\u524d\u7f00\u3002 <code>partition_label</code> \u53ef\u9009\uff0c\u8981\u4f7f\u7528\u7684SPIFFS\u5206\u533a\u7684\u6807\u7b7e\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a<code>NULL</code>\uff0c\u5219\u4f7f\u7528\u9ed8\u8ba4\u503c\u3002 <code>max_files</code> \u53ef\u4ee5\u540c\u65f6\u6253\u5f00\u7684\u6700\u5927\u6587\u4ef6\u6570\u3002 <code>format_if_mount_failed</code> \u5982\u679c\u4e3a<code>true</code>\uff0c\u5219\u5728\u6302\u8f7d\u5931\u8d25\u65f6\u5c06\u683c\u5f0f\u5316\u6587\u4ef6\u7cfb\u7edf\u3002"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/fs/#spiffs_2","title":"\u83b7\u53d6SPIFFS\u4fe1\u606f","text":"<p>\u8be5\u51fd\u6570\u7528\u4e8e\u83b7\u53d6 SPIFFS \u7684\u4fe1\u606f\uff0c\u5176\u51fd\u6570\u539f\u578b\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>esp_err_t esp_spiffs_info(const char* partition_label,\n                          size_t *total_bytes,\n                          size_t *used_bytes);\n</code></pre> <p>\u8be5\u51fd\u6570\u5f62\u53c2\u63cf\u8ff0\u5982\u4e0b\uff1a</p> \u53c2\u6570 \u63cf\u8ff0 partition_label SPIFFS \u5206\u533a\u7684\u6807\u7b7e total_bytes \u6307\u5411\u5b58\u50a8\u603b\u5b57\u8282\u6570\u7684\u53d8\u91cf\u7684\u6307\u9488 used_bytes \u6307\u5411\u5b58\u50a8\u5df2\u4f7f\u7528\u5b57\u8282\u6570\u7684\u53d8\u91cf\u7684\u6307\u94a9 <p>\u8fd4\u56de\u503c\uff1a</p> <ul> <li>ESP_OK\uff1a\u6210\u529f</li> <li>\u5176\u4ed6\uff1a\u5931\u8d25</li> </ul>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/fs/#spiffs_3","title":"\u6ce8\u9500\u548c\u5378\u8f7d SPIFFS","text":"<p>\u8be5\u51fd\u6570\u4ece VFS \u6ce8\u9500\u548c\u5378\u8f7d SPIFFS\uff0c\u5176\u51fd\u6570\u539f\u578b\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>esp_err_t esp_vfs_spiffs_unregister(const char* partition_label);\n</code></pre> <p>\u8be5\u51fd\u6570\u5f62\u53c2\u63cf\u8ff0\u5982\u4e0b\uff1a</p> \u53c2\u6570 \u63cf\u8ff0 partition_label \u6307\u5411\u5206\u533a\u8868\u7684\u6307\u9488\uff0c\u5206\u533a\u8868\u540d\u79f0 <p>\u8fd4\u56de\u503c\uff1a</p> <ul> <li>ESP_OK\uff1a\u6210\u529f</li> <li>\u5176\u4ed6\uff1a\u5931\u8d25</li> </ul>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/fs/#_4","title":"\u9a71\u52a8\u4ee3\u7801","text":""},{"location":"zh/DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/integration/","title":"\u96c6\u6210","text":""},{"location":"zh/DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/integration/#_2","title":"\u4ecb\u7ecd","text":"<p>Note</p> <p>\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u5982\u4f55\u5c06\u5b9a\u65f6\u5668\u9a71\u52a8\u96c6\u6210\u5230\u9879\u76ee\u4e2d\u3002</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/integration/#_3","title":"\u521b\u5efa\u65b0\u7ec4\u4ef6","text":"<p>Warning</p> <p>\u5728 <code>driver</code> \u76ee\u5f55\u4e2d\u521b\u5efa\u7ec4\u4ef6\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u60a8\u5df2\u5c06 <code>driver</code> \u76ee\u5f55\u5408\u5e76\u5230\u9879\u76ee\u4e2d\uff0c\u65b9\u6cd5\u662f\u5c06 <code>driver</code> \u76ee\u5f55\u7684\u8def\u5f84\u6dfb\u52a0\u5230\u9879\u76ee\u7ea7 <code>CMakeLists.txt</code> \u6587\u4ef6\u4e2d\u7684 <code>EXTRA_COMPONENT_DIRS</code> \u53d8\u91cf\u4e2d\u3002</p> <p>\u5728 VSCode \u4e2d\u6253\u5f00\u9879\u76ee\uff0c\u6253\u5f00\u96c6\u6210\u7ec8\u7aef\uff0c\u8f93\u5165</p> <pre><code>get_idf \n</code></pre> <p>\u6fc0\u6d3b ESP-IDF \u73af\u5883\u3002\u7136\u540e\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a <code>spi_sdcard</code> \u7684\u65b0\u7ec4\u4ef6\uff1a</p> <pre><code>idf.py -C driver create-component spi_sdcard\n</code></pre> <p>\u4e0a\u9762\u7684\u547d\u4ee4\u610f\u5473\u7740\u5728 <code>driver</code> \u76ee\u5f55\u4e2d\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a <code>spi_sdcard</code> \u7684\u65b0\u7ec4\u4ef6\u3002\u6267\u884c\u547d\u4ee4\u540e\uff0c\u60a8\u5c06\u5728 <code>driver</code> \u76ee\u5f55\u4e2d\u770b\u5230\u4e00\u4e2a\u540d\u4e3a <code>spi_sdcard</code> \u7684\u65b0\u76ee\u5f55\u3002\u547d\u4ee4\u5c06\u81ea\u52a8\u751f\u6210\u65b0\u7ec4\u4ef6\u7684 <code>CMakeLists.txt</code> \u6587\u4ef6\uff0c\u4ee5\u53ca <code>spi_sdcard.h</code> \u548c <code>spi_sdcard.c</code> \u6587\u4ef6\u3002</p> <p>\u6216\u8005\uff0c\u60a8\u53ef\u4ee5\u5728 <code>driver</code> \u76ee\u5f55\u4e2d\u624b\u52a8\u521b\u5efa <code>spi_sdcard</code> \u76ee\u5f55\uff0c\u7136\u540e\u5728 <code>spi_sdcard</code> \u76ee\u5f55\u4e2d\u521b\u5efa <code>CMakeLists.txt</code>\u3001<code>spi_sdcard.h</code> \u548c <code>spi_sdcard.c</code> \u6587\u4ef6\u3002</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/integration/#_4","title":"\u66ff\u6362\u4ee3\u7801","text":"<p>\u7ec4\u4ef6\u5c42\u9762</p> <p>\u5c06\u672c\u8282\u4e2d\u4ee3\u7801\u5206\u522b\u66ff\u6362\u5230\u7ec4\u4ef6\u4e0b\u7684<code>CMakelists.txt</code>\u3001<code>spi_sdcard.h</code>\u548c<code>spi_sdcard.c</code>\u6587\u4ef6\u4e2d\u3002</p> <p>\u9879\u76ee\u5c42\u9762</p> <p>\u5c06<code>main.c</code>\u4e2d\u7684\u4ee3\u7801\u66ff\u6362\u4e3a\u76f8\u5e94\u7684\u4ee3\u7801\u3002\u9879\u76ee\u5c42\u9762\u7684<code>CMakeLists.txt</code>\u6587\u4ef6\u65e0\u9700\u66f4\u6539\u3002</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/integration/#_5","title":"\u7f16\u8bd1\u70e7\u5f55","text":"<p>\u5728 VSCode \u4e2d\u6253\u5f00\u9879\u76ee\uff0c\u6253\u5f00\u96c6\u6210\u7ec8\u7aef\uff0c\u8f93\u5165</p> <pre><code>idf.py build flash monitor\n</code></pre> <p>\u7136\u540e\u60a8\u5c06\u5728 LCD \u5c4f\u5e55\u4e0a\u770b\u5230 SD \u5361\u4fe1\u606f\u3002</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/note/","title":"\u6587\u4ef6\u7cfb\u7edf (SPIFFS)","text":""},{"location":"zh/DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/note/#_1","title":"\u4ecb\u7ecd","text":"<p>\u6211\u4eec\u5df2\u7ecf\u4ecb\u7ecd\u8fc7\u5982\u4f55\u9a71\u52a8SD\u5361\uff0c\u4f46\u662f\u5bf9SD\u5361\u7684\u64cd\u4f5c\u90fd\u662f\u76f4\u63a5\u6216\u8005\u5199\u5165\u4e8c\u8fdb\u5236\u6570\u636e\uff0c\u8fd9\u6837\u7684\u64cd\u4f5c\u5bf9\u4e8e\u7528\u6237\u6765\u8bf4\u662f\u4e0d\u53cb\u597d\u7684\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u6587\u4ef6\u7cfb\u7edf\u6765\u7ba1\u7406\u6587\u4ef6\uff0c\u8fd9\u6837\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u6587\u4ef6\u540d\u6765\u64cd\u4f5c\u6587\u4ef6\uff0c\u800c\u4e0d\u662f\u901a\u8fc7\u5730\u5740\u3002</p> <p>SPIFFS \u662f\u4e00\u4e2a\u7528\u4e8e\u5d4c\u5165\u5f0f\u76ee\u6807\u4e0a\u7684 SPI NOR flash \u8bbe\u5907\u7684\u6587\u4ef6\u7cfb\u7edf\uff0c\u5e76\u4e14\u6709\u5982\u4e0b\u7279\u70b9\uff1a</p> <ul> <li>\u5c0f\u76ee\u6807\uff0c\u6ca1\u6709\u5806\u7684\u5c11\u91cf RAM</li> <li>\u53ea\u6709\u5927\u8303\u56f4\u7684\u6570\u636e\u5757\u624d\u80fd\u88ab\u64e6\u9664</li> <li>\u64e6\u9664\u4f1a\u5c06\u5757\u4e2d\u7684\u6240\u6709\u4f4d\u91cd\u7f6e\u4e3a 1</li> <li>\u5199\u64cd\u4f5c\u5c06 1 \u7f6e 0</li> <li>0 \u53ea\u80fd\u88ab\u64e6\u9664\u6210 1</li> <li>\u78e8\u635f\u5747\u8861</li> <li>\u4ee5\u4e0a\u51e0\u70b9\u662f SPIFFS \u7684\u7279\u70b9\uff0c\u4e0b\u9762\u5219\u8bf4\u660e\u4e86 SPIFFS \u5177\u4f53\u80fd\u505a\u4e9b\u4ec0\u4e48\uff1a</li> <li>\u4e13\u95e8\u4e3a\u4f4e ram \u4f7f\u7528\u800c\u8bbe\u8ba1</li> <li>\u4f7f\u7528\u9759\u6001\u5927\u5c0f\u7684 ram \u7f13\u51b2\u533a\uff0c\u4e0e\u6587\u4ef6\u7684\u6570\u91cf\u65e0\u5173</li> <li>\u7c7b\u53ef\u79fb\u690d\u64cd\u4f5c\u7cfb\u7edf\u63a5\u53e3:\u6253\u5f00\u3001\u5173\u95ed\u3001\u8bfb\u3001\u5199\u3001\u67e5\u627e\u3001\u7edf\u8ba1\u7b49</li> <li>\u5b83\u53ef\u4ee5\u5728\u4efb\u4f55 NOR \u95ea\u5b58\u4e0a\u8fd0\u884c\uff0c\u4e0d\u4ec5\u662f SPI \u95ea\u5b58\uff0c\u7406\u8bba\u4e0a\u4e5f\u53ef\u4ee5\u5728\u5fae\u5904\u7406\u5668\u7684\u5d4c\u5165\u5f0f \u95ea\u5b58\u4e0a\u8fd0\u884c</li> <li>\u591a\u4e2a spiffs \u914d\u7f6e\u53ef\u4ee5\u5728\u76f8\u540c\u7684\u76ee\u6807\u4e0a\u8fd0\u884c\u2014\u751a\u81f3\u53ef\u4ee5\u5728\u76f8\u540c\u7684 SPI \u95ea\u5b58\u8bbe\u5907\u4e0a\u8fd0\u884c</li> <li>\u5b9e\u73b0\u9759\u6001\u78e8\u635f\u8c03\u5e73\uff08\u4e5f\u5c31\u662f flash \u7684\u5bff\u547d\u7ef4\u62a4\uff09</li> <li>\u5185\u7f6e\u6587\u4ef6\u7cfb\u7edf\u4e00\u81f4\u6027\u68c0\u67e5</li> <li>\u9ad8\u5ea6\u53ef\u914d\u7f6e\u7684</li> </ul> <p>VFS</p> <p>VFS\u662fESP-IDF\u7684\u4e00\u4e2a\u7ec4\u4ef6\uff0c\u5b83\u662f\u4e00\u4e2a\u865a\u62df\u6587\u4ef6\u7cfb\u7edf\uff0c\u5b83\u53ef\u4ee5\u5c06\u4e0d\u540c\u7684\u6587\u4ef6\u7cfb\u7edf\u7edf\u4e00\u8d77\u6765\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u63a5\u53e3\u6765\u64cd\u4f5c\u4e0d\u540c\u7684\u6587\u4ef6\u7cfb\u7edf\u3002SPIFFS\u5c31\u662fVFS\u7684\u4e00\u4e2a\u5b9e\u73b0\u3002</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/note/#_2","title":"\u7528\u4f8b","text":"<p>1.\u5728 nor flash \u6307\u5b9a\u533a\u57df\u65b0\u5efa hello.txt \u6587\u4ef6\uff0c\u7136\u540e\u5bf9\u8fd9\u6587\u4ef6\u8fdb\u884c\u8bfb\u5199\u64cd\u4f5c 2.LED \u95ea\u70c1\uff0c\u6307\u793a\u7a0b\u5e8f\u6b63\u5728\u8fd0\u884c</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/note/#_3","title":"\u6d89\u53ca\u8d44\u6e90","text":"<p>1.LED \u706f LED -IO0 2.0.96 \u5bf8 LCD 3.SPIFFS</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/note/#spiffs_1","title":"\u6ce8\u518c\u88c5\u8f7dSPIFFS","text":"<p>\u8be5\u51fd\u6570\u4f7f\u7528\u7ed9\u5b9a\u7684\u8def\u5f84\u524d\u7f00\u5c06SPIFFS\u6ce8\u518c\u5e76\u88c5\u8f7d\u5230VFS\uff0c\u5176\u51fd\u6570\u539f\u578b\u5982\u4e0b\uff1a</p> <pre><code>esp_err_t esp_vfs_spiffs_register(const esp_vfs_spiffs_conf_t * conf);\n</code></pre> <p>\u8be5\u51fd\u6570\u5f62\u53c2\u63cf\u8ff0\u5982\u4e0b\uff1a</p> \u53c2\u6570 \u63cf\u8ff0 conf \u6307\u5411 esp_vfs_spiffs_conf_t \u914d\u7f6e\u7ed3\u6784\u7684\u6307\u9488 <p>\u8fd4\u56de\u503c\uff1a</p> \u8fd4\u56de\u503c \u63cf\u8ff0 ESP_OK \u8fd4\u56de\uff1a0\uff0c\u914d\u7f6e\u6210\u529f ESP_ERR_NO_MEM \u5982\u679c\u65e0\u6cd5\u5206\u914d\u5bf9\u8c61 ESP_ERR_INVALID_STATE \u5982\u679c\u5df2\u5b89\u88c5\u6216\u5206\u533a\u5df2\u52a0\u5bc6 ESP_ERR_NOT_FOUND \u5982\u679c\u627e\u4e0d\u5230 SPIFFS \u7684\u5206\u533a ESP_FAIL \u5982\u679c\u88c5\u8f7d\u6216\u683c\u5f0f\u5316\u5931\u8d25 <p>\u8be5\u51fd\u6570\u4f7f\u7528 esp_vfs_spiffs_conf_t \u7c7b\u578b\u7684\u7ed3\u6784\u4f53\u53d8\u91cf\u4f20\u5165\uff0c\u8be5\u7ed3\u6784\u4f53\u7684\u5b9a\u4e49\u5982\u4e0b\u6240\u793a\uff1a</p> \u6210\u5458\u53d8\u91cf \u8bf4\u660e <code>base_path</code> \u4e0e\u6587\u4ef6\u7cfb\u7edf\u5173\u8054\u7684\u6587\u4ef6\u8def\u5f84\u524d\u7f00\u3002 <code>partition_label</code> \u53ef\u9009\uff0c\u8981\u4f7f\u7528\u7684SPIFFS\u5206\u533a\u7684\u6807\u7b7e\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a<code>NULL</code>\uff0c\u5219\u4f7f\u7528\u9ed8\u8ba4\u503c\u3002 <code>max_files</code> \u53ef\u4ee5\u540c\u65f6\u6253\u5f00\u7684\u6700\u5927\u6587\u4ef6\u6570\u3002 <code>format_if_mount_failed</code> \u5982\u679c\u4e3a<code>true</code>\uff0c\u5219\u5728\u6302\u8f7d\u5931\u8d25\u65f6\u5c06\u683c\u5f0f\u5316\u6587\u4ef6\u7cfb\u7edf\u3002"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/note/#spiffs_2","title":"\u83b7\u53d6SPIFFS\u4fe1\u606f","text":"<p>\u8be5\u51fd\u6570\u7528\u4e8e\u83b7\u53d6 SPIFFS \u7684\u4fe1\u606f\uff0c\u5176\u51fd\u6570\u539f\u578b\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>esp_err_t esp_spiffs_info(const char* partition_label,\n                          size_t *total_bytes,\n                          size_t *used_bytes);\n</code></pre> <p>\u8be5\u51fd\u6570\u5f62\u53c2\u63cf\u8ff0\u5982\u4e0b\uff1a</p> \u53c2\u6570 \u63cf\u8ff0 partition_label SPIFFS \u5206\u533a\u7684\u6807\u7b7e total_bytes \u6307\u5411\u5b58\u50a8\u603b\u5b57\u8282\u6570\u7684\u53d8\u91cf\u7684\u6307\u9488 used_bytes \u6307\u5411\u5b58\u50a8\u5df2\u4f7f\u7528\u5b57\u8282\u6570\u7684\u53d8\u91cf\u7684\u6307\u94a9 <p>\u8fd4\u56de\u503c\uff1a</p> <ul> <li>ESP_OK\uff1a\u6210\u529f</li> <li>\u5176\u4ed6\uff1a\u5931\u8d25</li> </ul>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/note/#spiffs_3","title":"\u6ce8\u9500\u548c\u5378\u8f7d SPIFFS","text":"<p>\u8be5\u51fd\u6570\u4ece VFS \u6ce8\u9500\u548c\u5378\u8f7d SPIFFS\uff0c\u5176\u51fd\u6570\u539f\u578b\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>esp_err_t esp_vfs_spiffs_unregister(const char* partition_label);\n</code></pre> <p>\u8be5\u51fd\u6570\u5f62\u53c2\u63cf\u8ff0\u5982\u4e0b\uff1a</p> \u53c2\u6570 \u63cf\u8ff0 partition_label \u6307\u5411\u5206\u533a\u8868\u7684\u6307\u9488\uff0c\u5206\u533a\u8868\u540d\u79f0 <p>\u8fd4\u56de\u503c\uff1a</p> <ul> <li>ESP_OK\uff1a\u6210\u529f</li> <li>\u5176\u4ed6\uff1a\u5931\u8d25</li> </ul>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/FILE-SYSTEM/note/#_4","title":"\u4f9d\u8d56\u5173\u7cfb","text":""},{"location":"zh/DNESP32S3M/MAIN-CONTROL/RNG/code/","title":"\u968f\u673a\u6570\u5b57\u53d1\u751f\u5668 \u4ee3\u7801","text":""},{"location":"zh/DNESP32S3M/MAIN-CONTROL/RNG/code/#_2","title":"\u7ec4\u4ef6\u67b6\u6784","text":"<pre><code>- driver\n    - rng\n        - include\n            - rng.h\n        - rng.c\n        - CMakeLists.txt\n</code></pre>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/RNG/integration/","title":"\u96c6\u6210","text":""},{"location":"zh/DNESP32S3M/MAIN-CONTROL/RNG/integration/#_2","title":"\u4ecb\u7ecd","text":"<p>Note</p> <p>\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u5982\u4f55\u5c06\u5b9a\u65f6\u5668\u9a71\u52a8\u96c6\u6210\u5230\u9879\u76ee\u4e2d\u3002</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/RNG/integration/#_3","title":"\u521b\u5efa\u65b0\u7ec4\u4ef6","text":"<p>Warning</p> <p>\u5728 <code>driver</code> \u76ee\u5f55\u4e2d\u521b\u5efa\u7ec4\u4ef6\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u60a8\u5df2\u5c06 <code>driver</code> \u76ee\u5f55\u5408\u5e76\u5230\u9879\u76ee\u4e2d\uff0c\u65b9\u6cd5\u662f\u5c06 <code>driver</code> \u76ee\u5f55\u7684\u8def\u5f84\u6dfb\u52a0\u5230\u9879\u76ee\u7ea7 <code>CMakeLists.txt</code> \u6587\u4ef6\u4e2d\u7684 <code>EXTRA_COMPONENT_DIRS</code> \u53d8\u91cf\u4e2d\u3002</p> <p>\u5728 VSCode \u4e2d\u6253\u5f00\u9879\u76ee\uff0c\u6253\u5f00\u96c6\u6210\u7ec8\u7aef\uff0c\u8f93\u5165</p> <pre><code>get_idf \n</code></pre> <p>\u6fc0\u6d3b ESP-IDF \u73af\u5883\u3002\u7136\u540e\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a <code>rng</code> \u7684\u65b0\u7ec4\u4ef6\uff1a</p> <pre><code>idf.py -C driver create-component rng\n</code></pre> <p>\u4e0a\u9762\u7684\u547d\u4ee4\u610f\u5473\u7740\u5728 <code>driver</code> \u76ee\u5f55\u4e2d\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a <code>rng</code> \u7684\u65b0\u7ec4\u4ef6\u3002\u6267\u884c\u547d\u4ee4\u540e\uff0c\u60a8\u5c06\u5728 <code>driver</code> \u76ee\u5f55\u4e2d\u770b\u5230\u4e00\u4e2a\u540d\u4e3a <code>rng</code> \u7684\u65b0\u76ee\u5f55\u3002\u547d\u4ee4\u5c06\u81ea\u52a8\u751f\u6210\u65b0\u7ec4\u4ef6\u7684 <code>CMakeLists.txt</code> \u6587\u4ef6\uff0c\u4ee5\u53ca <code>rng.h</code> \u548c <code>rng.c</code> \u6587\u4ef6\u3002</p> <p>\u6216\u8005\uff0c\u60a8\u53ef\u4ee5\u5728 <code>driver</code> \u76ee\u5f55\u4e2d\u624b\u52a8\u521b\u5efa <code>rng</code> \u76ee\u5f55\uff0c\u7136\u540e\u5728 <code>rng</code> \u76ee\u5f55\u4e2d\u521b\u5efa <code>CMakeLists.txt</code>\u3001<code>rng.h</code> \u548c <code>rng.c</code> \u6587\u4ef6\u3002</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/RNG/integration/#_4","title":"\u66ff\u6362\u4ee3\u7801","text":"<p>\u7ec4\u4ef6\u5c42\u9762</p> <p>\u5c06\u672c\u8282\u4e2d\u4ee3\u7801\u5206\u522b\u66ff\u6362\u5230\u7ec4\u4ef6\u4e0b\u7684<code>CMakelists.txt</code>\u3001<code>rng.h</code>\u548c<code>rng.c</code>\u6587\u4ef6\u4e2d\u3002</p> <p>\u9879\u76ee\u5c42\u9762</p> <p>\u5c06<code>main.c</code>\u4e2d\u7684\u4ee3\u7801\u66ff\u6362\u4e3a\u76f8\u5e94\u7684\u4ee3\u7801\u3002\u9879\u76ee\u5c42\u9762\u7684<code>CMakeLists.txt</code>\u6587\u4ef6\u65e0\u9700\u66f4\u6539\u3002</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/RNG/integration/#_5","title":"\u7f16\u8bd1\u70e7\u5f55","text":"<p>\u5728 VSCode \u4e2d\u6253\u5f00\u9879\u76ee\uff0c\u6253\u5f00\u96c6\u6210\u7ec8\u7aef\uff0c\u8f93\u5165</p> <p><pre><code>idf.py build flash monitor\n</code></pre> \u6b64\u65f6\uff0c\u60a8\u5c06\u5728\u4e32\u884c\u76d1\u89c6\u5668\u4e2d\u770b\u5230\u968f\u673a\u6570\u3002</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/RNG/note/","title":"\u968f\u673a\u6570\u53d1\u751f\u5668 RNG","text":"<p>Info</p> <p>ESP32-S3 \u5185\u7f6e\u4e00\u4e2a\u771f\u968f\u673a\u6570\u53d1\u751f\u5668\uff08RNG\uff09\uff0c\u5176\u751f\u6210\u7684 32 \u4f4d\u968f\u673a\u6570\u53ef\u4f5c\u4e3a\u52a0\u5bc6\u7b49\u64cd\u4f5c\u7684\u57fa\u7840\u3002ESP32-S3 \u7684\u968f\u673a\u6570\u53d1\u751f\u5668\u53ef\u901a\u8fc7\u7269\u7406\u8fc7\u7a0b\u800c\u975e\u7b97\u6cd5\u751f\u6210\u771f\u968f\u673a\u6570\uff0c\u6240\u6709\u751f\u6210\u7684\u968f\u673a\u6570\u5728\u7279\u5b9a\u8303\u56f4\u5185\u51fa\u73b0\u7684\u6982\u7387\u5b8c\u5168\u4e00\u81f4\u3002</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/RNG/note/#rng_1","title":"RNG \u529f\u80fd\u63cf\u8ff0","text":"<p>\u4e0b\u9762\u5148\u6765\u4e86\u89e3\u566a\u58f0\u6e90\uff0c\u901a\u8fc7\u5b66\u4e60\u566a\u58f0\u6e90\u4f1a\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u6574\u4f53\u638c\u63e1\uff0c\u540c\u65f6\u5bf9\u4e4b\u540e\u7684\u7f16\u7a0b\u4e5f\u4f1a\u6709\u4e00\u4e2a\u6e05\u6670\u7684\u601d\u8def\u3002EDP32- S3 \u7684\u968f\u673a\u6570\u53d1\u751f\u5668\u566a\u58f0\u6e90\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <p></p> <p>ESP32 \u7684\u968f\u673a\u6570\u53d1\u751f\u5668\u901a\u8fc7 RNG_DATA_REG \u63d0\u4f9b 32 \u4f4d\u771f\u968f\u673a\u6570\uff0c\u5176\u566a\u58f0\u6e90\u4e3b\u8981\u6765\u81ea\u7cfb\u7edf\u4e2d\u7684\u70ed\u566a\u58f0\u548c\u5f02\u6b65\u65f6\u949f\u3002\u70ed\u566a\u58f0\u53ef\u6765\u6e90\u4e8e SAR ADC \u6216\u9ad8\u901f ADC\uff0c\u5f53\u8fd9\u4e9b\u6a21\u5757\u5de5\u4f5c\u65f6\uff0c\u4f1a\u4ea7\u751f\u6bd4\u7279\u6d41\uff0c\u5e76\u901a\u8fc7\u5f02\u6216 (XOR) \u8fd0\u7b97\u4f5c\u4e3a\u968f\u673a\u6570\u79cd\u5b50\u8f93\u5165\u968f\u673a\u6570\u751f\u6210\u5668\u3002\u540c\u65f6\uff0c\u5f53\u6570\u5b57\u5185\u6838\u4f7f\u80fd RC_FAST_CLK\uff0820MHz\uff09\u65f6\uff0c\u968f\u673a\u6570\u53d1\u751f\u5668\u4f1a\u5bf9\u5176\u8fdb\u884c\u91c7\u6837\uff0c\u5229\u7528\u5f02\u6b65\u65f6\u949f\u6e90\u7684\u4e9a\u7a33\u6001\u7279\u6027\u589e\u52a0\u71b5\u503c\u3002\u4e3a\u4e86\u4fdd\u8bc1\u968f\u673a\u6570\u7684\u6700\u5927\u71b5\u503c\uff0c\u5efa\u8bae\u81f3\u5c11\u4f7f\u80fd\u4e00\u8def ADC\uff08SAR ADC \u6216\u9ad8\u901f ADC\uff09\u4f5c\u4e3a\u968f\u673a\u6570\u79cd\u5b50\uff0c\u540c\u65f6\u7ed3\u5408 RC_FAST_CLK \u63d0\u9ad8\u71b5\u503c\u3002</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/RNG/note/#rnd","title":"RND \u968f\u673a\u6570\u5bc4\u5b58\u5668","text":"<p>RNG_DATA_REG \u968f\u673a\u6570\u6570\u636e 0x0110 \u53ea\u8bfb</p> <p></p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/RNG/note/#_1","title":"\u4f8b\u7a0b","text":"<p>\u672c\u5b9e\u9a8c\u4f7f\u7528 ESP32-S3 \u81ea\u5e26\u7684\u786c\u4ef6\u968f\u673a\u6570\u751f\u6210\u5668\uff08RNG\uff09\uff0c\u6bcf\u9694\u4e00\u6bb5\u65f6\u95f4\u83b7\u53d6\u968f\u673a\u6570\u5e76\u6253\u5370\u8f93\u51fa\u3002</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/RNG/note/#_2","title":"\u4f9d\u8d56\u5173\u7cfb","text":"<p>\u672c\u7ae0\u65e0\u4f9d\u8d56\u5173\u7cfb</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/RNG/note/#_3","title":"\u5173\u952e\u51fd\u6570","text":"\u51fd\u6570\u539f\u578b \u8bf4\u660e \u793a\u4f8b uint32_t rng_get_random_num(void) \u83b7\u53d6\u4e00\u4e2a\u968f\u673a\u6570 rng_get_random_num() int rng_get_random_range(int min, int max) \u83b7\u53d6\u6307\u5b9a\u8303\u56f4\u5185\u7684\u968f\u673a\u6570 rng_get_random_range(0, 9)"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/RTC/code/","title":"\u5b9e\u65f6\u65f6\u949f \u4ee3\u7801","text":"<p>Warning</p> <p>\u770b\u8d77\u6765 ESP-IDF \u4e2d\u6709\u4e00\u4e2a\u540d\u4e3a <code>rtc.h</code> \u7684\u5185\u7f6e\u6587\u4ef6\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5c06\u6211\u4eec\u7684\u6587\u4ef6\u547d\u540d\u4e3a <code>esp_rtc.h</code> \u4ee5\u907f\u514d\u51b2\u7a81\u3002\u56e0\u6b64 <code>rtc.c</code> \u6587\u4ef6\u4e5f\u662f\u5982\u6b64\u3002</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/RTC/code/#_2","title":"\u7ec4\u4ef6\u67b6\u6784","text":"<pre><code>- driver\n    - esp_rtc\n        - include\n            - esp_rtc.h\n        - esp_rtc.c\n        - CMakeLists.txt\n</code></pre>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/RTC/integration/","title":"\u96c6\u6210","text":""},{"location":"zh/DNESP32S3M/MAIN-CONTROL/RTC/integration/#_2","title":"\u4ecb\u7ecd","text":"<p>Note</p> <p>\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u5982\u4f55\u5c06\u5b9a\u65f6\u5668\u9a71\u52a8\u96c6\u6210\u5230\u9879\u76ee\u4e2d\u3002</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/RTC/integration/#_3","title":"\u521b\u5efa\u65b0\u7ec4\u4ef6","text":"<p>Warning</p> <p>\u5728 <code>driver</code> \u76ee\u5f55\u4e2d\u521b\u5efa\u7ec4\u4ef6\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u60a8\u5df2\u5c06 <code>driver</code> \u76ee\u5f55\u5408\u5e76\u5230\u9879\u76ee\u4e2d\uff0c\u65b9\u6cd5\u662f\u5c06 <code>driver</code> \u76ee\u5f55\u7684\u8def\u5f84\u6dfb\u52a0\u5230\u9879\u76ee\u7ea7 <code>CMakeLists.txt</code> \u6587\u4ef6\u4e2d\u7684 <code>EXTRA_COMPONENT_DIRS</code> \u53d8\u91cf\u4e2d\u3002</p> <p>\u5728 VSCode \u4e2d\u6253\u5f00\u9879\u76ee\uff0c\u6253\u5f00\u96c6\u6210\u7ec8\u7aef\uff0c\u8f93\u5165</p> <pre><code>get_idf \n</code></pre> <p>\u6fc0\u6d3b ESP-IDF \u73af\u5883\u3002\u7136\u540e\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a <code>esp_rtc</code> \u7684\u65b0\u7ec4\u4ef6\uff1a</p> <pre><code>idf.py -C driver create-component esp_rtc\n</code></pre> <p>\u4e0a\u9762\u7684\u547d\u4ee4\u610f\u5473\u7740\u5728 <code>driver</code> \u76ee\u5f55\u4e2d\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a <code>esp_rtc</code> \u7684\u65b0\u7ec4\u4ef6\u3002\u6267\u884c\u547d\u4ee4\u540e\uff0c\u60a8\u5c06\u5728 <code>driver</code> \u76ee\u5f55\u4e2d\u770b\u5230\u4e00\u4e2a\u540d\u4e3a <code>esp_rtc</code> \u7684\u65b0\u76ee\u5f55\u3002\u547d\u4ee4\u5c06\u81ea\u52a8\u751f\u6210\u65b0\u7ec4\u4ef6\u7684 <code>CMakeLists.txt</code> \u6587\u4ef6\uff0c\u4ee5\u53ca <code>esp_rtc.h</code> \u548c <code>esp_rtc.c</code> \u6587\u4ef6\u3002</p> <p>\u6216\u8005\uff0c\u60a8\u53ef\u4ee5\u5728 <code>driver</code> \u76ee\u5f55\u4e2d\u624b\u52a8\u521b\u5efa <code>esp_rtc</code> \u76ee\u5f55\uff0c\u7136\u540e\u5728 <code>esp_rtc</code> \u76ee\u5f55\u4e2d\u521b\u5efa <code>CMakeLists.txt</code>\u3001<code>esp_rtc.h</code> \u548c <code>esp_rtc.c</code> \u6587\u4ef6\u3002</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/RTC/integration/#_4","title":"\u66ff\u6362\u4ee3\u7801","text":"<p>\u7ec4\u4ef6\u5c42\u9762</p> <p>\u5c06\u672c\u8282\u4e2d\u4ee3\u7801\u5206\u522b\u66ff\u6362\u5230\u7ec4\u4ef6\u4e0b\u7684<code>CMakelists.txt</code>\u3001<code>esp_rtc.h</code>\u548c<code>esp_rtc.c</code>\u6587\u4ef6\u4e2d\u3002</p> <p>\u9879\u76ee\u5c42\u9762</p> <p>\u5c06<code>main.c</code>\u4e2d\u7684\u4ee3\u7801\u66ff\u6362\u4e3a\u76f8\u5e94\u7684\u4ee3\u7801\u3002\u9879\u76ee\u5c42\u9762\u7684<code>CMakeLists.txt</code>\u6587\u4ef6\u65e0\u9700\u66f4\u6539\u3002</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/RTC/integration/#_5","title":"\u7f16\u8bd1\u70e7\u5f55","text":"<p>\u5728 VSCode \u4e2d\u6253\u5f00\u9879\u76ee\uff0c\u6253\u5f00\u96c6\u6210\u7ec8\u7aef\uff0c\u8f93\u5165</p> <p><pre><code>idf.py build flash monitor\n</code></pre> \u6b64\u65f6\uff0c\u60a8\u5c06\u5728\u4e32\u884c\u76d1\u89c6\u5668\u4e2d\u770b\u5230\u65e5\u671f\u548c\u65f6\u95f4\u7684\u6253\u5370\u8f93\u51fa\u3002</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/RTC/note/","title":"\u5b9e\u65f6\u65f6\u949f (RTC)","text":"<p>Note</p> <p>\u672c\u7ae0\u4ecb\u7ecd ESP32-S3 \u5b9e\u65f6\u65f6\u949f\uff08RTC\uff09\u7684\u4f7f\u7528\uff0c\u5b9e\u65f6\u65f6\u949f\u80fd\u4e3a\u7cfb\u7edf\u63d0\u4f9b\u4e00\u4e2a\u51c6\u786e\u7684\u65f6\u95f4\uff0c\u5373\u65f6\u7cfb\u7edf\u590d\u4f4d\u6216\u4e3b\u7535\u6e90\u65ad\u7535\uff0cRTC \u4f9d\u7136\u80fd\u591f\u8fd0\u884c(\u6709\u7535\u6c60)\uff0c\u56e0\u6b64 RTC \u4e5f\u7ecf\u5e38\u7528\u4e8e\u5404\u79cd\u4f4e\u529f\u8017\u573a\u666f\u3002</p> <p>\u5b9e\u65f6\u65f6\u949f</p> <p>RTC\uff08\u5b9e\u65f6\u65f6\u949f\uff09\u662f\u6307\u5b89\u88c5\u5728\u7535\u5b50\u8bbe\u5907\u6216\u5b9e\u73b0\u5176\u529f\u80fd\u7684 IC\uff08\u96c6\u6210\u7535\u8def\uff09\u4e0a\u7684\u65f6\u949f\u3002</p> <p>\u5f53\u60a8\u5728\u6570\u5b57\u7535\u8def\u4e2d\u79f0\u5176\u4e3a\u201c\u65f6\u949f\u201d\u65f6\uff0c\u60a8\u53ef\u80fd\u4f1a\u60f3\u5230\u5468\u671f\u4fe1\u53f7\uff0c\u4f46\u5728\u82f1\u8bed\u4e2d\uff0cclock \u4e5f\u610f\u5473\u7740\u201c\u65f6\u949f\u201d\u3002\u90a3\u4e3a\u4ec0\u4e48\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u5355\u72ec\u7684 RTC?</p> <p>\u539f\u56e0\u662f CPU \u7684\u5b9a\u65f6\u5668\u65f6\u949f\u529f\u80fd\u53ea\u5728\u201c\u542f\u52a8\u201d\u5373\u201c\u901a\u7535\u65f6\u201d\u8fd0\u884c\uff0c\u65ad\u7535\u65f6\u505c\u6b62\u3002\u5f53\u7136\uff0c\u5982\u679c\u65f6\u949f\u4e0d\u80fd\u8fde\u7eed\u8ddf\u8e2a\u65f6\u95f4\uff0c\u5219\u5fc5\u987b\u624b\u52a8\u8bbe\u7f6e\u65f6\u95f4\u3002</p> <p>\u901a\u5e38\uff0cRTC \u914d\u5907\u4e00\u4e2a\u5355\u72ec\u5206\u79bb\u7684\u7535\u6e90\uff0c\u5982\u7ebd\u6263\u7535\u6c60\uff08\u5907\u7528\u7535\u6c60\uff09\uff0c\u5373\u4f7f DNESP32S3M \u6700\u5c0f\u7cfb\u7edf\u677f\u7535\u6e90\u5173\u95ed\uff0c\u5b83\u4e5f\u80fd\u4fdd\u6301\u8fd0\u4f5c\uff0c\u968f\u65f6\u53ef\u4ee5\u5b9e\u65f6\u663e\u793a\u65f6\u95f4\u3002\u7136\u540e\uff0c\u5f53 DNESP32S3M \u6700\u5c0f\u7cfb\u7edf\u677f\u518d\u6b21\u6253\u5f00\u65f6\uff0c\u8ba1\u7b97\u673a\u5185\u7f6e\u7684\u5b9a\u65f6\u5668\u65f6\u949f\u4ece RTC \u8bfb\u53d6\u5f53\u524d\u65f6\u95f4\uff0c\u5e76\u5728\u6b64\u57fa\u7840\u4e0a\u4f9b\u7535\u7684\u540c\u65f6\uff0c\u65f6\u95f4\u5728\u5176\u81ea\u8eab\u673a\u5236\u4e0b\u663e\u793a\u3002\u987a\u4fbf\u8bf4\u4e00\u53e5\uff0c\u7531\u4e8e\u7ebd\u6263\u7535\u6c60\u76f8\u5bf9\u4fbf\u5b9c\u4e14\u4f7f\u7528\u5bff\u547d\u957f\uff0c\u56e0\u6b64 RTC \u53ef\u4ee5\u4ee5\u6781\u4f4e\u7684\u6210\u672c\u8fd0\u884c\u3002\u57fa\u4e8e\u6b64\u8fd9\u4e2a\u4f5c\u7528\uff0c\u5b83\u4e5f\u53ef\u4ee5\u7528\u4f5c\u5185\u5b58\u3002</p> <p>Note</p> <p>\u5728 ESP32-S3 \u4e2d\uff0c\u5e76\u6ca1\u6709\u50cf STM32 \u82af\u7247\u4e00\u6837\uff0c\u5177\u6709 RTC \u5916\u8bbe\uff0c\u4f46\u662f\u5b58\u5728\u4e00\u4e2a\u7cfb\u7edf\u65f6\u95f4\uff0c\u5229\u7528\u7cfb\u7edf\u65f6\u95f4\uff0c\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u5b9e\u65f6\u65f6\u949f\u7684\u529f\u80fd\u6548\u679c\u3002 ESP32-S3 \u4f7f\u7528\u4e24\u79cd\u786c\u4ef6\u65f6\u949f\u6e90\u5efa\u7acb\u548c\u4fdd\u6301\u7cfb\u7edf\u65f6\u95f4\u3002\u6839\u636e\u5e94\u7528\u76ee\u7684\u53ca\u5bf9\u7cfb\u7edf\u65f6\u95f4\u7684\u7cbe\u5ea6\u8981\u6c42\uff0c\u65e2\u53ef\u4ee5\u4ec5\u4f7f\u7528\u5176\u4e2d\u4e00\u79cd\u65f6\u949f\u6e90\uff0c\u4e5f\u53ef\u4ee5\u540c\u65f6\u4f7f\u7528\u4e24\u79cd\u65f6\u949f\u6e90\u3002\u8fd9\u4e24\u79cd\u786c\u4ef6\u65f6\u949f\u6e90\u4e3a RTC \u5b9a\u65f6\u5668 \u548c \u9ad8\u5206\u8fa8\u7387\u5b9a\u65f6\u5668 \u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u662f\u4f7f\u7528\u8fd9\u4e24\u79cd\u5b9a\u65f6\u5668\u3002\u4e0b\u9762\u6211\u4eec\u5c06\u9010\u4e00\u4ecb\u7ecd\u3002</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/RTC/note/#_1","title":"\u7528\u4f8b","text":"<ol> <li>\u901a\u8fc7 LCD /UART \u5b9e\u65f6\u663e\u793a RTC \u65f6\u95f4</li> <li>LED \u95ea\u70c1\uff0c\u6307\u793a\u7a0b\u5e8f\u6b63\u5728\u8fd0\u884c</li> </ol>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/RTC/note/#_2","title":"\u4f9d\u8d56\u5173\u7cfb","text":"<p>\u672c\u7ae0\u65e0\u4f9d\u8d56\u5173\u7cfb\u3002</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/RTC/note/#_3","title":"\u5173\u952e\u51fd\u6570","text":"\u51fd\u6570\u539f\u578b \u8bf4\u660e \u793a\u4f8b void rtc_set_time(int year, int mon, int mday, int hour, int min, int sec); \u8bbe\u7f6e RTC \u65f6\u95f4 rtc_set_time(2022, 12, 31, 23, 59, 59); void rtc_get_time(void); /* Get time */ \u83b7\u53d6 RTC \u65f6\u95f4, \u5b58\u5165\u5168\u5c40\u53d8\u91cfcalendar rtc_get_time();"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/SD-CARD/code/","title":"TF\u5361\uff08SD\u5361\uff09\u4ee3\u7801","text":""},{"location":"zh/DNESP32S3M/MAIN-CONTROL/SD-CARD/code/#_1","title":"\u7ec4\u4ef6\u67b6\u6784","text":"<pre><code>- driver\n    - spi_sdcard\n        - include\n            - spi_sdcard.h\n        - spi_sdcard.c\n        - CMakeLists.txt\n</code></pre>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/SD-CARD/code/#spi_sdcardh","title":"spi_sdcard.h","text":"<pre><code>/**\n * @file spi_sdcard.h\n * @author SHUAIWEN CUI (SHUAIWEN001@e.ntu.edu.sg)\n * @brief This file is for SD card initialization and related functions\n * @version 1.0\n * @date 2024-11-19\n * @copyright Copyright (c) 2024\n * \n */\n\n#ifndef __SPI_SDCARD_H__\n#define __SPI_SDCARD_H__\n\n/* DEPENDENCIES */\n#include \"esp_vfs_fat.h\" // ESP32 VFS FAT\n#include \"sdmmc_cmd.h\" // ESP32 SDMMC\n\n// SD Card\n#define MOUNT_POINT     \"/sdcard\" \n#define SD_MAX_CHAR_SIZE    64\n\n#define SD_PIN_NUM_CS    GPIO_NUM_2\n\n/* VARIABLES */\nextern sdmmc_card_t *card;\n\n/* FUNCTIONS */\n\n/**\n * @brief Initialize the SD card\n * @param None\n * @retval esp_err_t\n */\nesp_err_t sd_card_init(void);\n\n/**\n * @brief Test file operations on the SD card\n * @param None\n * @retval esp_err_t\n */\nesp_err_t sd_card_test_filesystem(void);\n\n/**\n * @brief Unmount the File System and SPI Bus\n * @param None\n * @retval esp_err_t\n */\nesp_err_t sd_card_unmount(void);\n#endif\n</code></pre>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/SD-CARD/integration/","title":"\u96c6\u6210","text":""},{"location":"zh/DNESP32S3M/MAIN-CONTROL/SD-CARD/integration/#_2","title":"\u4ecb\u7ecd","text":"<p>Note</p> <p>\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u5982\u4f55\u5c06\u5b9a\u65f6\u5668\u9a71\u52a8\u96c6\u6210\u5230\u9879\u76ee\u4e2d\u3002</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/SD-CARD/integration/#_3","title":"\u521b\u5efa\u65b0\u7ec4\u4ef6","text":"<p>Warning</p> <p>\u5728 <code>driver</code> \u76ee\u5f55\u4e2d\u521b\u5efa\u7ec4\u4ef6\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u60a8\u5df2\u5c06 <code>driver</code> \u76ee\u5f55\u5408\u5e76\u5230\u9879\u76ee\u4e2d\uff0c\u65b9\u6cd5\u662f\u5c06 <code>driver</code> \u76ee\u5f55\u7684\u8def\u5f84\u6dfb\u52a0\u5230\u9879\u76ee\u7ea7 <code>CMakeLists.txt</code> \u6587\u4ef6\u4e2d\u7684 <code>EXTRA_COMPONENT_DIRS</code> \u53d8\u91cf\u4e2d\u3002</p> <p>\u5728 VSCode \u4e2d\u6253\u5f00\u9879\u76ee\uff0c\u6253\u5f00\u96c6\u6210\u7ec8\u7aef\uff0c\u8f93\u5165</p> <pre><code>get_idf \n</code></pre> <p>\u6fc0\u6d3b ESP-IDF \u73af\u5883\u3002\u7136\u540e\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a <code>spi_sdcard</code> \u7684\u65b0\u7ec4\u4ef6\uff1a</p> <pre><code>idf.py -C driver create-component spi_sdcard\n</code></pre> <p>\u4e0a\u9762\u7684\u547d\u4ee4\u610f\u5473\u7740\u5728 <code>driver</code> \u76ee\u5f55\u4e2d\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a <code>spi_sdcard</code> \u7684\u65b0\u7ec4\u4ef6\u3002\u6267\u884c\u547d\u4ee4\u540e\uff0c\u60a8\u5c06\u5728 <code>driver</code> \u76ee\u5f55\u4e2d\u770b\u5230\u4e00\u4e2a\u540d\u4e3a <code>spi_sdcard</code> \u7684\u65b0\u76ee\u5f55\u3002\u547d\u4ee4\u5c06\u81ea\u52a8\u751f\u6210\u65b0\u7ec4\u4ef6\u7684 <code>CMakeLists.txt</code> \u6587\u4ef6\uff0c\u4ee5\u53ca <code>spi_sdcard.h</code> \u548c <code>spi_sdcard.c</code> \u6587\u4ef6\u3002</p> <p>\u6216\u8005\uff0c\u60a8\u53ef\u4ee5\u5728 <code>driver</code> \u76ee\u5f55\u4e2d\u624b\u52a8\u521b\u5efa <code>spi_sdcard</code> \u76ee\u5f55\uff0c\u7136\u540e\u5728 <code>spi_sdcard</code> \u76ee\u5f55\u4e2d\u521b\u5efa <code>CMakeLists.txt</code>\u3001<code>spi_sdcard.h</code> \u548c <code>spi_sdcard.c</code> \u6587\u4ef6\u3002</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/SD-CARD/integration/#_4","title":"\u66ff\u6362\u4ee3\u7801","text":"<p>\u7ec4\u4ef6\u5c42\u9762</p> <p>\u5c06\u672c\u8282\u4e2d\u4ee3\u7801\u5206\u522b\u66ff\u6362\u5230\u7ec4\u4ef6\u4e0b\u7684<code>CMakelists.txt</code>\u3001<code>spi_sdcard.h</code>\u548c<code>spi_sdcard.c</code>\u6587\u4ef6\u4e2d\u3002</p> <p>\u9879\u76ee\u5c42\u9762</p> <p>\u5c06<code>main.c</code>\u4e2d\u7684\u4ee3\u7801\u66ff\u6362\u4e3a\u76f8\u5e94\u7684\u4ee3\u7801\u3002\u9879\u76ee\u5c42\u9762\u7684<code>CMakeLists.txt</code>\u6587\u4ef6\u65e0\u9700\u66f4\u6539\u3002</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/SD-CARD/integration/#_5","title":"\u7f16\u8bd1\u70e7\u5f55","text":"<p>\u5728 VSCode \u4e2d\u6253\u5f00\u9879\u76ee\uff0c\u6253\u5f00\u96c6\u6210\u7ec8\u7aef\uff0c\u8f93\u5165</p> <pre><code>idf.py build flash monitor\n</code></pre> <p>\u7136\u540e\u60a8\u5c06\u5728\u4e32\u884c\u76d1\u89c6\u5668\u4e2d\u770b\u5230\u53cd\u9988\u3002\u6216\u8005\uff0c\u60a8\u53ef\u4ee5\u68c0\u67e5 SD \u5361\u4ee5\u8fdb\u884c\u9a8c\u8bc1\u3002</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/SD-CARD/note/","title":"TF\u5361\uff08SD\u5361\uff09\u64cd\u4f5c - SPI\u65b9\u5f0f","text":"<p>Warning</p> <p>\u672c\u7ae0\u5185\u5bb9\u6211\u5e76\u4e0d\u5efa\u8bae\u53c2\u8003\u6b63\u70b9\u539f\u5b50\u7684\u6559\u7a0b\u3002\u7ecf\u8fc7\u6211\u7684\u6d4b\u8bd5\uff0c\u6211\u53d1\u73b0\u4f3c\u4e4e\u7a0b\u5e8f\u4e0d\u8d77\u4f5c\u7528\u3002\u6240\u4ee5\u6211\u53c2\u8003\u4e92\u8054\u7f51\u4e0a\u7684\u5185\u5bb9\uff0c\u91cd\u65b0\u7f16\u5199\u4e86\u8fd9\u4e00\u7ae0\u7684\u5185\u5bb9\u3002</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/SD-CARD/note/#_1","title":"\u4ecb\u7ecd","text":"<p>SD\u5361\u4ecb\u7ecd</p> <p>\u672c\u5f88\u591a\u5355\u7247\u673a\u7cfb\u7edf\u90fd\u9700\u8981\u5927\u5bb9\u91cf\u5b58\u50a8\u8bbe\u5907\uff0c\u4ee5\u5b58\u50a8\u6570\u636e\u3002\u76ee\u524d\u5e38\u7528\u7684\u6709U\u76d8\uff0cFLASH\u82af\u7247\uff0cSD\u5361\u7b49\u3002\u4ed6\u4eec\u5404\u6709\u4f18\u70b9\uff0c\u7efc\u5408\u6bd4\u8f83\uff0c\u6700\u9002\u5408\u5355\u7247\u673a\u7cfb\u7edf\u7684\u83ab\u8fc7\u4e8eSD\u5361\u4e86\uff0c\u5b83\u4e0d\u4ec5\u5bb9\u91cf\u53ef\u4ee5\u505a\u5230\u5f88\u5927\uff0832GB\u4ee5\u4e0a\uff09\uff0c\u652f\u6301SPI/SDIO\u9a71\u52a8\uff0c\u800c\u4e14\u6709\u591a\u79cd\u4f53\u79ef\u7684\u5c3a\u5bf8\u53ef\u4f9b\u9009\u62e9\uff08\u6807\u51c6\u7684SD\u5361\u5c3a\u5bf8\u53caMicro SD\u5361\u5c3a\u5bf8\u7b49\uff09\uff0c\u80fd\u6ee1\u8db3\u4e0d\u540c\u5e94\u7528\u7684\u8981\u6c42\u3002</p> <p>\u53ea\u9700\u8981\u5c11\u6570\u51e0\u4e2aIO\u53e3\u5373\u53ef\u5916\u6269\u4e00\u4e2a\u9ad8\u8fbe32GB\u6216\u4ee5\u4e0a\u7684\u5916\u90e8\u5b58\u50a8\u5668\uff0c\u5bb9\u91cf\u4ece\u51e0\u5341M\u5230\u51e0\u5341G\u9009\u62e9\u8303\u56f4\u5f88\u5927\uff0c\u66f4\u6362\u4e5f\u5f88\u65b9\u4fbf\uff0c\u7f16\u7a0b\u4e5f\u7b80\u5355\uff0c\u662f\u5355\u7247\u673a\u5927\u5bb9\u91cf\u5916\u90e8\u5b58\u50a8\u5668\u7684\u9996\u9009\u3002</p> <p>\u6b63\u70b9\u539f\u5b50ESP32-S3\u6700\u5c0f\u7cfb\u7edf\u677f\u4f7f\u7528\u7684\u63a5\u53e3\u662fMicro SD\u5361\u63a5\u53e3\uff0c\u5361\u5ea7\u5e26\u81ea\u9501\u529f\u80fd\uff0cSD SPI\u4e3b\u673a\u9a71\u52a8\u7a0b\u5e8f\u57fa\u4e8eSPI Master Driver\u5b9e\u73b0\u3002\u501f\u52a9SPI\u4e3b\u63a7\u9a71\u52a8\u7a0b\u5e8f\uff0cSD\u5361\u53ca\u5176\u4ed6SPI\u8bbe\u5907\u53ef\u4ee5\u5171\u4eab\u540c\u4e00SPI\u603b\u7ebf\u3002SPI\u4e3b\u673a\u9a71\u52a8\u7a0b\u5e8f\u5c06\u5904\u7406\u6765\u81ea\u4e0d\u540c\u4efb\u52a1\u7684\u72ec\u5360\u8bbf\u95ee\u3002</p> <p>Info</p> <p>\u4e00\u4e2a\u5b8c\u6574\u7684 SD\u5361\u64cd\u4f5c\u8fc7\u7a0b\u662f\uff1a\u4e3b\u673a(\u5355\u7247\u673a\u7b49)\u53d1\u8d77\u201c\u547d\u4ee4\u201d\uff0cSD\u5361\u6839\u636e\u547d\u4ee4\u7684\u5185\u5bb9\u51b3\u5b9a\u662f\u5426\u53d1\u9001\u54cd\u5e94\u4fe1\u606f\u53ca\u6570\u636e\u7b49\uff0c\u5982\u679c\u662f\u6570\u636e\u8bfb/\u5199\u64cd\u4f5c\uff0c\u4e3b\u673a\u8fd8\u9700\u8981\u53d1\u9001\u505c\u6b62\u8bfb/\u5199\u6570\u636e\u7684\u547d\u4ee4\u6765\u7ed3\u675f\u672c\u6b21\u64cd\u4f5c\uff0c\u8fd9\u610f\u5473\u7740\u4e3b\u673a\u53d1\u8d77\u547d\u4ee4\u6307\u4ee4\u540e\uff0cSD \u5361\u53ef\u4ee5\u6ca1\u6709\u54cd\u5e94\u3001\u6570\u636e\u7b49\u8fc7\u7a0b\uff0c\u8fd9\u53d6\u51b3\u4e8e\u547d\u4ee4\u7684\u542b\u4e49\u3002</p> <p>\u5361\u6a21\u5f0f</p> <p>SD\u5361\u6709\u4e24\u79cd\u6709\u6548\u64cd\u4f5c\u6a21\u5f0f\uff1a\u201c\u5361\u8bc6\u522b\u6a21\u5f0f\u201d\u548c\u201c\u6570\u636e\u4f20\u8f93\u6a21\u5f0f\u201d\u3002\u6839\u636e\u64cd\u4f5c\u65b9\u5f0f\u4e0d\u540c\uff0c\u5206\u4e3aSD\u6a21\u5f0f\u548cSPI\u6a21\u5f0f\u3002\u6b63\u70b9\u539f\u5b50ESP32-S3\u6700\u5c0f\u7cfb\u7edf\u677f\u4f7f\u7528\u7684\u662fSPI\u6a21\u5f0f\u3002</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/SD-CARD/note/#_2","title":"\u5173\u952e\u6b65\u9aa4","text":"<ol> <li>SD\u5361\u521d\u59cb\u5316 \uff08SPI\u6a21\u5f0f/SDIO\u6a21\u5f0f\uff09</li> <li>SD\u5361\u8bfb\u5199\u6570\u636e</li> </ol> <p>Warning</p> <p>ESP32\u7684SDIO\u9a71\u52a8\u6a21\u5f0f\u548cSPI\u9a71\u52a8\u6a21\u5f0f\u4e0d\u517c\u5bb9\uff0c\u53ea\u80fd\u9009\u62e9\u4e00\u79cd\u9a71\u52a8\u6a21\u5f0f\u3002</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/SD-CARD/note/#_3","title":"\u7528\u4f8b","text":"<p>\u672c\u7ae0\u5b9e\u9a8c\u529f\u80fd\u7b80\u4ecb\uff1a\u7ecf\u8fc7\u4e00\u7cfb\u5217\u521d\u59cb\u5316\u4e4b\u540e\uff0c\u901a\u8fc7\u4e00\u4e2a while \u5faa\u73af\u4ee5 SD \u5361\u521d\u59cb\u5316\u4e3a\u6761\u4ef6\uff0c\u4ee5\u68c0\u6d4b SD \u5361\u662f\u5426\u521d\u59cb\u5316\u6210\u529f\uff0c\u82e5\u521d\u59cb\u5316 SD \u5361\u6210\u529f\uff0c\u5219\u4f1a\u901a\u8fc7\u4e32\u53e3\u6216\u8005 VSCode \u7ec8\u7aef\u8f93\u51fa SD\u5361\u7684\u76f8\u5173\u53c2\u6570\uff0c\u5e76\u5728 LCD \u4e0a\u663e\u793a SD \u5361\u7684\u603b\u5bb9\u91cf\u4ee5\u53ca\u5269\u4f59\u5bb9\u91cf\u3002\u6b64\u65f6 LED \u95ea\u70c1\uff0c\u8868\u793a\u7a0b\u5e8f\u6b63\u5728\u8fd0\u884c\u3002</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/SD-CARD/note/#_4","title":"\u6d89\u53ca\u8d44\u6e90","text":"<ol> <li>LED \u706f LED -IO0</li> <li>0.96 \u5bf8 LCD</li> <li>SD CS-IO2 SCK-IO12 MOSI-IO11 MISO-IO13</li> </ol>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/SD-CARD/note/#_5","title":"\u63a5\u7ebf\u56fe","text":"<p>\u672c\u7ae0\u5b9e\u9a8c\u4f7f\u7528 SPI \u63a5\u53e3\u4e0e SD \u5361\u8fdb\u884c\u8fde\u63a5\uff0cDNESP32S3M \u6700\u5c0f\u7cfb\u7edf\u677f\u677f\u8f7d\u4e86\u4e00\u4e2a Micro SD\u5361\u5ea7\u7528\u4e8e\u8fde\u63a5 SD \u5361\uff0cSD \u5361\u4e0e ESP32-S3 \u7684\u8fde\u63a5\u539f\u7406\u56fe\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002</p> <p></p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/SD-CARD/note/#_6","title":"\u4f9d\u8d56\u5173\u7cfb","text":""},{"location":"zh/DNESP32S3M/MAIN-CONTROL/SPI/code/","title":"SPI \u4ee3\u7801","text":""},{"location":"zh/DNESP32S3M/MAIN-CONTROL/SPI/code/#_1","title":"\u7ec4\u4ef6\u67b6\u6784","text":"<pre><code>- driver\n    - spi\n        - include\n            - spi.h\n        - spi.c\n        - CMakeLists.txt\n</code></pre>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/SPI/code/#driverspicmakeliststxt","title":"driver/spi/CMakeLists.txt","text":"<pre><code>set(src_dirs\n    .\n)\n\nset(include_dirs\n    include\n)\n\nset(requires\n    driver\n)\n\nidf_component_register(SRC_DIRS ${src_dirs} INCLUDE_DIRS ${include_dirs} REQUIRES ${requires})\n</code></pre> <p>Note</p> <p>\u6ce8\u610f\uff0c\u5728\u9a71\u52a8\u7a0b\u5e8f\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 ESP-IDF \u5185\u7f6e\u7684 <code>driver</code> \u5e93\u4e2d\u7684spi\u548cgpio\u76f8\u5173\u51fd\u6570\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u5728 <code>CMakeLists.txt</code> \u6587\u4ef6\u7684 <code>REQUIRES</code> \u5b57\u6bb5\u4e2d\u6307\u660e\u8fd9\u4e2a\u4f9d\u8d56\u5173\u7cfb\u3002</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/SPI/code/#mainc","title":"main.c","text":"<pre><code>refer to LCD code\n</code></pre> <p>\u6ce8\u610f</p> <p>\u4ee5\u4e0a\u662f\u5728 ESP32-S3 \u4e0a\u8bbe\u7f6e SPI2 \u7684\u4ee3\u7801\u3002\u5982\u679c\u4f7f\u7528\u5176\u4ed6SPI\u5916\u8bbe\uff0c\u5219\u9700\u8981\u76f8\u5e94\u914d\u7f6e\u76f8\u5e94\u7684\u5f15\u811a\u548cSPI\u4e3b\u673a\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u4ee5\u540e\u7684SD\u5361\u5c06\u4f7f\u7528SPI3\uff0c\u5219\u9700\u8981\u76f8\u5e94\u914d\u7f6e\u5f15\u811a\u548cSPI\u4e3b\u673a\u3002</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/SPI/integration/","title":"\u96c6\u6210","text":""},{"location":"zh/DNESP32S3M/MAIN-CONTROL/SPI/integration/#_2","title":"\u4ecb\u7ecd","text":"<p>Note</p> <p>\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u5982\u4f55\u5c06\u5b9a\u65f6\u5668\u9a71\u52a8\u96c6\u6210\u5230\u9879\u76ee\u4e2d\u3002</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/SPI/integration/#_3","title":"\u521b\u5efa\u65b0\u7ec4\u4ef6","text":"<p>Warning</p> <p>\u5728 <code>driver</code> \u76ee\u5f55\u4e2d\u521b\u5efa\u7ec4\u4ef6\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u60a8\u5df2\u5c06 <code>driver</code> \u76ee\u5f55\u5408\u5e76\u5230\u9879\u76ee\u4e2d\uff0c\u65b9\u6cd5\u662f\u5c06 <code>driver</code> \u76ee\u5f55\u7684\u8def\u5f84\u6dfb\u52a0\u5230\u9879\u76ee\u7ea7 <code>CMakeLists.txt</code> \u6587\u4ef6\u4e2d\u7684 <code>EXTRA_COMPONENT_DIRS</code> \u53d8\u91cf\u4e2d\u3002</p> <p>\u5728 VSCode \u4e2d\u6253\u5f00\u9879\u76ee\uff0c\u6253\u5f00\u96c6\u6210\u7ec8\u7aef\uff0c\u8f93\u5165</p> <pre><code>get_idf \n</code></pre> <p>\u6fc0\u6d3b ESP-IDF \u73af\u5883\u3002\u7136\u540e\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a <code>spi</code> \u7684\u65b0\u7ec4\u4ef6\uff1a</p> <pre><code>idf.py -C driver create-component spi\n</code></pre> <p>\u4e0a\u9762\u7684\u547d\u4ee4\u610f\u5473\u7740\u5728 <code>driver</code> \u76ee\u5f55\u4e2d\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a <code>spi</code> \u7684\u65b0\u7ec4\u4ef6\u3002\u6267\u884c\u547d\u4ee4\u540e\uff0c\u60a8\u5c06\u5728 <code>driver</code> \u76ee\u5f55\u4e2d\u770b\u5230\u4e00\u4e2a\u540d\u4e3a <code>spi</code> \u7684\u65b0\u76ee\u5f55\u3002\u547d\u4ee4\u5c06\u81ea\u52a8\u751f\u6210\u65b0\u7ec4\u4ef6\u7684 <code>CMakeLists.txt</code> \u6587\u4ef6\uff0c\u4ee5\u53ca <code>spi.h</code> \u548c <code>spi.c</code> \u6587\u4ef6\u3002</p> <p>\u6216\u8005\uff0c\u60a8\u53ef\u4ee5\u5728 <code>driver</code> \u76ee\u5f55\u4e2d\u624b\u52a8\u521b\u5efa <code>spi</code> \u76ee\u5f55\uff0c\u7136\u540e\u5728 <code>spi</code> \u76ee\u5f55\u4e2d\u521b\u5efa <code>CMakeLists.txt</code>\u3001<code>spi.h</code> \u548c <code>spi.c</code> \u6587\u4ef6\u3002</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/SPI/integration/#_4","title":"\u66ff\u6362\u4ee3\u7801","text":"<p>\u7ec4\u4ef6\u5c42\u9762</p> <p>\u5c06\u672c\u8282\u4e2d\u4ee3\u7801\u5206\u522b\u66ff\u6362\u5230\u7ec4\u4ef6\u4e0b\u7684<code>CMakelists.txt</code>\u3001<code>spi.h</code>\u548c<code>spi.c</code>\u6587\u4ef6\u4e2d\u3002</p> <p>\u9879\u76ee\u5c42\u9762</p> <p>\u5c06<code>main.c</code>\u4e2d\u7684\u4ee3\u7801\u66ff\u6362\u4e3a\u76f8\u5e94\u7684\u4ee3\u7801\u3002\u9879\u76ee\u5c42\u9762\u7684<code>CMakeLists.txt</code>\u6587\u4ef6\u65e0\u9700\u66f4\u6539\u3002</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/SPI/integration/#_5","title":"\u7f16\u8bd1\u70e7\u5f55","text":"<p>\u5728 VSCode \u4e2d\u6253\u5f00\u9879\u76ee\uff0c\u6253\u5f00\u96c6\u6210\u7ec8\u7aef\uff0c\u8f93\u5165</p> <pre><code>idf.py build flash monitor\n</code></pre> <p>Note</p> <p>\u6ce8\u610f\uff0c\u672c\u7ae0\u9700\u8981\u4e0e\u5176\u4ed6\u4f7f\u7528SPI\u7684\u90e8\u4ef6\u8054\u5408\u4f7f\u7528\uff0c\u624d\u80fd\u770b\u5230\u6548\u679c\u3002</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/SPI/note/#spi_1","title":"SPI\u4ecb\u7ecd","text":"<p>Serial Peripheral interface</p> <p>SPI\uff0cSerial Peripheral interface\uff0c\u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u4e32\u884c\u5916\u56f4\u8bbe\u5907\u63a5\u53e3\uff0c\u662f\u7531\u539f\u6469\u6258\u7f57\u62c9\u516c\u53f8\u5728\u5176 MC68HCXX \u7cfb\u5217\u5904\u7406\u5668\u4e0a\u5b9a\u4e49\u7684\u3002SPI \u662f\u4e00\u79cd\u9ad8\u901f\u7684\u5168\u53cc\u5de5\u3001\u540c\u6b65\u3001\u4e32\u884c\u7684\u901a\u4fe1\u603b\u7ebf\uff0c\u5df2\u7ecf\u5e7f\u6cdb\u5e94\u7528\u5728\u4f17\u591a MCU\u3001\u5b58\u50a8\u82af\u7247\u3001AD \u8f6c\u6362\u5668\u548c LCD \u4e4b\u95f4\u3002 SPI \u901a\u4fe1\u8ddf IIC \u901a\u4fe1\u4e00\u6837\uff0c\u901a\u4fe1\u603b\u7ebf\u4e0a\u5141\u8bb8\u6302\u8f7d\u4e00\u4e2a\u4e3b\u8bbe\u5907\u548c\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u4ece\u8bbe\u5907\u3002\u4e3a\u4e86\u8ddf\u4ece\u8bbe\u5907\u8fdb\u884c\u901a\u4fe1\uff0c\u4e00\u4e2a\u4e3b\u8bbe\u5907\u81f3\u5c11\u9700\u8981 4 \u8ddf\u6570\u636e\u7ebf\uff0c\u5206\u522b\u4e3a\uff1a</p> <ul> <li> <p>MOSI\uff08Master Out / Slave In\uff09\uff1a\u4e3b\u6570\u636e\u8f93\u51fa\uff0c\u4ece\u6570\u636e\u8f93\u5165\uff0c\u7528\u4e8e\u4e3b\u673a\u5411\u4ece\u673a\u53d1\u9001\u6570\u636e\u3002</p> </li> <li> <p>MISO\uff08Master In / Slave Out\uff09\uff1a\u4e3b\u6570\u636e\u8f93\u5165\uff0c\u4ece\u6570\u636e\u8f93\u51fa\uff0c\u7528\u4e8e\u4ece\u673a\u5411\u4e3b\u673a\u53d1\u9001\u6570\u636e\u3002</p> </li> <li> <p>SCLK\uff08Serial Clock\uff09\uff1a\u65f6\u949f\u4fe1\u53f7\uff0c\u7531\u4e3b\u8bbe\u5907\u4ea7\u751f\uff0c\u51b3\u5b9a\u901a\u4fe1\u7684\u901f\u7387\u3002</p> </li> <li> <p>CS\uff08Chip Select\uff09\uff1a\u4ece\u8bbe\u5907\u7247\u9009\u4fe1\u53f7\uff0c\u7531\u4e3b\u8bbe\u5907\u4ea7\u751f\uff0c\u4f4e\u7535\u5e73\u65f6\u9009\u4e2d\u4ece\u8bbe\u5907\u3002</p> </li> </ul> <p>\u591a\u4ece\u673aSPI\u901a\u4fe1\u7f51\u7edc\u8fde\u63a5\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <p></p> <p>\u4ece\u4e0a\u56fe\u53ef\u4ee5\u77e5\u9053\uff0cMOSI\u3001MISO\u3001SCLK \u5f15\u811a\u8fde\u63a5 SPI \u603b\u7ebf\u4e0a\u6bcf\u4e00\u4e2a\u8bbe\u5907\uff0c\u5982\u679c CS \u5f15\u811a\u4e3a\u4f4e\u7535\u5e73\uff0c\u5219\u4ece\u8bbe\u5907\u53ea\u4fa6\u542c\u4e3b\u673a\u5e76\u4e0e\u4e3b\u673a\u901a\u4fe1\u3002SPI\u4e3b\u8bbe\u5907\u4e00\u6b21\u53ea\u80fd\u548c\u4e00\u4e2a\u4ece\u8bbe\u5907\u8fdb\u884c\u901a\u4fe1\u3002\u5982\u679c\u4e3b\u8bbe\u5907\u8981\u548c\u53e6\u5916\u4e00\u4e2a\u4ece\u8bbe\u5907\u901a\u4fe1\uff0c\u5fc5\u987b\u5148\u7ec8\u6b62\u548c\u5f53\u524d\u4ece\u8bbe\u5907\u901a\u4fe1\uff0c\u5426\u5219\u4e0d\u80fd\u901a\u4fe1\u3002</p> <p>SPI \u901a\u4fe1\u6709 4 \u79cd\u4e0d\u540c\u7684\u6a21\u5f0f\uff0c\u4e0d\u540c\u7684\u4ece\u673a\u53ef\u80fd\u5728\u51fa\u5382\u65f6\u5c31\u914d\u7f6e\u4e3a\u67d0\u79cd\u6a21\u5f0f\uff0c\u8fd9\u662f\u4e0d\u80fd\u6539\u53d8\u7684\u3002\u901a\u4fe1\u53cc\u65b9\u5fc5\u987b\u5de5\u4f5c\u5728\u540c\u4e00\u6a21\u5f0f\u4e0b\uff0c\u624d\u80fd\u6b63\u5e38\u8fdb\u884c\u901a\u4fe1\uff0c\u6240\u4ee5\u53ef\u4ee5\u5bf9\u4e3b\u673a\u7684 SPI \u6a21\u5f0f\u8fdb\u884c\u914d\u7f6e\u3002SPI \u901a\u4fe1\u6a21\u5f0f\u662f\u901a\u8fc7\u914d\u7f6e CPOL\uff08\u65f6\u949f\u6781\u6027\uff09\u548c CPHA\uff08\u65f6\u949f\u76f8\u4f4d\uff09\u6765\u9009\u62e9\u7684\u3002</p> <p>CPOL\uff0c\u8be6\u79f0 Clock Polarity\uff0c\u5c31\u662f\u65f6\u949f\u6781\u6027\uff0c\u5f53\u4e3b\u4ece\u673a\u6ca1\u6709\u6570\u636e\u4f20\u8f93\u7684\u65f6\u5019\u5373\u7a7a\u95f2\u72b6\u6001\uff0cSCL \u7ebf\u7684\u7535\u5e73\u72b6\u6001\uff0c\u5047\u5982\u7a7a\u95f2\u72b6\u6001\u662f\u9ad8\u7535\u5e73\uff0cCPOL=1\uff1b\u82e5\u7a7a\u95f2\u72b6\u6001\u65f6\u4f4e\u7535\u5e73\uff0c\u90a3\u4e48 CPOL = 0\u3002</p> <p>CPHA\uff0c\u8be6\u79f0 Clock Phase\uff0c\u5c31\u662f\u65f6\u949f\u76f8\u4f4d\uff0c\u5b9e\u8d28\u6307\u7684\u662f\u6570\u636e\u7684\u91c7\u6837\u65f6\u523b\u3002CPHA = 0 \u8868\u793a\u6570\u636e\u7684\u91c7\u6837\u662f\u4ece\u7b2c 1 \u4e2a\u8fb9\u6cbf\u4fe1\u53f7\u4e0a\u5373\u5947\u6570\u8fb9\u6cbf\uff0c\u5177\u4f53\u662f\u4e0a\u5347\u6cbf\u8fd8\u662f\u4e0b\u964d\u6cbf\u7684\u95ee\u9898\uff0c\u662f\u7531 CPOL \u51b3\u5b9a\u7684\u3002CPHA=1 \u8868\u793a\u6570\u636e\u91c7\u6837\u662f\u4ece\u7b2c 2 \u4e2a\u8fb9\u6cbf\u5373\u5076\u6570\u8fb9\u6cbf\u3002</p> <p></p> <p>1\uff09\u6a21\u5f0f 0\uff0cCPOL=0\uff0cCPHA=0\uff1b\u7a7a\u95f2\u65f6\uff0cSCL \u5904\u4e8e\u4f4e\u7535\u5e73\uff0c\u6570\u636e\u91c7\u6837\u5728\u7b2c 1 \u4e2a\u8fb9\u6cbf\uff0c\u5373SCL \u7531\u4f4e\u7535\u5e73\u5230\u9ad8\u7535\u5e73\u7684\u8df3\u53d8\uff0c\u6570\u636e\u91c7\u6837\u5728\u4e0a\u5347\u6cbf\uff0c\u6570\u636e\u53d1\u9001\u5728\u4e0b\u964d\u6cbf\u3002</p> <p>2\uff09\u6a21\u5f0f 1\uff0cCPOL=0\uff0cCPHA=1\uff1b\u7a7a\u95f2\u65f6\uff0cSCL \u5904\u4e8e\u4f4e\u7535\u5e73\uff0c\u6570\u636e\u91c7\u6837\u5728\u7b2c 2 \u4e2a\u8fb9\u6cbf\uff0c\u5373SCL \u7531\u9ad8\u7535\u5e73\u5230\u4f4e\u7535\u5e73\u7684\u8df3\u53d8\uff0c\u6570\u636e\u91c7\u6837\u5728\u4e0b\u5347\u6cbf\uff0c\u6570\u636e\u53d1\u9001\u5728\u4e0a\u964d\u6cbf\u3002</p> <p>3\uff09\u6a21\u5f0f 2\uff0cCPOL=1\uff0cCPHA=0\uff1b\u7a7a\u95f2\u65f6\uff0cSCL \u5904\u4e8e\u9ad8\u7535\u5e73\uff0c\u6570\u636e\u91c7\u6837\u5728\u7b2c 1 \u4e2a\u8fb9\u6cbf\uff0c\u5373SCL \u7531\u9ad8\u7535\u5e73\u5230\u4f4e\u7535\u5e73\u7684\u8df3\u53d8\uff0c\u6570\u636e\u91c7\u6837\u5728\u4e0b\u5347\u6cbf\uff0c\u6570\u636e\u53d1\u9001\u5728\u4e0a\u964d\u6cbf\u3002</p> <p>4\uff09\u6a21\u5f0f 3\uff0cCPOL=1\uff0cCPHA=1\uff1b\u7a7a\u95f2\u65f6\uff0cSCL \u5904\u4e8e\u9ad8\u7535\u5e73\uff0c\u6570\u636e\u91c7\u6837\u5728\u7b2c 2 \u4e2a\u8fb9\u6cbf\uff0c\u5373SCL \u7531\u4f4e\u7535\u5e73\u5230\u9ad8\u7535\u5e73\u7684\u8df3\u53d8\uff0c\u6570\u636e\u91c7\u6837\u5728\u4e0a\u5347\u6cbf\uff0c\u6570\u636e\u53d1\u9001\u5728\u4e0b\u964d\u6cbf\u3002</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/SPI/note/#esp32-s3-spi","title":"ESP32-S3 SPI \u63a7\u5236\u5668","text":"<p>ESP32-S3 \u82af\u7247\u96c6\u6210\u4e86\u56db\u4e2a SPI \u63a7\u5236\u5668\uff0c\u5206\u522b\u4e3a SPI0\u3001SPI1\u3001SPI2 \u548c SPI3\u3002SPI0 \u548c SPI1 \u63a7\u5236\u5668\u4e3b\u8981\u4f9b\u5185\u90e8\u4f7f\u7528\u4ee5\u8bbf\u95ee\u5916\u90e8 FLASH \u548c PSRAM\uff0c\u6240\u4ee5\u53ea\u80fd\u4f7f\u7528 SPI2 \u548c SPI3 \u3002SPI2 \u53c8\u79f0\u4e3aHSPI\uff0c\u800c SPI3 \u53c8\u79f0\u4e3a VSPI\uff0c\u8fd9\u4e24\u4e2a\u5c5e\u4e8e GP-SPI\u3002 GP-SPI \u7279\u6027\uff1a - \u652f\u6301\u4e3b\u673a\u6a21\u5f0f\u548c\u4ece\u673a\u6a21\u5f0f</p> <ul> <li> <p>\u652f\u6301\u534a\u53cc\u5de5\u901a\u4fe1\u548c\u5168\u53cc\u5de5\u901a\u4fe1</p> </li> <li> <p>\u652f\u6301\u591a\u79cd\u6570\u636e\u6a21\u5f0f\uff1a</p> <ul> <li> <p>SPI2\uff1a1-bit SPI \u6a21\u5f0f\u30012-bit Dual SPI \u6a21\u5f0f\u30014-bit Quad SPI \u6a21\u5f0f\u3001QPI \u6a21\u5f0f\u30018-bit Octal \u6a21\u5f0f\u3001OPI \u6a21\u5f0f</p> </li> <li> <p>SPI3\uff1a1-bit SPI \u6a21\u5f0f\u30012-bit Dual SPI \u6a21\u5f0f\u30014-bit Quad SPI \u6a21\u5f0f\u3001QPI \u6a21\u5f0f</p> </li> </ul> </li> <li> <p>\u65f6\u949f\u9891\u7387\u53ef\u914d\u7f6e\uff1a</p> <ul> <li> <p>\u5728\u4e3b\u673a\u6a21\u5f0f\u4e0b\uff1a\u65f6\u949f\u9891\u7387\u53ef\u8fbe 80MHz</p> </li> <li> <p>\u5728\u4ece\u673a\u6a21\u5f0f\u4e0b\uff1a\u65f6\u949f\u9891\u7387\u53ef\u8fbe 60MHz</p> </li> </ul> </li> <li> <p>\u6570\u636e\u4f4d\u7684\u8bfb\u5199\u987a\u5e8f\u53ef\u914d\u7f6e</p> </li> <li> <p>\u65f6\u949f\u6781\u6027\u548c\u76f8\u4f4d\u53ef\u914d\u7f6e</p> </li> <li> <p>\u56db\u79cd SPI \u65f6\u949f\u6a21\u5f0f\uff1a\u6a21\u5f0f 0 ~ \u6a21\u5f0f 3</p> </li> <li> <p>\u5728\u4e3b\u673a\u6a21\u5f0f\u4e0b\uff0c\u63d0\u4f9b\u591a\u6761 CS \u7ebf</p> <ul> <li> <p>SPI2\uff1aCS0 ~ CS5</p> </li> <li> <p>SPI3\uff1aCS0 ~ CS2</p> </li> </ul> </li> <li> <p>\u652f\u6301\u8bbf\u95ee SPI \u63a5\u53e3\u7684\u4f20\u611f\u5668\u3001\u663e\u793a\u5c4f\u63a7\u5236\u5668\u3001flash \u6216 RAM \u82af\u7247</p> </li> </ul> <p>SPI2 \u548c SPI3 \u63a5\u53e3\u76f8\u5173\u4fe1\u53f7\u7ebf\u53ef\u4ee5\u7ecf\u8fc7 GPIO \u4ea4\u6362\u77e9\u9635\u548c IO_MUX \u5b9e\u73b0\u4e0e\u82af\u7247\u5f15\u811a\u7684\u6620\u5c04\uff0cIO \u4f7f\u7528\u8d77\u6765\u975e\u5e38\u7075\u6d3b</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/SPI/note/#_1","title":"\u6d4b\u8bd5\u7528\u4f8b","text":"<p>\u672c\u7ae0\u4f7f\u7528SPI\u63a7\u5236LCD\u663e\u793a\u5c4f\uff0c\u8bf7\u7ed3\u5408LCD\u7ae0\u8282\u8fdb\u884c\u5b66\u4e60\u3002\u6d4b\u8bd5\u7528\u4f8b\u5982\u4e0b\uff1a</p> <p>\u201c\u6309\u4e0b\u590d\u4f4d\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u770b\u5230 SPI LCD \u6a21\u5757\u4e0d\u505c\u7684\u663e\u793a\u4e00\u4e9b\u4fe1\u606f\u5e76\u4e0d\u65ad\u5207\u6362\u5e95\u8272\u3002LED \u95ea\u70c1\u7528\u4e8e\u63d0\u793a\u7a0b\u5e8f\u6b63\u5728\u8fd0\u884c\u3002\u201d</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/SPI/note/#_2","title":"\u7535\u8def\u56fe","text":""},{"location":"zh/DNESP32S3M/MAIN-CONTROL/SPI/note/#_3","title":"\u91cd\u70b9\u51fd\u6570\u89e3\u6790","text":""},{"location":"zh/DNESP32S3M/MAIN-CONTROL/SPI/note/#_4","title":"\u521d\u59cb\u5316\u548c\u914d\u7f6e","text":"<p>\u8be5\u51fd\u6570\u7528\u4e8e\u521d\u59cb\u5316 SPI \u603b\u7ebf\uff0c\u5e76\u914d\u7f6e\u5176 GPIO\u5f15\u811a\u548c\u4e3b\u6a21\u5f0f\u4e0b\u7684\u65f6\u949f\u7b49\u53c2\u6570\uff0c\u8be5\u51fd\u6570\u539f\u578b\u5982\u4e0b\u6240\u793a\uff1a</p> <p><pre><code>esp_err_t spi_bus_initialize(spi_host_device_t host_id,\n                    const spi_bus_config_t *bus_config,\n                                spi_dma_chan_t dma_chan);\n</code></pre> \u8be5\u51fd\u6570\u7684\u5f62\u53c2\u63cf\u8ff0\u5982\u4e0b\u8868\u6240\u793a\uff1a</p> \u53c2\u6570 \u63cf\u8ff0 host_id \u6307\u5b9a SPI \u603b\u7ebf\u7684\u4e3b\u673a\u8bbe\u5907 ID bus_config \u6307\u5411 spi_bus_config_t \u7ed3\u6784\u4f53\u7684\u6307\u9488\uff0c\u7528\u4e8e\u914d\u7f6e SPI \u603b\u7ebf\u7684SCLK\u3001MISO\u3001MOSI \u7b49\u5f15\u811a\u4ee5\u53ca\u5176\u4ed6\u53c2\u6570 dma_chan \u6307\u5b9a\u4f7f\u7528\u54ea\u4e2a DMA \u901a\u9053\u3002\u6709\u6548\u503c\u4e3a\uff1aSPI_DMA_CH_AUTO\uff0cSPI_DMA_DISABLED \u6216 1 \u81f3 2 \u4e4b\u95f4\u7684\u6570\u5b57 <p>\u8fd4\u56de\u503c\uff1aESP_OK \u914d\u7f6e\u6210\u529f\u3002\u5176\u4ed6\u914d\u7f6e\u5931\u8d25\u3002</p> <p>\u8be5\u51fd\u6570\u4f7f\u7528 spi_bus_config_t \u7c7b\u578b\u7684\u7ed3\u6784\u4f53\u53d8\u91cf\u4f20\u5165\uff0c\u7b14\u8005\u6b64\u5904\u5217\u4e3e\u4e86\u6211\u4eec\u9700\u8981\u7528\u5230\u7684\u7ed3\u6784\u4f53\uff0c\u8be5\u7ed3\u6784\u4f53\u7684\u5b9a\u4e49\u5982\u4e0b\u6240\u793a\uff1a</p> <p><pre><code>typedef struct {\n    int miso_io_num; /* MISO \u5f15\u811a\u53f7 */ \n    int mosi_io_num; /* MOSI \u5f15\u811a\u53f7 */ \n    int sclk_io_num; /* \u65f6\u949f\u5f15\u811a\u53f7 */ \n    int quadwp_io_num; /* \u7528\u4e8e Quad \u6a21\u5f0f\u7684 WP \u5f15\u811a\u53f7\uff0c\u672a\u4f7f\u7528\u65f6\u8bbe\u7f6e\u4e3a-1 */ \n    int quadhd_io_num; /* \u7528\u4e8e Quad \u6a21\u5f0f\u7684 HD \u5f15\u811a\u53f7\uff0c\u672a\u4f7f\u7528\u65f6\u8bbe\u7f6e\u4e3a-1 */ \n    int max_transfer_sz; /* \u6700\u5927\u4f20\u8f93\u5927\u5c0f */\n    \u2026 /* \u5176\u4ed6\u7279\u5b9a\u7684\u914d\u7f6e\u53c2\u6570 */\n} spi_bus_config_t;\n</code></pre> \u5b8c\u6210\u4e0a\u8ff0\u7ed3\u6784\u4f53\u53c2\u6570\u914d\u7f6e\u4e4b\u540e\uff0c\u53ef\u4ee5\u5c06\u7ed3\u6784\u4f20\u9012\u7ed9 spi_bus_initialize \u51fd\u6570\uff0c\u7528\u4ee5\u5b9e\u4f8b\u5316 SPI\u3002</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/SPI/note/#_5","title":"\u8bbe\u5907\u914d\u7f6e","text":"<p>\u8be5\u51fd\u6570\u7528\u4e8e\u5728 SPI \u603b\u7ebf\u4e0a\u5206\u914d\u8bbe\u5907\uff0c\u51fd\u6570\u539f\u578b\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>esp_err_t spi_bus_add_device(spi_host_device_t host_id,\n       const spi_device_interface_config_t *dev_config,\n                           spi_device_handle_t *handle);\n</code></pre> <p>\u8be5\u51fd\u6570\u7684\u5f62\u53c2\u63cf\u8ff0\uff0c\u5982\u4e0b\u8868\u6240\u793a\uff1a</p> \u53c2\u6570 \u63cf\u8ff0 host_id \u6307\u5b9a SPI \u603b\u7ebf\u7684\u4e3b\u673a\u8bbe\u5907 ID dev_config \u6307\u5411 spi_device_interface_config_t \u7ed3\u6784\u4f53\u7684\u6307\u9488\uff0c\u7528\u4e8e\u914d\u7f6eSPI \u8bbe\u5907\u7684\u901a\u4fe1\u53c2\u6570\uff0c\u5982\u65f6\u949f\u901f\u7387\u3001SPI \u6a21\u5f0f\u7b49\u3002 handle \u8fd4\u56de\u521b\u5efa\u7684\u8bbe\u5907\u53e5\u67c4 <p>\u8fd4\u56de\u503c\uff1aESP_OK \u914d\u7f6e\u6210\u529f\u3002\u5176\u4ed6\u914d\u7f6e\u5931\u8d25\u3002</p> <p>\u8be5\u51fd\u6570\u4f7f\u7528 spi_host_device_t \u7c7b\u578b\u4ee5\u53ca spi_device_interface_config_t \u7c7b\u578b\u7684\u7ed3\u6784\u4f53\u53d8\u91cf\u4f20\u5165SPI \u5916\u56f4\u8bbe\u5907\u7684\u914d\u7f6e\u53c2\u6570\uff0c\u8be5\u7ed3\u6784\u4f53\u7684\u5b9a\u4e49\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>/**\n* @brief \u5e26\u6709\u4e09\u4e2a SPI \u5916\u56f4\u8bbe\u5907\u7684\u679a\u4e3e\uff0c\u8fd9\u4e9b\u5916\u56f4\u8bbe\u5907\u53ef\u901a\u8fc7\u8f6f\u4ef6\u8bbf\u95ee\n*/\ntypedef enum {\n    /* SPI1 \u53ea\u80fd\u5728 ESP32 \u4e0a\u7528\u4f5c GPSPI */\n    SPI1_HOST = 0, /* SPI1 */\n    SPI2_HOST = 1, /* SPI2 */\n#if SOC_SPI_PERIPH_NUM &gt; 2\n    SPI3_HOST = 2, /* SPI3 */\n#endif\n    SPI_HOST_MAX, /* \u65e0\u6548\u7684\u4e3b\u673a\u503c */\n}spi_host_device_t\ntypedef struct {\n    uint32_t command_bits; /* \u547d\u4ee4\u9636\u6bb5\u7684\u4f4d\u6570 */\n    uint32_t address_bits; /* \u5730\u5740\u9636\u6bb5\u7684\u4f4d\u6570 */\n    uint32_t dummy_bits; /* \u865a\u62df\u9636\u6bb5\u7684\u4f4d\u6570 */\n    int clock_speed_hz; /* \u65f6\u949f\u901f\u7387 */\n    uint32_t mode; /* SPI \u6a21\u5f0f\uff080-3\uff09 */\n    int spics_io_num; /* CS \u5f15\u811a\u53f7 */\n    ...             /* \u5176\u4ed6\u8bbe\u5907\u7279\u5b9a\u7684\u914d\u7f6e\u53c2\u6570 */\n    } spi_device_interface_config_t;\n</code></pre>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/SPI/note/#_6","title":"\u6570\u636e\u4f20\u8f93","text":"<p>\u6839\u636e\u51fd\u6570\u529f\u80fd\uff0c\u4ee5\u4e0b\u51fd\u6570\u53ef\u4ee5\u5f52\u4e3a\u4e00\u7c7b\u8fdb\u884c\u8bb2\u89e3\uff0c\u4e0b\u9762\u5c06\u4ee5\u8868\u683c\u7684\u5f62\u5f0f\u9010\u4e2a\u4ecb\u7ecd\u8fd9\u4e9b\u51fd\u6570\u7684\u4f5c\u7528\u4e0e\u53c2\u6570\u3002</p> \u51fd\u6570 \u63cf\u8ff0 spi_device_transmit() \u8be5\u51fd\u6570\u7528\u4e8e\u53d1\u9001\u4e00\u4e2a SPI \u4e8b\u52a1\uff0c\u7b49\u5f85\u5b83\u5b8c\u6210\uff0c\u5e76\u8fd4\u56de\u7ed3\u679c\u3002handle\uff1a\u8bbe\u5907\u7684\u53e5\u67c4\u3002trans_desc\uff1a\u6307\u5411 spi_transaction_t \u7ed3\u6784\u4f53\u7684\u6307\u9488\uff0c\u63cf\u8ff0\u4e86\u8981\u53d1\u9001\u7684\u4e8b\u52a1\u8be6\u60c5\u3002 spi_device_polling_transmit() \u8be5\u51fd\u6570\u7528\u4e8e\u53d1\u9001\u4e00\u4e2a\u8f6e\u8be2\u4e8b\u52a1\uff0c\u7b49\u5f85\u5b83\u5b8c\u6210\uff0c\u5e76\u8fd4\u56de\u7ed3\u679c\u3002handle\uff1a\u8bbe\u5907\u7684\u53e5\u67c4\u3002trans_desc\uff1a\u6307\u5411 spi_transaction_t \u7ed3\u6784\u4f53\u7684\u6307\u9488\uff0c\u63cf\u8ff0\u4e86\u8981\u53d1\u9001\u7684\u4e8b\u52a1\u8be6\u60c5\u3002"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/SPI/note/#_7","title":"\u4f9d\u8d56\u5173\u7cfb","text":""},{"location":"zh/DNESP32S3M/MAIN-CONTROL/TF-CARD/code/","title":"TF\u5361\uff08SD\u5361\uff09\u4ee3\u7801","text":""},{"location":"zh/DNESP32S3M/MAIN-CONTROL/TF-CARD/code/#_1","title":"\u7ec4\u4ef6\u67b6\u6784","text":"<pre><code>- driver\n    - spi_sdcard\n        - include\n            - spi_sdcard.h\n        - spi_sdcard.c\n        - CMakeLists.txt\n</code></pre>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/TF-CARD/integration/","title":"\u96c6\u6210","text":""},{"location":"zh/DNESP32S3M/MAIN-CONTROL/TF-CARD/integration/#_2","title":"\u4ecb\u7ecd","text":"<p>Note</p> <p>\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u5982\u4f55\u5c06\u5b9a\u65f6\u5668\u9a71\u52a8\u96c6\u6210\u5230\u9879\u76ee\u4e2d\u3002</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/TF-CARD/integration/#_3","title":"\u521b\u5efa\u65b0\u7ec4\u4ef6","text":"<p>Warning</p> <p>\u5728 <code>driver</code> \u76ee\u5f55\u4e2d\u521b\u5efa\u7ec4\u4ef6\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u60a8\u5df2\u5c06 <code>driver</code> \u76ee\u5f55\u5408\u5e76\u5230\u9879\u76ee\u4e2d\uff0c\u65b9\u6cd5\u662f\u5c06 <code>driver</code> \u76ee\u5f55\u7684\u8def\u5f84\u6dfb\u52a0\u5230\u9879\u76ee\u7ea7 <code>CMakeLists.txt</code> \u6587\u4ef6\u4e2d\u7684 <code>EXTRA_COMPONENT_DIRS</code> \u53d8\u91cf\u4e2d\u3002</p> <p>\u5728 VSCode \u4e2d\u6253\u5f00\u9879\u76ee\uff0c\u6253\u5f00\u96c6\u6210\u7ec8\u7aef\uff0c\u8f93\u5165</p> <pre><code>get_idf \n</code></pre> <p>\u6fc0\u6d3b ESP-IDF \u73af\u5883\u3002\u7136\u540e\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a <code>spi_sdcard</code> \u7684\u65b0\u7ec4\u4ef6\uff1a</p> <pre><code>idf.py -C driver create-component spi_sdcard\n</code></pre> <p>\u4e0a\u9762\u7684\u547d\u4ee4\u610f\u5473\u7740\u5728 <code>driver</code> \u76ee\u5f55\u4e2d\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a <code>spi_sdcard</code> \u7684\u65b0\u7ec4\u4ef6\u3002\u6267\u884c\u547d\u4ee4\u540e\uff0c\u60a8\u5c06\u5728 <code>driver</code> \u76ee\u5f55\u4e2d\u770b\u5230\u4e00\u4e2a\u540d\u4e3a <code>spi_sdcard</code> \u7684\u65b0\u76ee\u5f55\u3002\u547d\u4ee4\u5c06\u81ea\u52a8\u751f\u6210\u65b0\u7ec4\u4ef6\u7684 <code>CMakeLists.txt</code> \u6587\u4ef6\uff0c\u4ee5\u53ca <code>spi_sdcard.h</code> \u548c <code>spi_sdcard.c</code> \u6587\u4ef6\u3002</p> <p>\u6216\u8005\uff0c\u60a8\u53ef\u4ee5\u5728 <code>driver</code> \u76ee\u5f55\u4e2d\u624b\u52a8\u521b\u5efa <code>spi_sdcard</code> \u76ee\u5f55\uff0c\u7136\u540e\u5728 <code>spi_sdcard</code> \u76ee\u5f55\u4e2d\u521b\u5efa <code>CMakeLists.txt</code>\u3001<code>spi_sdcard.h</code> \u548c <code>spi_sdcard.c</code> \u6587\u4ef6\u3002</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/TF-CARD/integration/#_4","title":"\u66ff\u6362\u4ee3\u7801","text":"<p>\u7ec4\u4ef6\u5c42\u9762</p> <p>\u5c06\u672c\u8282\u4e2d\u4ee3\u7801\u5206\u522b\u66ff\u6362\u5230\u7ec4\u4ef6\u4e0b\u7684<code>CMakelists.txt</code>\u3001<code>spi_sdcard.h</code>\u548c<code>spi_sdcard.c</code>\u6587\u4ef6\u4e2d\u3002</p> <p>\u9879\u76ee\u5c42\u9762</p> <p>\u5c06<code>main.c</code>\u4e2d\u7684\u4ee3\u7801\u66ff\u6362\u4e3a\u76f8\u5e94\u7684\u4ee3\u7801\u3002\u9879\u76ee\u5c42\u9762\u7684<code>CMakeLists.txt</code>\u6587\u4ef6\u65e0\u9700\u66f4\u6539\u3002</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/TF-CARD/integration/#_5","title":"\u7f16\u8bd1\u70e7\u5f55","text":"<p>\u5728 VSCode \u4e2d\u6253\u5f00\u9879\u76ee\uff0c\u6253\u5f00\u96c6\u6210\u7ec8\u7aef\uff0c\u8f93\u5165</p> <pre><code>idf.py build flash monitor\n</code></pre> <p>\u7136\u540e\u60a8\u5c06\u5728 LCD \u5c4f\u5e55\u4e0a\u770b\u5230 SD \u5361\u4fe1\u606f\u3002</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/TF-CARD/note/","title":"TF\u5361\uff08SD\u5361\uff09\u64cd\u4f5c - SPI\u65b9\u5f0f","text":""},{"location":"zh/DNESP32S3M/MAIN-CONTROL/TF-CARD/note/#_1","title":"\u4ecb\u7ecd","text":"<p>SD\u5361\u4ecb\u7ecd</p> <p>\u672c\u5f88\u591a\u5355\u7247\u673a\u7cfb\u7edf\u90fd\u9700\u8981\u5927\u5bb9\u91cf\u5b58\u50a8\u8bbe\u5907\uff0c\u4ee5\u5b58\u50a8\u6570\u636e\u3002\u76ee\u524d\u5e38\u7528\u7684\u6709U\u76d8\uff0cFLASH\u82af\u7247\uff0cSD\u5361\u7b49\u3002\u4ed6\u4eec\u5404\u6709\u4f18\u70b9\uff0c\u7efc\u5408\u6bd4\u8f83\uff0c\u6700\u9002\u5408\u5355\u7247\u673a\u7cfb\u7edf\u7684\u83ab\u8fc7\u4e8eSD\u5361\u4e86\uff0c\u5b83\u4e0d\u4ec5\u5bb9\u91cf\u53ef\u4ee5\u505a\u5230\u5f88\u5927\uff0832GB\u4ee5\u4e0a\uff09\uff0c\u652f\u6301SPI/SDIO\u9a71\u52a8\uff0c\u800c\u4e14\u6709\u591a\u79cd\u4f53\u79ef\u7684\u5c3a\u5bf8\u53ef\u4f9b\u9009\u62e9\uff08\u6807\u51c6\u7684SD\u5361\u5c3a\u5bf8\u53caMicro SD\u5361\u5c3a\u5bf8\u7b49\uff09\uff0c\u80fd\u6ee1\u8db3\u4e0d\u540c\u5e94\u7528\u7684\u8981\u6c42\u3002</p> <p>\u53ea\u9700\u8981\u5c11\u6570\u51e0\u4e2aIO\u53e3\u5373\u53ef\u5916\u6269\u4e00\u4e2a\u9ad8\u8fbe32GB\u6216\u4ee5\u4e0a\u7684\u5916\u90e8\u5b58\u50a8\u5668\uff0c\u5bb9\u91cf\u4ece\u51e0\u5341M\u5230\u51e0\u5341G\u9009\u62e9\u8303\u56f4\u5f88\u5927\uff0c\u66f4\u6362\u4e5f\u5f88\u65b9\u4fbf\uff0c\u7f16\u7a0b\u4e5f\u7b80\u5355\uff0c\u662f\u5355\u7247\u673a\u5927\u5bb9\u91cf\u5916\u90e8\u5b58\u50a8\u5668\u7684\u9996\u9009\u3002</p> <p>\u6b63\u70b9\u539f\u5b50ESP32-S3\u6700\u5c0f\u7cfb\u7edf\u677f\u4f7f\u7528\u7684\u63a5\u53e3\u662fMicro SD\u5361\u63a5\u53e3\uff0c\u5361\u5ea7\u5e26\u81ea\u9501\u529f\u80fd\uff0cSD SPI\u4e3b\u673a\u9a71\u52a8\u7a0b\u5e8f\u57fa\u4e8eSPI Master Driver\u5b9e\u73b0\u3002\u501f\u52a9SPI\u4e3b\u63a7\u9a71\u52a8\u7a0b\u5e8f\uff0cSD\u5361\u53ca\u5176\u4ed6SPI\u8bbe\u5907\u53ef\u4ee5\u5171\u4eab\u540c\u4e00SPI\u603b\u7ebf\u3002SPI\u4e3b\u673a\u9a71\u52a8\u7a0b\u5e8f\u5c06\u5904\u7406\u6765\u81ea\u4e0d\u540c\u4efb\u52a1\u7684\u72ec\u5360\u8bbf\u95ee\u3002</p> <p>Info</p> <p>\u4e00\u4e2a\u5b8c\u6574\u7684 SD\u5361\u64cd\u4f5c\u8fc7\u7a0b\u662f\uff1a\u4e3b\u673a(\u5355\u7247\u673a\u7b49)\u53d1\u8d77\u201c\u547d\u4ee4\u201d\uff0cSD\u5361\u6839\u636e\u547d\u4ee4\u7684\u5185\u5bb9\u51b3\u5b9a\u662f\u5426\u53d1\u9001\u54cd\u5e94\u4fe1\u606f\u53ca\u6570\u636e\u7b49\uff0c\u5982\u679c\u662f\u6570\u636e\u8bfb/\u5199\u64cd\u4f5c\uff0c\u4e3b\u673a\u8fd8\u9700\u8981\u53d1\u9001\u505c\u6b62\u8bfb/\u5199\u6570\u636e\u7684\u547d\u4ee4\u6765\u7ed3\u675f\u672c\u6b21\u64cd\u4f5c\uff0c\u8fd9\u610f\u5473\u7740\u4e3b\u673a\u53d1\u8d77\u547d\u4ee4\u6307\u4ee4\u540e\uff0cSD \u5361\u53ef\u4ee5\u6ca1\u6709\u54cd\u5e94\u3001\u6570\u636e\u7b49\u8fc7\u7a0b\uff0c\u8fd9\u53d6\u51b3\u4e8e\u547d\u4ee4\u7684\u542b\u4e49\u3002</p> <p>\u5361\u6a21\u5f0f</p> <p>SD\u5361\u6709\u4e24\u79cd\u6709\u6548\u64cd\u4f5c\u6a21\u5f0f\uff1a\u201c\u5361\u8bc6\u522b\u6a21\u5f0f\u201d\u548c\u201c\u6570\u636e\u4f20\u8f93\u6a21\u5f0f\u201d\u3002\u6839\u636e\u64cd\u4f5c\u65b9\u5f0f\u4e0d\u540c\uff0c\u5206\u4e3aSD\u6a21\u5f0f\u548cSPI\u6a21\u5f0f\u3002\u6b63\u70b9\u539f\u5b50ESP32-S3\u6700\u5c0f\u7cfb\u7edf\u677f\u4f7f\u7528\u7684\u662fSPI\u6a21\u5f0f\u3002</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/TF-CARD/note/#_2","title":"\u5173\u952e\u6b65\u9aa4","text":"<ol> <li>SD\u5361\u521d\u59cb\u5316 \uff08SPI\u6a21\u5f0f/SDIO\u6a21\u5f0f\uff09</li> <li>SD\u5361\u8bfb\u5199\u6570\u636e</li> </ol> <p>Warning</p> <p>ESP32\u7684SDIO\u9a71\u52a8\u6a21\u5f0f\u548cSPI\u9a71\u52a8\u6a21\u5f0f\u4e0d\u517c\u5bb9\uff0c\u53ea\u80fd\u9009\u62e9\u4e00\u79cd\u9a71\u52a8\u6a21\u5f0f\u3002</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/TF-CARD/note/#_3","title":"\u7528\u4f8b","text":"<p>\u672c\u7ae0\u5b9e\u9a8c\u529f\u80fd\u7b80\u4ecb\uff1a\u7ecf\u8fc7\u4e00\u7cfb\u5217\u521d\u59cb\u5316\u4e4b\u540e\uff0c\u901a\u8fc7\u4e00\u4e2a while \u5faa\u73af\u4ee5 SD \u5361\u521d\u59cb\u5316\u4e3a\u6761\u4ef6\uff0c\u4ee5\u68c0\u6d4b SD \u5361\u662f\u5426\u521d\u59cb\u5316\u6210\u529f\uff0c\u82e5\u521d\u59cb\u5316 SD \u5361\u6210\u529f\uff0c\u5219\u4f1a\u901a\u8fc7\u4e32\u53e3\u6216\u8005 VSCode \u7ec8\u7aef\u8f93\u51fa SD\u5361\u7684\u76f8\u5173\u53c2\u6570\uff0c\u5e76\u5728 LCD \u4e0a\u663e\u793a SD \u5361\u7684\u603b\u5bb9\u91cf\u4ee5\u53ca\u5269\u4f59\u5bb9\u91cf\u3002\u6b64\u65f6 LED \u95ea\u70c1\uff0c\u8868\u793a\u7a0b\u5e8f\u6b63\u5728\u8fd0\u884c\u3002</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/TF-CARD/note/#_4","title":"\u6d89\u53ca\u8d44\u6e90","text":"<ol> <li>LED \u706f LED -IO0</li> <li>0.96 \u5bf8 LCD</li> <li>SD CS-IO2 SCK-IO12 MOSI-IO11 MISO-IO13</li> </ol>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/TF-CARD/note/#_5","title":"\u63a5\u7ebf\u56fe","text":"<p>\u672c\u7ae0\u5b9e\u9a8c\u4f7f\u7528 SPI \u63a5\u53e3\u4e0e SD \u5361\u8fdb\u884c\u8fde\u63a5\uff0cDNESP32S3M \u6700\u5c0f\u7cfb\u7edf\u677f\u677f\u8f7d\u4e86\u4e00\u4e2a Micro SD\u5361\u5ea7\u7528\u4e8e\u8fde\u63a5 SD \u5361\uff0cSD \u5361\u4e0e ESP32-S3 \u7684\u8fde\u63a5\u539f\u7406\u56fe\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002</p> <p></p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/TF-CARD/note/#esp-idf-api","title":"ESP-IDF API","text":"<p>\u8981\u4f7f\u7528SD\u5361\u76f8\u5173\u529f\u80fd\uff0c\u9996\u5148\u8981\u5bfc\u5165\u9700\u8981\u7684\u6587\u4ef6\u3002</p> <pre><code>#include \"driver/sdspi_host.h\"\n#include \"driver/spi_common.h\"\n#include \"sdmmc_cmd.h\"\n#include \"driver/sdmmc_host.h\"\n#include \"spi.h\"\n</code></pre>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/TF-CARD/note/#_6","title":"\u5173\u952e\u51fd\u6570","text":""},{"location":"zh/DNESP32S3M/MAIN-CONTROL/TF-CARD/note/#sd","title":"\u6302\u8f7dSD\u5361","text":"<pre><code>esp_err_t esp_vfs_fat_sdspi_mount(const char* base_path,\n                                  const sdmmc_host_t* host_config_input,\n                                  const sdspi_device_config_t* slot_config,\n                                  const esp_vfs_fat_mount_config_t*mount_config,\n                                  sdmmc_card_t** out_card);\n</code></pre> <p>\u53c2\u6570\u8bf4\u660e\uff1a</p> \u53c2\u6570 \u8bf4\u660e base_path \u6302\u8f7d\u70b9\uff0c\u5e94\u8be5\u6ce8\u518c\u5206\u533a\u7684\u8def\u5f84\uff08\u4f8b\u5982\u201c/sdcard\u201d\uff09 host_config_input SDMMC\u4e3b\u673a\u914d\u7f6e\uff0c\u6307\u5411\u63cf\u8ff0 SDMMC \u4e3b\u673a\u7684\u7ed3\u6784\u7684\u6307\u9488\u3002\u6b64\u7ed3\u6784\u53ef\u4ee5\u4f7f\u7528 SDSPI_HOST_DEFAULT \u5b8f\u521d\u59cb\u5316\u3002 slot_config SD\u5361\u914d\u7f6e\uff0c\u6307\u5411\u5177\u6709\u63d2\u69fd\u914d\u7f6e\u7684\u7ed3\u6784\u7684\u6307\u9488,\u5bf9\u4e8e SPI \u5916\u8bbe\uff0c\u5c06\u6307\u9488\u4f20\u9012\u5230\u4f7f\u7528 sdspi_device_config_DEFAULT \u521d\u59cb\u5316\u7684sdspi_device_config_t \u7ed3\u6784\u3002 mount_config \u6302\u8f7d\u914d\u7f6e\uff0c\u6307\u5411 esp_vfs_fat_mount_config_t \u7ed3\u6784\u7684\u6307\u9488\uff0c\u7528\u4e8e\u914d\u7f6e FAT \u6587\u4ef6\u7cfb\u7edf\u7684\u6302\u8f7d\u9009\u9879\u3002 out_card \u5982\u679c\u4e0d\u662f NULL\uff0c\u6307\u5411\u5361\u7247\u4fe1\u606f\u7ed3\u6784\u7684\u6307\u9488\u5c06\u901a\u8fc7\u6b64\u53c2\u6570 \u8fd4\u56de\u3002 <p>\u8fd4\u56de\u503c\u8bf4\u660e\uff1a</p> \u8fd4\u56de\u503c \u8bf4\u660e ESP_OK \u6210\u529f ESP_ERR_INVALID_STATE \u65e0\u6548\u72b6\u6001\uff0c\u5982\u679c\u5df2\u7ecf\u8c03\u7528\u4e86 esp_vfs_fat_sdmmc_mount ESP_ERR_NO_MEM \u5982\u679c\u65e0\u6cd5\u5206\u914d\u5185\u5b58 ESP_FAIL \u5982\u679c\u5206\u533a\u65e0\u6cd5\u5b89\u88c5\uff0c\u5219\u6765\u81ea SDMMC \u6216 SPI \u9a71\u52a8\u7a0b\u5e8f\u3001SDMMC \u534f\u8bae\u6216 FATFS \u9a71\u52a8\u7a0b\u5e8f\u7684\u5176\u4ed6\u9519\u8bef\u4ee3\u7801"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/TF-CARD/note/#sd_1","title":"\u53d6\u6d88\u6302\u8f7dSD\u5361","text":"<pre><code>esp_err_t esp_vfs_fat_sdcard_unmount(const char* base_path, sdmmc_card_t *card);\n</code></pre> <p>\u53c2\u6570\u8bf4\u660e\uff1a</p> \u53c2\u6570 \u8bf4\u660e base_path \u6302\u8f7d\u70b9\uff0c\u5e94\u8be5\u6ce8\u518c\u5206\u533a\u7684\u8def\u5f84\uff08\u4f8b\u5982\u201c/sdcard\u201d\uff09 card SD / MMC \u5361\u7ed3\u6784 <p>\u8fd4\u56de\u503c\u8bf4\u660e\uff1a</p> \u8fd4\u56de\u503c \u8bf4\u660e ESP_OK \u6210\u529f ESP_ERR_INVALID_ARG \u5982\u679c card \u53c2\u6570\u672a\u6ce8\u518c ESP_ERR_INVALID_STATE \u5982\u679c\u5c1a\u672a\u8c03\u7528 esp_vfs_fat_sdmmc_mount"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/TF-CARD/note/#_7","title":"\u4f9d\u8d56\u5173\u7cfb","text":""},{"location":"zh/DNESP32S3M/MAIN-CONTROL/TIMER/code/","title":"\u5b9a\u65f6\u5668 \u4ee3\u7801","text":""},{"location":"zh/DNESP32S3M/MAIN-CONTROL/TIMER/code/#_2","title":"\u7ec4\u4ef6\u67b6\u6784","text":"<pre><code>- driver\n    - tim\n        - include\n            - tim.h\n        - tim.c\n        - CMakeLists.txt\n</code></pre>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/TIMER/code/#drivertimercmakeliststxt","title":"driver/timer/CMakeLists.txt","text":"<pre><code>set(src_dirs\n    .\n)\n\nset(include_dirs\n    include\n)\n\nset(requires\n    driver\n    esp_timer\n    led\n)\n\nidf_component_register(SRC_DIRS ${src_dirs} INCLUDE_DIRS ${include_dirs} REQUIRES ${requires})\n</code></pre> <p>Note</p> <p>\u6ce8\u610f\uff0c\u5728\u9a71\u52a8\u7a0b\u5e8f\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 ESP-IDF \u5185\u7f6e\u7684 <code>driver</code> \u5e93\u4e2d\u7684 gpio\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u5728 <code>CMakeLists.txt</code> \u6587\u4ef6\u7684 <code>REQUIRES</code> \u5b57\u6bb5\u4e2d\u6307\u5b9a\u6b64\u4f9d\u8d56\u9879\u3002 \u6b64\u5916\uff0c\u6211\u4eec\u4f7f\u7528LED\u6765\u4f53\u73b0\u5916\u90e8\u4e2d\u65ad\u7684\u6548\u679c\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5728<code>REQUIRES</code>\u5b57\u6bb5\u4e2d\u6dfb\u52a0<code>led</code>\u3002  \u518d\u6709\uff0c\u5bf9\u4e8e\u5b9a\u65f6\u5668\uff0c\u6211\u4eec\u9700\u8981\u5728<code>REQUIRES</code>\u5b57\u6bb5\u4e2d\u6dfb\u52a0<code>esp_timer</code>\u3002</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/TIMER/integration/","title":"\u96c6\u6210","text":""},{"location":"zh/DNESP32S3M/MAIN-CONTROL/TIMER/integration/#_2","title":"\u4ecb\u7ecd","text":"<p>Note</p> <p>\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u5982\u4f55\u5c06\u5b9a\u65f6\u5668\u9a71\u52a8\u96c6\u6210\u5230\u9879\u76ee\u4e2d\u3002</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/TIMER/integration/#_3","title":"\u521b\u5efa\u65b0\u7ec4\u4ef6","text":"<p>Warning</p> <p>\u5728 <code>driver</code> \u76ee\u5f55\u4e2d\u521b\u5efa\u7ec4\u4ef6\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u60a8\u5df2\u5c06 <code>driver</code> \u76ee\u5f55\u5408\u5e76\u5230\u9879\u76ee\u4e2d\uff0c\u65b9\u6cd5\u662f\u5c06 <code>driver</code> \u76ee\u5f55\u7684\u8def\u5f84\u6dfb\u52a0\u5230\u9879\u76ee\u7ea7 <code>CMakeLists.txt</code> \u6587\u4ef6\u4e2d\u7684 <code>EXTRA_COMPONENT_DIRS</code> \u53d8\u91cf\u4e2d\u3002</p> <p>\u5728 VSCode \u4e2d\u6253\u5f00\u9879\u76ee\uff0c\u6253\u5f00\u96c6\u6210\u7ec8\u7aef\uff0c\u8f93\u5165</p> <pre><code>get_idf \n</code></pre> <p>\u6fc0\u6d3b ESP-IDF \u73af\u5883\u3002\u7136\u540e\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a <code>tim</code> \u7684\u65b0\u7ec4\u4ef6\uff1a</p> <pre><code>idf.py -C driver create-component tim\n</code></pre> <p>\u4e0a\u9762\u7684\u547d\u4ee4\u610f\u5473\u7740\u5728 <code>driver</code> \u76ee\u5f55\u4e2d\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a <code>tim</code> \u7684\u65b0\u7ec4\u4ef6\u3002\u6267\u884c\u547d\u4ee4\u540e\uff0c\u60a8\u5c06\u5728 <code>driver</code> \u76ee\u5f55\u4e2d\u770b\u5230\u4e00\u4e2a\u540d\u4e3a <code>tim</code> \u7684\u65b0\u76ee\u5f55\u3002\u547d\u4ee4\u5c06\u81ea\u52a8\u751f\u6210\u65b0\u7ec4\u4ef6\u7684 <code>CMakeLists.txt</code> \u6587\u4ef6\uff0c\u4ee5\u53ca <code>tim.h</code> \u548c <code>tim.c</code> \u6587\u4ef6\u3002</p> <p>\u6216\u8005\uff0c\u60a8\u53ef\u4ee5\u5728 <code>driver</code> \u76ee\u5f55\u4e2d\u624b\u52a8\u521b\u5efa <code>tim</code> \u76ee\u5f55\uff0c\u7136\u540e\u5728 <code>tim</code> \u76ee\u5f55\u4e2d\u521b\u5efa <code>CMakeLists.txt</code>\u3001<code>tim.h</code> \u548c <code>tim.c</code> \u6587\u4ef6\u3002</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/TIMER/integration/#_4","title":"\u66ff\u6362\u4ee3\u7801","text":"<p>\u7ec4\u4ef6\u5c42\u9762</p> <p>\u5c06\u672c\u8282\u4e2d\u4ee3\u7801\u5206\u522b\u66ff\u6362\u5230\u7ec4\u4ef6\u4e0b\u7684<code>CMakelists.txt</code>\u3001<code>tim.h</code>\u548c<code>tim.c</code>\u6587\u4ef6\u4e2d\u3002</p> <p>\u9879\u76ee\u5c42\u9762</p> <p>\u5c06<code>main.c</code>\u4e2d\u7684\u4ee3\u7801\u66ff\u6362\u4e3a\u76f8\u5e94\u7684\u4ee3\u7801\u3002\u9879\u76ee\u5c42\u9762\u7684<code>CMakeLists.txt</code>\u6587\u4ef6\u65e0\u9700\u66f4\u6539\u3002</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/TIMER/integration/#_5","title":"\u7f16\u8bd1\u70e7\u5f55","text":"<p>\u5728 VSCode \u4e2d\u6253\u5f00\u9879\u76ee\uff0c\u6253\u5f00\u96c6\u6210\u7ec8\u7aef\uff0c\u8f93\u5165</p> <p><pre><code>idf.py build flash monitor\n</code></pre> \u6b64\u65f6\uff0c\u60a8\u5c06\u770b\u5230 LED \u6bcf\u9694 1s \u95ea\u70c1\u4e00\u6b21\uff0c\u8fd9\u662f\u7531\u5b9a\u65f6\u5668\u5468\u671f\u8bbe\u7f6e\u7684\u3002</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/TIMER/note/","title":"\u5b9a\u65f6\u5668","text":""},{"location":"zh/DNESP32S3M/MAIN-CONTROL/TIMER/note/#_2","title":"\u4ecb\u7ecd","text":"<p>\u672c\u7ae0\u4ecb\u7ecd ESP32 \u5b9a\u65f6\u5668\u7684\u4f7f\u7528\u3002</p> <p>\u5b9a\u65f6\u5668</p> <p>\u5b9a\u65f6\u5668\u662f\u5355\u7247\u673a\u5185\u90e8\u96c6\u6210\u7684\u529f\u80fd\uff0c\u5b83\u80fd\u591f\u901a\u8fc7\u7f16\u7a0b\u8fdb\u884c\u7075\u6d3b\u63a7\u5236\u3002\u5355\u7247\u673a\u7684\u5b9a\u65f6\u529f\u80fd\u4f9d\u8d56\u4e8e\u5185\u90e8\u7684\u8ba1\u6570\u5668\u5b9e\u73b0\uff0c\u6bcf\u5f53\u5355\u7247\u673a\u7ecf\u5386\u4e00\u4e2a\u673a\u5668\u5468\u671f\u5e76\u4ea7\u751f\u4e00\u4e2a\u8109\u51b2\u65f6\uff0c\u8ba1\u6570\u5668\u5c31\u4f1a\u9012\u589e\u3002\u5b9a\u65f6\u5668\u7684\u4e3b\u8981\u4f5c\u7528\u5728\u4e8e\u8ba1\u65f6\uff0c\u5f53\u8bbe\u5b9a\u7684\u65f6\u95f4\u5230\u8fbe\u540e\uff0c\u5b83\u4f1a\u89e6\u53d1\u4e2d\u65ad\uff0c\u4ece\u800c\u901a\u77e5\u7cfb\u7edf\u8ba1\u65f6\u5b8c\u6210\u3002\u5728\u4e2d\u65ad\u670d\u52a1\u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u7f16\u5199\u7279\u5b9a\u7684\u7a0b\u5e8f\u4ee5\u5b9e\u73b0\u6240\u9700\u7684\u529f\u80fd\u3002</p> <p>\u5b9a\u65f6\u5668\u80fd\u505a\u4ec0\u4e48</p> <ul> <li> <p>\u6267\u884c\u5b9a\u65f6\u4efb\u52a1\uff1a\u5b9a\u65f6\u5668\u5e38\u7528\u4e8e\u5468\u671f\u6027\u6267\u884c\u7279\u5b9a\u4efb\u52a1\u3002\u4f8b\u5982\uff0c\u82e5\u9700\u8981\u6bcf 500 \u6beb\u79d2\u6267\u884c\u67d0\u9879\u4efb\u52a1\uff0c\u5b9a\u65f6\u5668\u80fd\u591f\u7cbe\u51c6\u5730\u6ee1\u8db3\u8fd9\u4e00\u9700\u6c42\u3002</p> </li> <li> <p>\u65f6\u95f4\u6d4b\u91cf\uff1a\u5b9a\u65f6\u5668\u80fd\u591f\u7cbe\u786e\u6d4b\u91cf\u65f6\u95f4\uff0c\u65e0\u8bba\u662f\u4ee3\u7801\u6bb5\u7684\u6267\u884c\u65f6\u95f4\u8fd8\u662f\u4e8b\u4ef6\u53d1\u751f\u7684\u95f4\u9694\u65f6\u95f4\uff0c\u90fd\u80fd\u901a\u8fc7\u5b9a\u65f6\u5668\u8fdb\u884c\u51c6\u786e\u7684\u8ba1\u91cf\u3002</p> </li> <li> <p>\u7cbe\u786e\u5ef6\u65f6\uff1a\u5bf9\u4e8e\u9700\u8981\u5fae\u79d2\u7ea7\u7cbe\u5ea6\u7684\u5ef6\u65f6\u573a\u666f\uff0c\u5b9a\u65f6\u5668\u80fd\u591f\u63d0\u4f9b\u53ef\u9760\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u786e\u4fdd\u5ef6\u65f6\u7684\u7cbe\u786e\u6027\u3002</p> </li> <li> <p>PWN\u4fe1\u53f7\u751f\u6210\uff1a\u901a\u8fc7\u5b9a\u65f6\u5668\u7684\u7cbe\u786e\u63a7\u5236\uff0c\u6211\u4eec\u53ef\u4ee5\u751f\u6210PWM\uff08\u8109\u5bbd\u8c03\u5236\uff09\u4fe1\u53f7\uff0c\u8fd9\u5bf9\u4e8e\u9a71\u52a8\u7535\u673a\u3001\u8c03\u8282 LED \u4eae\u5ea6\u7b49\u5e94\u7528\u81f3\u5173\u91cd\u8981\u3002</p> </li> <li> <p>\u4e8b\u4ef6\u89e6\u53d1\u4e0e\u76d1\u63a7\uff1a\u5b9a\u65f6\u5668\u4e0d\u4ec5\u7528\u4e8e\u89e6\u53d1\u4e2d\u65ad\uff0c\u5b9e\u73b0\u4e8b\u4ef6\u9a71\u52a8\u7684\u903b\u8f91\uff0c\u8fd8\u53ef\u7528\u4e8e\u5b9e\u73b0\u770b\u95e8\u72d7\u529f\u80fd\uff0c\u76d1\u63a7\u7cfb\u7edf\u72b6\u6001\uff0c\u5e76\u5728\u5fc5\u8981\u65f6\u8fdb\u884c\u590d\u4f4d\u64cd\u4f5c\uff0c\u786e\u4fdd\u7cfb\u7edf\u7684\u7a33\u5b9a\u8fd0\u884c\u3002</p> </li> </ul> <p>\u5b9a\u65f6\u5668\u7c7b\u578b</p> <p>\u5b9a\u65f6\u5668\u65e2\u53ef\u901a\u8fc7\u786c\u4ef6\u5b9e\u73b0\uff0c\u4e5f\u53ef\u57fa\u4e8e\u8f6f\u4ef6\u8fdb\u884c\u8bbe\u8ba1\uff0c\u4e8c\u8005\u5404\u5177\u7279\u8272\uff0c\u9002\u7528\u4e8e\u4e0d\u540c\u573a\u666f\uff1a \u786c\u4ef6\u5b9a\u65f6\u5668\uff0c\u4f9d\u6258\u5fae\u63a7\u5236\u5668\u7684\u5185\u7f6e\u786c\u4ef6\u673a\u5236\uff0c\u901a\u8fc7\u4e13\u95e8\u7684\u8ba1\u65f6/\u8ba1\u6570\u5668\u7535\u8def\u8fbe\u6210\u5b9a\u65f6\u529f\u80fd\u3002\u5176\u663e\u8457\u4f18\u52bf\u5728\u4e8e\u9ad8\u7cbe\u5ea6\u4e0e\u9ad8\u53ef\u9760\u6027\uff0c\u8fd9\u662f\u56e0\u4e3a\u786c\u4ef6\u5b9a\u65f6\u5668\u7684\u5de5\u4f5c\u72ec\u7acb\u4e8e\u8f6f\u4ef6\u4efb\u52a1\u548c\u64cd\u4f5c\u7cfb\u7edf\u8c03\u5ea6\uff0c\u6545\u800c\u4e0d\u53d7\u5b83\u4eec\u7684\u5f71\u54cd\u3002\u5728\u8ffd\u6c42\u6781\u9ad8\u5b9a\u65f6\u7cbe\u786e\u5ea6\u7684\u573a\u5408\uff0c\u5982\u751f\u6210 PWM \u4fe1\u53f7\u6216\u8fdb\u884c\u7cbe\u786e\u65f6\u95f4\u6d4b\u91cf\u65f6\uff0c\u786c\u4ef6\u5b9a\u65f6\u5668\u65e0\u7591\u662f\u6700\u4f73\u9009\u62e9\u3002\u5176\u5de5\u4f5c\u539f\u7406\u786e\u4fdd\u5373\u4fbf\u4e3b CPU \u5fd9\u4e8e\u5176\u4ed6\u4efb\u52a1\uff0c\u5b9a\u65f6\u5668\u4e5f\u80fd\u5728\u9884\u8bbe\u65f6\u95f4\u51c6\u786e\u89e6\u53d1\u76f8\u5e94\u64cd\u4f5c\u3002 \u800c\u8f6f\u4ef6\u5b9a\u65f6\u5668\uff0c\u5219\u662f\u901a\u8fc7\u64cd\u4f5c\u7cfb\u7edf\u6216\u8f6f\u4ef6\u5e93\u6a21\u62df\u5b9e\u73b0\u7684\u5b9a\u65f6\u529f\u80fd\u3002\u8fd9\u7c7b\u5b9a\u65f6\u5668\u7684\u6027\u80fd\u53d7\u7cfb\u7edf\u5f53\u524d\u8d1f\u8f7d\u548c\u4efb\u52a1\u8c03\u5ea6\u7b56\u7565\u5236\u7ea6\uff0c\u56e0\u6b64\u5728\u7cbe\u5ea6\u4e0a\u8f83\u786c\u4ef6\u5b9a\u65f6\u5668\u7a0d\u900a\u4e00\u7b79\u3002\u7136\u800c\uff0c\u8f6f\u4ef6\u5b9a\u65f6\u5668\u5728\u7075\u6d3b\u6027\u65b9\u9762\u66f4\u80dc\u4e00\u7b79\uff0c\u5141\u8bb8\u521b\u5efa\u5927\u91cf\u5b9a\u65f6\u5668\uff0c\u9002\u7528\u4e8e\u5bf9\u65f6\u95f4\u63a7\u5236\u8981\u6c42\u4e0d\u90a3\u4e48\u4e25\u683c\u7684\u573a\u666f\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u8f6f\u4ef6\u5b9a\u65f6\u5668\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u53ef\u80fd\u9762\u4e34\u5b9a\u65f6\u7cbe\u5ea6\u95ee\u9898\uff0c\u7279\u522b\u662f\u5728\u7cfb\u7edf\u8d1f\u8f7d\u8f83\u91cd\u6216\u5b58\u5728\u4f17\u591a\u9ad8\u4f18\u5148\u7ea7\u4efb\u52a1\u65f6\u3002\u4e0d\u8fc7\uff0c\u5bf9\u4e8e\u7b80\u5355\u7684\u975e\u9ad8\u7cbe\u5ea6\u5ef6\u65f6\u9700\u6c42\uff0c\u8f6f\u4ef6\u5b9a\u65f6\u5668\u901a\u5e38\u5df2\u7ecf\u8db3\u591f\u5e94\u5bf9\u3002</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/TIMER/note/#esp32-s3","title":"ESP32-S3 \u5b9a\u65f6\u5668\u6574\u4f53\u6846\u67b6","text":"<p>\u7cfb\u7edf\u5b9a\u65f6\u5668\u5185\u7f6e\u4e24\u4e2a\u8ba1\u6570\u5668 UNIT0 \u548c UNIT1(\u5982\u56fe\u6240\u793a)\u4ee5\u53ca\u4e09\u4e2a\u6bd4\u8f83\u5668 COMP0\u3001COMP1\u3001COMP2(\u5982\u56fe\u6240\u793a)\u3002\u6bd4\u8f83\u5668\u7528\u4e8e\u76d1\u63a7\u8ba1\u6570\u5668\u7684\u8ba1\u6570\u503c\u662f\u5426\u8fbe\u5230\u62a5\u8b66\u503c\u3002</p> <p>(1) \u8ba1\u6570\u5668</p> <p>UNIT0\u3001UNIT1 \u5747\u4e3a ESP32-S3 \u7cfb\u7edf\u5b9a\u65f6\u5668\u5185\u7f6e\u7684 52 \u4f4d\u8ba1\u6570\u5668\u3002\u8ba1\u6570\u5668\u4f7f\u7528 XTAL_CLK \u4f5c\u4e3a\u65f6\u949f\u6e90(40MHz)\u3002XTAL_CLK \u7ecf\u5206\u9891\u540e\uff0c\u5728\u4e00\u4e2a\u8ba1\u6570\u5468\u671f\u751f\u6210\u9891\u7387\u4e3a fXTAL_CLK/3 \u7684\u65f6\u949f\u4fe1\u53f7\uff0c\u7136\u540e\u5728\u53e6\u4e00\u4e2a\u8ba1\u6570\u5468\u671f\u751f\u6210\u9891\u7387\u4e3a fXTAL_CLK/2 \u7684\u65f6\u949f\u4fe1\u53f7\u3002\u56e0\u6b64\uff0c\u8ba1\u6570\u5668\u4f7f\u7528\u7684\u65f6\u949fCNT_CLK\uff0c\u5176\u5b9e\u9645\u5e73\u5747\u9891\u7387\u4e3a fXTAL_CLK/2.5\uff0c\u5373 16MHz\uff0c\u89c1\u56fe 14.1.2\u3002\u6bcf\u4e2a CNT_CLK \u65f6\u949f\u5468\u671f\uff0c\u8ba1\u6570\u9012\u589e 1/16\u00b5s\uff0c\u5373 16 \u4e2a\u5468\u671f\u9012\u589e 1\u00b5s\u3002\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u914d\u7f6e\u5bc4\u5b58\u5668 SYSTIMER_CONF_REG \u4e2d\u4e0b\u9762\u4e09\u4e2a\u4f4d\u6765\u63a7\u5236\u8ba1\u6570\u5668 UNITn\uff0c\u8fd9\u4e09\u4e2a\u4f4d\u5206\u522b\u662f\uff1a \u2460\uff1aSYSTIMER_TIMER_UNITn_WORK_EN \u2461\uff1aSYSTIMER_TIMER_UNITn_CORE0_STALL_EN \u2462\uff1aSYSTIMER_TIMER_UNITn_CORE1_STALL_EN \u5173\u4e8e\u8fd9\u4e09\u4f4d\u7684\u914d\u7f6e\u8bf7\u53c2\u8003\u300aesp32-s3_technical_reference_manual_cn\u300b</p> <p>(2) \u6bd4\u8f83\u5668</p> <p>COMP0\u3001COMP1\u3001COMP2 \u5747\u4e3a ESP32-S3 \u7cfb\u7edf\u5b9a\u65f6\u5668\u5185\u7f6e\u7684 52 \u4f4d\u6bd4\u8f83\u5668\u3002\u6bd4\u8f83\u5668\u540c\u6837\u4f7f\u7528 XTAL_CLK \u4f5c\u4e3a\u65f6\u949f\u6e90(40MHz)\u3002</p> <p></p> <p>\u4e0a\u56fe\u5c55\u793a\u4e86\u7cfb\u7edf\u5b9a\u65f6\u5668\u751f\u6210\u62a5\u8b66\u7684\u8fc7\u7a0b\u3002\u5728\u4e0a\u8ff0\u8fc7\u7a0b\u4e2d\u7528\u5230\u4e00\u4e2a\u8ba1\u6570\u5668(Timer Countern)\u548c\u4e00\u4e2a\u6bd4\u8f83\u5668(Timer Comparatorx)\uff0c\u6bd4\u8f83\u5668\u5c06\u6839\u636e\u6bd4\u8f83\u7ed3\u679c\uff0c\u751f\u6210\u62a5\u8b66\u4e2d\u65ad\u3002</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/TIMER/note/#_3","title":"\u7528\u4f8b","text":"<p>\u6211\u4eec\u6765\u8bbe\u8ba1\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u7a0b\u5e8f\u8fd0\u884c\u540e\u914d\u7f6e\u9ad8\u5206\u8fa8\u7387\u5b9a\u65f6\u5668\uff0c\u5e76\u5f00\u542f\u4e2d\u65ad\uff0c\u5728\u4e2d\u65ad\u56de\u8c03\u51fd\u6570\u4e2d\u7ffb\u8f6cLED \u7684\u72b6\u6001\u3002\u7531\u4e8e\u4f7f\u7528\u7684\u90fd\u662f\u677f\u4e0a\u8d44\u6e90\uff0c\u6ca1\u6709\u8fde\u7ebf\u3002</p>"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/TIMER/note/#_4","title":"\u4f9d\u8d56\u5173\u7cfb","text":""},{"location":"zh/DNESP32S3M/MAIN-CONTROL/TIMER/note/#_5","title":"\u5173\u952e\u51fd\u6570","text":"\u51fd\u6570\u539f\u578b \u8bf4\u660e \u793a\u4f8b void esptim_int_init(uint64_t tps); \u521d\u59cb\u5316\u9ad8\u7cbe\u5ea6\u5b9a\u65f6\u5668(ESP_TIMER) exit_init(); void esptim_callback(void *arg); \u5b9a\u65f6\u5668\u56de\u8c03\u51fd\u6570 exit_callback(); esp_err_t esp_timer_create(const esp_timer_create_args_t* args, esp_timer_handle_t* out_handle) \u521b\u5efa\u65b0\u5b9a\u65f6\u5668 esp_timer_create(&amp;tim_periodic_arg, &amp;esp_tim_handle); esp_err_t IRAM_ATTR esp_timer_start_periodic(esp_timer_handle_t timer, uint64_t period_us) \u542f\u52a8\u5468\u671f\u6027\u5b9a\u65f6\u5668 esp_timer_start_periodic(esp_tim_handle, tps);"},{"location":"zh/DNESP32S3M/MAIN-CONTROL/TIMER/note/#_6","title":"\u603b\u7ed3","text":"<p>Note</p> <p>\u672c\u7ae0\u4ecb\u7ecd\u4e86 ESP32 \u5b9a\u65f6\u5668\u7684\u4f7f\u7528\uff0c\u901a\u8fc7\u8bbe\u8ba1\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u5b9e\u73b0\u4e86\u9ad8\u5206\u8fa8\u7387\u5b9a\u65f6\u5668\u7684\u914d\u7f6e\uff0c\u5e76\u5f00\u542f\u4e2d\u65ad\uff0c\u5728\u4e2d\u65ad\u56de\u8c03\u51fd\u6570\u4e2d\u7ffb\u8f6c LED \u7684\u72b6\u6001\u3002\u6bd4\u8f83\u5173\u952e\u7684\u51e0\u4e2a\u70b9\uff1a</p> <ul> <li> <p>\u5982\u4f55\u5c06\u5b9a\u65f6\u5668\u6587\u4ef6\u6dfb\u52a0\u5230\u9879\u76ee\u4e2d\uff0c\u6e90\u6587\u4ef6\uff0c\u5934\u6587\u4ef6\uff0c\u8def\u5f84\u4f9d\u8d56\u7b49\u3002</p> </li> <li> <p>\u5982\u4f55\u6784\u9020\u5b9a\u65f6\u5668\u7684\u521d\u59cb\u5316\u51fd\u6570\u3002</p> </li> <li> <p>\u5982\u4f55\u6784\u9020\u5b9a\u65f6\u5668\u7684\u56de\u8c03\u51fd\u6570\u3002</p> </li> <li> <p>\u5982\u4f55\u5728\u5e94\u7528\u5c42\u8c03\u7528\u5b9a\u65f6\u5668\u521d\u59cb\u5316\u51fd\u6570\u3002</p> </li> </ul>"},{"location":"zh/DNESP32S3M/MIDDLEWARE/middleware/","title":"\u4e2d\u95f4\u4ef6","text":"<p>Note</p> <p>\u672c\u7ae0\u8282\u4ecb\u7ecd\u4e86DNESP32S3M\u7684\u4e2d\u95f4\u4ef6\u3002</p>"},{"location":"zh/DNESP32S3M/MIDDLEWARE/ESP-DL/esp-dl/","title":"ESP-DL \u6df1\u5ea6\u5b66\u4e60\u5e93","text":""},{"location":"zh/DNESP32S3M/MIDDLEWARE/ESP-DL/esp-dl/#_1","title":"\u7ec4\u4ef6\u4ecb\u7ecd\u548c\u96c6\u6210\u6307\u5357","text":"<ul> <li> <p> ESP-DL \u7ec4\u4ef6</p> <p>\u7531 Espressif \u5b98\u65b9\u63d0\u4f9b</p> <p>  \u4f20\u9001\u95e8 </p> </li> </ul> <p>Note</p> <p>\u5728\u672c\u7ae0\u4e2d\uff0c\u6211\u6ca1\u6709\u4f7f\u7528\u9ed8\u8ba4\u7684\u7ec4\u4ef6\u7ba1\u7406\u5668\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u96c6\u6210\u7684\u4e2d\u95f4\u4ef6\u662f\u624b\u52a8\u79fb\u52a8\u5230 <code>middleware</code> \u76ee\u5f55\u4e2d\u7684\uff0c\u800c\u4e0d\u662f\u7559\u5728 <code>managed_components</code> \u76ee\u5f55\u4e2d\u3002</p> <p>Tip</p> <p>\u5728\u4e0b\u8f7desp_dl\u65f6\uff0c\u60a8\u8fd8\u4f1a\u770b\u5230esp_jpg\u3002\u8fd9\u662f\u56e0\u4e3aesp-dl\u4f9d\u8d56\u4e8eesp-jpg\u3002</p>"},{"location":"zh/DNESP32S3M/MIDDLEWARE/ESP-DL/esp-dl/#_2","title":"\u7ec4\u4ef6\u5728\u7ebf\u6587\u6863","text":"<ul> <li> <p> ESP-DL \u6587\u6863</p> <p>  \u4f20\u9001\u95e8 </p> </li> </ul>"},{"location":"zh/DNESP32S3M/MIDDLEWARE/ESP-DSP/esp-dsp/","title":"ESP-DSP \u6570\u5b57\u4fe1\u53f7\u5904\u7406\u5e93","text":""},{"location":"zh/DNESP32S3M/MIDDLEWARE/ESP-DSP/esp-dsp/#_1","title":"\u7ec4\u4ef6\u4ecb\u7ecd\u548c\u96c6\u6210\u6307\u5357","text":"<ul> <li> <p> ESP-DSP \u7ec4\u4ef6</p> <p>\u7531 Espressif \u5b98\u65b9\u63d0\u4f9b</p> <p>  \u4f20\u9001\u95e8 </p> </li> </ul> <p>Note</p> <p>\u5728\u672c\u7ae0\u4e2d\uff0c\u6211\u6ca1\u6709\u4f7f\u7528\u9ed8\u8ba4\u7684\u7ec4\u4ef6\u7ba1\u7406\u5668\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u96c6\u6210\u7684\u4e2d\u95f4\u4ef6\u662f\u624b\u52a8\u79fb\u52a8\u5230 <code>middleware</code> \u76ee\u5f55\u4e2d\u7684\uff0c\u800c\u4e0d\u662f\u7559\u5728 <code>managed_components</code> \u76ee\u5f55\u4e2d\u3002</p>"},{"location":"zh/DNESP32S3M/MIDDLEWARE/ESP-DSP/esp-dsp/#_2","title":"\u7ec4\u4ef6\u5728\u7ebf\u6587\u6863","text":"<ul> <li> <p> ESP-DSP \u6587\u6863</p> <p>  \u4f20\u9001\u95e8 </p> </li> </ul>"},{"location":"zh/DNESP32S3M/PERCEPTION/perception/","title":"\u611f\u77e5","text":""},{"location":"zh/DNESP32S3M/PROJECT/project/","title":"\u9879\u76ee\u6784\u5efa","text":""},{"location":"zh/DNESP32S3M/PROJECT/project/#cmakeliststxt","title":"\u9879\u76ee\u5c42\u7ea7 CMakeLists.txt \u6587\u4ef6","text":"<pre><code># The following five lines of boilerplate have to be in your project's\n# CMakeLists in this exact order for cmake to work correctly\ncmake_minimum_required(VERSION 3.16)\n\ninclude($ENV{IDF_PATH}/tools/cmake/project.cmake)\n\nset(EXTRA_COMPONENT_DIRS \"./driver\" \"./middleware\" \"./application\")\n\nproject(DNESP32S3-CORE)\n</code></pre> <p>Note</p> <p>\u4e3a\u4e86\u4e0e\u524d\u9762\u4ecb\u7ecd\u7684\u9879\u76ee\u4ee3\u7801\u67b6\u6784\u4fdd\u6301\u4e00\u81f4\uff0c\u6211\u4eec\u5efa\u8bae\u60a8\u5728\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u521b\u5efa <code>driver</code>\u3001<code>middleware</code> \u548c <code>application</code> \u76ee\u5f55\uff0c\u5e76\u5c06\u76f8\u5e94\u7684\u4ee3\u7801\u653e\u5728\u76f8\u5e94\u7684\u76ee\u5f55\u4e2d\u3002\u8981\u5c06\u8fd9\u4e9b\u76ee\u5f55\u5408\u5e76\u5230\u9879\u76ee\u4e2d\uff0c\u60a8\u9700\u8981\u5c06\u8fd9\u4e9b\u76ee\u5f55\u7684\u8def\u5f84\u6dfb\u52a0\u5230\u9879\u76ee\u7ea7 <code>CMakeLists.txt</code> \u6587\u4ef6\u4e2d\u7684 <code>EXTRA_COMPONENT_DIRS</code> \u53d8\u91cf\u4e2d\u3002</p> <p>Danger</p> <p>\u5fc5\u987b\u6ce8\u610f <code>set(EXTRA_COMPONENT_DIRS \"./driver\" \"./middleware\" \"./application\")</code> \u5fc5\u987b\u653e\u5728 <code>project(DNESP32S3-CORE)</code> \u4e4b\u524d\u3002\u5426\u5219\uff0c\u9879\u76ee\u5c06\u65e0\u6cd5\u5728\u8fd9\u4e9b\u76ee\u5f55\u4e2d\u627e\u5230\u7ec4\u4ef6\u3002\u53c2\u8003 LINK\u3002</p>"},{"location":"zh/DNESP32S3M/PROJECT/project/#cmakeliststxt_1","title":"\u4e3b\u76ee\u5f55 CMakeLists.txt","text":"<pre><code># Define source directories\nset(src_dirs\n    .\n)\n\n# Define include directories\nset(include_dirs\n    .\n)\n\n# Define required components\nset(requires\n)\n\n# Register the component\nidf_component_register(\n    SRC_DIRS ${src_dirs}\n    INCLUDE_DIRS ${include_dirs}\n    REQUIRES ${requires}\n)\n\n# Add compilation options\n# component_compile_options(-ffast-math -O3 -Wno-error=format -Wno-format)\n</code></pre>"},{"location":"zh/FKH743M2-IIT6/fkh743m2-iit6/","title":"\u53cd\u5ba2\u79d1\u6280 FKH743M2-IIT6","text":"<p>\ud83d\udcc6</p>"},{"location":"zh/KICK_START/kick_start/","title":"\u5feb\u901f\u4e0a\u624b","text":""},{"location":"zh/KICK_START/ESP32/ENVIRONMENT/environment/","title":"ESP32 \u5f00\u53d1\u73af\u5883\u8bbe\u7f6e","text":"<p>Tip</p> <p>\u5728\u7ee7\u7eed\u4e4b\u524d\uff0c\u5f3a\u70c8\u5efa\u8bae\u60a8\u9605\u8bfb\u5b98\u65b9\u6307\u5357\u4ee5\u8bbe\u7f6e\u5f00\u53d1\u73af\u5883\u3002\u5b98\u65b9\u6307\u5357\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230\u3002</p> <p>Note</p> <p>\u5982\u9700\u5728 ESP32 \u4e0a\u4f7f\u7528 ESP-IDF\uff0c\u8bf7\u5b89\u88c5\u4ee5\u4e0b\u8f6f\u4ef6\uff1a</p> <ul> <li> <p>\u8bbe\u7f6e\u5de5\u5177\u94fe\uff0c\u7528\u4e8e\u7f16\u8bd1 ESP32 \u4ee3\u7801\uff1b</p> </li> <li> <p>\u7f16\u8bd1\u6784\u5efa\u5de5\u5177 \u2014\u2014 CMake\u548cNinja\u7f16\u8bd1\u6784\u5efa\u5de5\u5177\uff0c\u7528\u4e8e\u7f16\u8bd1ESP32\u5e94\u7528\u7a0b\u5e8f\uff1b</p> </li> <li> <p>\u83b7\u53d6ESP-IDF\u8f6f\u4ef6\u5f00\u53d1\u6846\u67b6\u3002\u8be5\u6846\u67b6\u5df2\u7ecf\u57fa\u672c\u5305\u542bESP32\u4f7f\u7528\u7684API\uff08\u8f6f\u4ef6\u5e93\u548c\u6e90\u4ee3\u7801\uff09\u548c\u8fd0\u884c\u5de5\u5177\u94fe\u7684\u811a\u672c\uff1b</p> </li> </ul> <p></p> <p>Note</p> <p>\u6709\u4e24\u79cd ESP32 ESP-IDF \u7f16\u7a0b\u65b9\u5f0f\uff1a</p> <ul> <li> <p>\u547d\u4ee4\u884c\u754c\u9762\uff08CLI\uff09\uff1aESP-IDF \u7f16\u7a0b\u7684\u57fa\u7840\uff1b</p> </li> <li> <p>\u96c6\u6210\u5f00\u53d1\u73af\u5883\uff08IDE\uff09\uff1a\u9002\u5408\u521d\u5b66\u8005\u3002</p> </li> </ul>"},{"location":"zh/KICK_START/ESP32/ENVIRONMENT/environment/#cli","title":"CLI","text":"<ul> <li> <p> How to Install the ESP-IDF Toolchain on Windows (CLI)</p> <p>  \u4f20\u9001\u95e8 </p> </li> </ul>"},{"location":"zh/KICK_START/ESP32/ENVIRONMENT/environment/#ide","title":"IDE","text":"<ul> <li> <p> \u3010\u4e50\u946b\u6559\u7a0b\u3011\uff5c\u4f7f\u7528\u4e00\u952e\u5b89\u88c5\u5de5\u5177\u5feb\u901f\u642d\u5efa ESP-IDF \u5f00\u53d1\u73af\u5883 (Windows) \ud83c\udfaf\ud83c\udfc6\u2705</p> <p>  \u4f20\u9001\u95e8 </p> </li> </ul>"},{"location":"zh/KICK_START/ESP32/ENVIRONMENT/environment/#linux","title":"LINUX","text":"<p>Tip</p> <p>ESP-IDF \u5728 Linux \u4e0a\u6bd4\u5728 Windows \u4e0a\u5feb\u5f97\u591a\u3002\u5efa\u8bae\u4f7f\u7528 Linux \u8fdb\u884c ESP-IDF \u5f00\u53d1\u3002</p>"},{"location":"zh/KICK_START/ESP32/ENVIRONMENT/environment/#cli_1","title":"CLI \ud83c\udfaf","text":"<p>Note</p> <p>\u4e00\u5171\u6709\u4e94\u4e2a\u6b65\u9aa4\uff1a</p> <ul> <li> <p>\u7b2c\u4e00\u6b65\uff1a\u5b89\u88c5\u51c6\u5907</p> </li> <li> <p>\u7b2c\u4e8c\u6b65\uff1a\u83b7\u53d6ESP-IDF</p> </li> <li> <p>\u7b2c\u4e09\u6b65\uff1a\u8bbe\u7f6e\u5de5\u5177</p> </li> <li> <p>\u7b2c\u56db\u6b65\uff1a\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf</p> </li> <li> <p>\u7b2c\u4e94\u6b65\uff1a\u5f00\u59cb\u4f7f\u7528</p> </li> </ul>"},{"location":"zh/KICK_START/ESP32/ENVIRONMENT/environment/#-","title":"\u7b2c\u4e00\u6b65 - \u5b89\u88c5\u51c6\u5907","text":"<ul> <li>UBUNTU &amp; DEBIAN</li> </ul> <pre><code>sudo apt-get install git wget flex bison gperf python3 python3-pip python3-venv cmake ninja-build ccache libffi-dev libssl-dev dfu-util libusb-1.0-0\n</code></pre> <ul> <li>CENTOS</li> </ul> <pre><code>sudo yum -y update &amp;&amp; sudo yum install git wget flex bison gperf python3 python3-setuptools cmake ninja-build ccache dfu-util libusbx\n</code></pre>"},{"location":"zh/KICK_START/ESP32/ENVIRONMENT/environment/#-esp-idf","title":"\u7b2c\u4e8c\u6b65 - \u83b7\u53d6 ESP-IDF","text":"<p>\u5728\u56f4\u7ed5 ESP32 \u6784\u5efa\u5e94\u7528\u7a0b\u5e8f\u4e4b\u524d\uff0c\u8bf7\u5148\u83b7\u53d6\u4e50\u946b\u63d0\u4f9b\u7684\u8f6f\u4ef6\u5e93\u6587\u4ef6 ESP-IDF \u4ed3\u5e93\u3002</p> <p>\u83b7\u53d6 ESP-IDF \u7684\u672c\u5730\u526f\u672c\uff1a\u6253\u5f00\u7ec8\u7aef\uff0c\u5207\u6362\u5230\u8981\u4fdd\u5b58 ESP-IDF \u7684\u5de5\u4f5c\u76ee\u5f55\uff0c\u4f7f\u7528 git clone \u547d\u4ee4\u514b\u9686\u8fdc\u7a0b\u4ed3\u5e93\u3002\u9488\u5bf9\u4e0d\u540c\u64cd\u4f5c\u7cfb\u7edf\u7684\u8be6\u7ec6\u6b65\u9aa4\uff0c\u8bf7\u89c1\u4e0b\u6587\u3002</p> <p>\u6253\u5f00\u7ec8\u7aef\uff0c\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a</p> <p><pre><code>mkdir -p ~/esp\ncd ~/esp\ngit clone --recursive https://github.com/espressif/esp-idf.git\n</code></pre> ESP-IDF \u5c06\u4e0b\u8f7d\u81f3 <code>~/esp/esp-idf</code>\u3002</p> <p>\u8bf7\u524d\u5f80ESP-IDF \u7248\u672c\u7b80\u4ecb\uff0c\u67e5\u770b ESP-IDF \u4e0d\u540c\u7248\u672c\u7684\u5177\u4f53\u9002\u7528\u573a\u666f\u3002</p>"},{"location":"zh/KICK_START/ESP32/ENVIRONMENT/environment/#-_1","title":"\u7b2c\u4e09\u6b65 - \u8bbe\u7f6e\u5de5\u5177","text":"<p>\u9664\u4e86 ESP-IDF \u672c\u8eab\uff0c\u8fd8\u9700\u8981\u4e3a\u652f\u6301 ESP32 \u7684\u9879\u76ee\u5b89\u88c5 ESP-IDF \u4f7f\u7528\u7684\u5404\u79cd\u5de5\u5177\uff0c\u6bd4\u5982\u7f16\u8bd1\u5668\u3001\u8c03\u8bd5\u5668\u3001Python \u5305\u7b49\u3002</p> <pre><code>cd ~/esp/esp-idf\n./install.sh all\n</code></pre>"},{"location":"zh/KICK_START/ESP32/ENVIRONMENT/environment/#-_2","title":"\u7b2c\u56db\u6b65 - \u8bbe\u7f6e\u73af\u5883\u53d8\u91cf","text":"<p>\u6b64\u65f6\uff0c\u521a\u521a\u5b89\u88c5\u7684\u5de5\u5177\u5c1a\u672a\u6dfb\u52a0\u81f3 PATH \u73af\u5883\u53d8\u91cf\uff0c\u65e0\u6cd5\u901a\u8fc7\u201c\u547d\u4ee4\u7a97\u53e3\u201d\u4f7f\u7528\u8fd9\u4e9b\u5de5\u5177\u3002\u56e0\u6b64\uff0c\u5fc5\u987b\u8bbe\u7f6e\u4e00\u4e9b\u73af\u5883\u53d8\u91cf\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7 ESP-IDF \u63d0\u4f9b\u7684\u53e6\u4e00\u4e2a\u811a\u672c\u8fdb\u884c\u8bbe\u7f6e\u3002</p> <p>\u8bf7\u5728\u9700\u8981\u8fd0\u884c ESP-IDF \u7684\u7ec8\u7aef\u7a97\u53e3\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a</p> <pre><code>. $HOME/esp/esp-idf/export.sh\n</code></pre> <p>\u5982\u679c\u9700\u8981\u7ecf\u5e38\u8fd0\u884c ESP-IDF\uff0c\u53ef\u4ee5\u4e3a\u6267\u884c export.sh \u521b\u5efa\u4e00\u4e2a\u522b\u540d\uff0c\u5177\u4f53\u6b65\u9aa4\u5982\u4e0b\uff1a</p> <p>(1) \u6253\u5f00 shell \u914d\u7f6e\u6587\u4ef6</p> <pre><code>nano ~/.bashrc\n</code></pre> <p>(2) \u590d\u5236\u5e76\u7c98\u8d34\u4ee5\u4e0b\u547d\u4ee4\u5230 shell \u914d\u7f6e\u6587\u4ef6\u4e2d</p> <pre><code>alias get_idf='. $HOME/esp/esp-idf/export.sh'\n</code></pre> <p>(3) \u901a\u8fc7\u91cd\u542f\u7ec8\u7aef\u7a97\u53e3\u6216\u8fd0\u884c <code>source [path to profile]</code>\uff0c\u5982 <code>source ~/.bashrc</code> \u6765\u5237\u65b0\u914d\u7f6e\u6587\u4ef6\u3002</p> <p>\u73b0\u5728\u53ef\u4ee5\u5728\u4efb\u4f55\u7ec8\u7aef\u7a97\u53e3\u4e2d\u8fd0\u884c <code>get_idf</code> \u6765\u8bbe\u7f6e\u6216\u5237\u65b0 ESP-IDF \u73af\u5883\u3002</p> <p>\u4e0d\u5efa\u8bae\u76f4\u63a5\u5c06 <code>export.sh</code> \u6dfb\u52a0\u5230 shell \u7684\u914d\u7f6e\u6587\u4ef6\u3002\u8fd9\u6837\u505a\u4f1a\u5bfc\u81f4\u5728\u6bcf\u4e2a\u7ec8\u7aef\u4f1a\u8bdd\u4e2d\u90fd\u6fc0\u6d3b IDF \u865a\u62df\u73af\u5883\uff08\u5305\u62ec\u65e0\u9700\u4f7f\u7528 ESP-IDF \u7684\u4f1a\u8bdd\uff09\u3002\u8fd9\u8fdd\u80cc\u4e86\u4f7f\u7528\u865a\u62df\u73af\u5883\u7684\u76ee\u7684\uff0c\u8fd8\u53ef\u80fd\u5f71\u54cd\u5176\u4ed6\u8f6f\u4ef6\u7684\u4f7f\u7528\u3002</p>"},{"location":"zh/KICK_START/ESP32/ENVIRONMENT/environment/#-_3","title":"\u7b2c\u4e94\u6b65 - \u5f00\u59cb\u4f7f\u7528","text":"<p>\u8bf7\u53c2\u8003\u5176\u4ed6\u6559\u7a0b\uff0c\u5f00\u59cb\u4f7f\u7528 ESP-IDF\u3002</p>"},{"location":"zh/KICK_START/ESP32/ENVIRONMENT/environment/#ide_1","title":"IDE","text":"<ul> <li> <p> \u3010\u4e50\u946b\u6559\u7a0b\u3011\uff5c\u4f7f\u7528 VS Code \u5feb\u901f\u642d\u5efa ESP-IDF \u5f00\u53d1\u73af\u5883 (Windows\u3001Linux\u3001MacOS) \ud83c\udfaf\ud83c\udfc6\u2705</p> <p>Recommended.</p> <p>  \u4f20\u9001\u95e8 </p> </li> </ul>"},{"location":"zh/KICK_START/ESP32/ENVIRONMENT/environment/#esp-idf","title":"\u5378\u8f7dESP-IDF","text":"<p>(1) \u5220\u9664 ESP-IDF \u6587\u4ef6\u5939</p> <p>\u9996\u5148\uff0c\u627e\u5230\u5b89\u88c5 ESP-IDF \u7684\u76ee\u5f55\uff08\u901a\u5e38\u5728 <code>~/esp/esp-idf</code>\uff09\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5220\u9664\u8be5\u76ee\u5f55\uff1a</p> <pre><code>rm -rf ~/esp/esp-idf\n</code></pre> <p>(2) \u5220\u9664\u5de5\u5177\u94fe</p> <p>ESP-IDF \u7684 install.sh \u811a\u672c\u4f1a\u4e0b\u8f7d\u5e76\u5b89\u88c5\u4e00\u4e9b\u5de5\u5177\u94fe\u548c\u4f9d\u8d56\uff0c\u901a\u5e38\u4f4d\u4e8e <code>~/.espressif</code> \u76ee\u5f55\u3002\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5220\u9664\u8be5\u76ee\u5f55\uff1a</p> <pre><code>rm -rf ~/.espressif\n</code></pre> <p>(3) \u5220\u9664\u73af\u5883\u53d8\u91cf \u5982\u679c\u4f60\u5728 shell \u914d\u7f6e\u6587\u4ef6\uff08\u4f8b\u5982 <code>~/.bashrc</code> \u6216 <code>~/.zshrc</code>\uff09\u4e2d\u6dfb\u52a0\u4e86\u7528\u4e8e\u5feb\u901f\u52a0\u8f7d ESP-IDF \u73af\u5883\u53d8\u91cf\u7684\u522b\u540d\uff08\u5982 <code>get_idf</code>\uff09\uff0c\u5219\u9700\u8981\u7f16\u8f91\u8fd9\u4e9b\u914d\u7f6e\u6587\u4ef6\u5e76\u5220\u9664\u8be5\u522b\u540d\u3002\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u6253\u5f00\u5e76\u7f16\u8f91\u6587\u4ef6</p> <pre><code>nano ~/.bashrc\n</code></pre> <p>(4) \u5237\u65b0\u914d\u7f6e\u6587\u4ef6</p> <p>\u6700\u540e\uff0c\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4ee5\u4f7f\u66f4\u6539\u751f\u6548\uff1a</p> <pre><code>source ~/.bashrc\n</code></pre>"},{"location":"zh/KICK_START/ESP32/ENVIRONMENT/environment/#vscode-esp-idf","title":"VSCode ESP-IDF\u63d2\u4ef6","text":"<p>Note</p> <p>\u8fd9\u662f\u5f53\u524d\u6700\u6d41\u884c\u7684ESP-IDF\u5f00\u53d1\u65b9\u5f0f\u4e4b\u4e00\u3002VSCode\u662f\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u7684\u4ee3\u7801\u7f16\u8f91\u5668\uff0c\u652f\u6301\u591a\u79cd\u7f16\u7a0b\u8bed\u8a00\uff0c\u5305\u62ecC/C++\u3002ESP-IDF\u63d2\u4ef6\u4e3aVSCode\u63d0\u4f9b\u4e86\u5bf9ESP-IDF\u7684\u5b8c\u6574\u652f\u6301\uff0c\u5305\u62ec\u4ee3\u7801\u81ea\u52a8\u5b8c\u6210\u3001\u8c03\u8bd5\u3001\u6784\u5efa\u548c\u70e7\u5f55\u7b49\u529f\u80fd\u3002</p> <ol> <li> <p>\u5b89\u88c5VSCode</p> <p>\u9996\u5148\uff0c\u4f60\u9700\u8981\u5b89\u88c5VSCode\u3002\u4f60\u53ef\u4ee5\u4ece\u8fd9\u91cc\u4e0b\u8f7d\u9002\u7528\u4e8e\u4f60\u7684\u64cd\u4f5c\u7cfb\u7edf\u7684\u5b89\u88c5\u7a0b\u5e8f\u3002</p> </li> <li> <p>\u5b89\u88c5ESP-IDF\u63d2\u4ef6</p> <p>\u5b89\u88c5ESP-IDF\u63d2\u4ef6\u7684\u6b65\u9aa4\u5982\u4e0b\uff1a</p> <ul> <li>\u6253\u5f00VSCode\u3002</li> <li>\u70b9\u51fb\u5de6\u4fa7\u7684\u6269\u5c55\u56fe\u6807\u3002</li> <li>\u5728\u641c\u7d22\u6846\u4e2d\u8f93\u5165\u201cESP-IDF\u201d\u3002</li> <li>\u70b9\u51fb\u201c\u5b89\u88c5\u201d\u6309\u94ae\u3002</li> </ul> </li> <li> <p>\u914d\u7f6eESP-IDF\u8def\u5f84 \u548c ESP-IDF tools\u8def\u5f84</p> <p>\u5b89\u88c5ESP-IDF\u63d2\u4ef6\u540e\uff0c\u4f60\u9700\u8981\u914d\u7f6eESP-IDF\u8def\u5f84\u548cESP-IDF tools\u8def\u5f84\u3002\u8fd9\u4e9b\u8def\u5f84\u544a\u8bc9\u63d2\u4ef6\u5728\u54ea\u91cc\u627e\u5230ESP-IDF\u548c\u76f8\u5173\u5de5\u5177\u3002</p> <ul> <li>\u6253\u5f00VSCode\u3002</li> <li>\u70b9\u51fb\u5de6\u4e0b\u89d2\u7684\u201c\u8bbe\u7f6e\u201d\u56fe\u6807\u3002</li> <li>\u5728\u641c\u7d22\u6846\u4e2d\u8f93\u5165\u201cESP-IDF\u201d\u3002</li> <li>\u5728\u201cESP-IDF\u8def\u5f84\u201d\u548c\u201cESP-IDF tools\u8def\u5f84\u201d\u5b57\u6bb5\u4e2d\u8f93\u5165ESP-IDF\u548cESP-IDF tools\u7684\u8def\u5f84\u3002\uff08\u5982\u679c\u7535\u8111\u4e0a\u6ca1\u6709\uff0c\u8bbe\u7f6e\u597d\u8def\u5f84\uff0c\u63d2\u4ef6\u4f1a\u81ea\u52a8\u4e0b\u8f7d\uff09</li> <li>\u4fdd\u5b58\u8bbe\u7f6e\u3002</li> </ul> </li> <li> <p>\u521b\u5efa\u65b0\u9879\u76ee</p> </li> </ol>"},{"location":"zh/KICK_START/ESP32/HANDS-ON/hands-on/","title":"\u4e0a\u624b\u5b9e\u8df5","text":""},{"location":"zh/KICK_START/ESP32/HANDS-ON/hands-on/#_2","title":"\u7a0b\u5e8f\u51c6\u5907","text":"<p>\u8fd9\u91cc\u6211\u4eec\u627e\u4e00\u4e2a\u5408\u9002\u7684\u8def\u5f84\uff0c\u4e0b\u8f7d\u4e00\u4e9b\u6848\u4f8b\u7a0b\u5e8f\uff1a</p> <pre><code>git clone --recursive https://gitee.com/vi-iot/esp32-board.git\n</code></pre>"},{"location":"zh/KICK_START/ESP32/HANDS-ON/hands-on/#_3","title":"\u786c\u4ef6\u51c6\u5907","text":"<p>\u5c06ESP32\u5f00\u53d1\u677f\u4e0e\u7535\u8111\u8fde\u63a5</p>"},{"location":"zh/KICK_START/ESP32/HANDS-ON/hands-on/#_4","title":"\u9009\u5b9a\u6848\u4f8b\u7a0b\u5e8f","text":"<p>\u8fdb\u5165\u6211\u4eec\u521a\u521a\u4e0b\u8f7d\u7684\u4ed3\u5e93esp32-board\uff0c\u627e\u5230\u4e00\u4e2a\u6848\u4f8b\u7a0b\u5e8f\uff0c\u6bd4\u5982<code>helloworld</code>\uff0c\u8fdb\u5165\u8be5\u76ee\u5f55\uff1a</p> <pre><code>cd esp32-board\ncd helloworld\n</code></pre>"},{"location":"zh/KICK_START/ESP32/HANDS-ON/hands-on/#_5","title":"\u8bbe\u5b9a\u5f00\u53d1\u677f\u7c7b\u578b","text":"<p>ESP32\u73af\u5883\u95ee\u9898</p> <p>\u5982\u679c\u4f60\u5f53\u524d\u4e0d\u5728ESP32\u73af\u5883\u4e2d\uff0c\u53ef\u4ee5\u8f93\u5165<code>get_idf</code>\u6765\u8c03\u7528ESP32\u73af\u5883\u3002\u6ce8\u610f\uff0c\u53ea\u6709\u6b63\u786e\u8bbe\u7f6e\u4e86SHELL\u4e2d\u7684\u522b\u540d\u540e\uff0c\u624d\u80fd\u4f7f\u7528<code>get_idf</code>, \u8bf7\u53c2\u8003\u4e0a\u4e00\u7bc7\u6559\u7a0b\u3002</p> <p>\u5982\u679c\u662f\u4e00\u822c\u7684esp32\u5f00\u53d1\u677f\uff0c\u8fd9\u4e00\u6b65\u5176\u5b9e\u53ef\u4ee5\u4e0d\u7528\u7ba1\uff0c\u4f46\u662f\u5982\u679c\u662f\u5176\u4ed6\u5f00\u53d1\u677f\uff0c\u6700\u597d\u6307\u5b9a\u4e00\u4e0b\u5f00\u53d1\u677f\u7c7b\u578b\uff0c\u6bd4\u5982esp32-s3\uff1a</p> <pre><code>idf.py set-target esp32s3\n</code></pre>"},{"location":"zh/KICK_START/ESP32/HANDS-ON/hands-on/#_6","title":"\u7f16\u8bd1\u7a0b\u5e8f","text":"<pre><code>idf.py build\n</code></pre>"},{"location":"zh/KICK_START/ESP32/HANDS-ON/hands-on/#_7","title":"\u70e7\u5f55\u7a0b\u5e8f","text":"<p><pre><code>idf.py flash\n</code></pre> \u6ce8\u610f\uff0c\u53ef\u4ee5\u67e5\u770b\u8bbe\u5907\u6240\u5728usb\u7aef\u53e3\uff1a</p> <pre><code>ls /dev/tty*\n</code></pre> <p>\u901a\u8fc7\u94fe\u63a5/\u975e\u94fe\u63a5\u5bf9\u6bd4\uff0c\u627e\u5230\u8bbe\u5907\u6240\u5728\u7aef\u53e3\uff0c\u6bd4\u5982<code>/dev/ttyACM1</code>\uff0c\u7136\u540e\u70e7\u5f55\u7a0b\u5e8f\uff1a</p> <pre><code>idf.py -p /dev/ttyACM1 flash\n</code></pre>"},{"location":"zh/KICK_START/ESP32/HANDS-ON/hands-on/#_8","title":"\u76d1\u6d4b\u7a0b\u5e8f\u8fd0\u884c","text":"<pre><code>idf.py monitor\n</code></pre> <p>\u4e5f\u53ef\u4ee5\u6307\u5b9a\u7aef\u53e3\uff1a</p> <pre><code>idf.py -p /dev/ttyACM1 monitor\n</code></pre>"},{"location":"zh/KICK_START/ESP32/HANDS-ON/hands-on/#_9","title":"\u9000\u51fa\u76d1\u6d4b","text":"<p>\u6309\u4e0b<code>Ctrl</code> + <code>]</code>\u5373\u53ef\u9000\u51fa\u76d1\u6d4b\u3002</p>"},{"location":"zh/KICK_START/ESP32/HARDWARE/hardware/","title":"\u786c\u4ef6\u5e73\u53f0","text":"<p>\u6b63\u70b9\u539f\u5b50 DNESP32S3M \u4e3b\u63a7\u677f</p> <p></p> <p></p> <p>\u6b63\u70b9\u539f\u5b50 DNESP32S3 \u5f00\u53d1\u677f</p> <p></p> <p></p> <p></p> <p></p> <p>DNESP32S3M/DNESP32S3</p> <p>\u672c\u6587\u6863\u4f7f\u7528\u7684\u786c\u4ef6\u5e73\u53f0\u4e3a\u6b63\u70b9\u539f\u5b50\u7684DNESP32S3M/DNESP32S3,\u57fa\u4e8eESP32-S3\uff0c\u5982\u4e0a\u56fe\u6240\u793a\u3002\u76f8\u5173\u7a0b\u5e8f\u8fc1\u79fb\u5230\u5176\u4ed6\u5f00\u53d1\u677f\u5e94\u8be5\u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u662f\u9700\u8981\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u8fdb\u884c\u9002\u914d\u3002</p> <p>DNESP32S3M/DNESP32S3</p> <p>ESP32-S3 SoC \u82af\u7247\u652f\u6301\u4ee5\u4e0b\u529f\u80fd\uff1a</p> <ul> <li> <p>2.4 GHz Wi-Fi</p> </li> <li> <p>\u4f4e\u529f\u8017\u84dd\u7259</p> </li> <li> <p>\u9ad8\u6027\u80fd Xtensa\u00ae 32 \u4f4d LX7 \u53cc\u6838\u5904\u7406\u5668</p> </li> <li> <p>\u8fd0\u884c RISC-V \u6216 FSM \u5185\u6838\u7684\u8d85\u4f4e\u529f\u8017\u534f\u5904\u7406\u5668</p> </li> <li> <p>\u591a\u79cd\u5916\u8bbe</p> </li> <li> <p>\u5185\u7f6e\u5b89\u5168\u786c\u4ef6</p> </li> <li> <p>USB OTG \u63a5\u53e3</p> </li> <li> <p>USB \u4e32\u53e3/JTAG \u63a7\u5236\u5668</p> </li> </ul> <p>ESP32-S3 \u91c7\u7528 40 nm \u5de5\u827a\u5236\u6210\uff0c\u5177\u6709\u6700\u4f73\u7684\u529f\u8017\u6027\u80fd\u3001\u5c04\u9891\u6027\u80fd\u3001\u7a33\u5b9a\u6027\u3001\u901a\u7528\u6027\u548c\u53ef\u9760\u6027\uff0c\u9002\u7528\u4e8e\u5404\u79cd\u5e94\u7528\u573a\u666f\u548c\u4e0d\u540c\u529f  \u8017\u9700\u6c42\u3002</p> <p>\u4e50\u946b\u4e3a\u7528\u6237\u63d0\u4f9b\u5b8c\u6574\u7684\u8f6f\u3001\u786c\u4ef6\u8d44\u6e90\uff0c\u8fdb\u884c ESP32-S3 \u786c\u4ef6\u8bbe\u5907\u7684\u5f00\u53d1\u3002\u5176\u4e2d\uff0c\u4e50\u946b\u7684\u8f6f\u4ef6\u5f00\u53d1\u73af\u5883 ESP-IDF \u65e8\u5728\u534f\u52a9\u7528\u6237\u5feb \u901f\u5f00\u53d1\u7269\u8054\u7f51 (IoT) \u5e94\u7528\uff0c\u53ef\u6ee1\u8db3\u7528\u6237\u5bf9 Wi-Fi\u3001\u84dd\u7259\u3001\u4f4e\u529f\u8017\u7b49\u65b9\u9762\u7684\u8981\u6c42\u3002</p> <p>Note</p> <p>\u5f00\u59cb\u7f16\u7a0b\u524d\uff0c\u60a8\u9700\u8981\uff1a</p> <ul> <li> <p>\u4e00\u53f0\u5e26\u6709 USB \u7aef\u53e3\u7684\u8ba1\u7b97\u673a</p> </li> <li> <p>\u4e00\u6839 USB \u6570\u636e\u7ebf</p> </li> <li> <p>\u4e00\u5757 DNESP32S3M/DNESP32S3 \u5f00\u53d1\u677f\u6216\u5176\u4ed6 ESP32 \u5f00\u53d1\u677f</p> </li> </ul>"},{"location":"zh/KICK_START/ESP32/TEMPLATE/template/","title":"\u6a21\u677f\u9879\u76ee\u642d\u5efa","text":""},{"location":"zh/KICK_START/ESP32/TEMPLATE/template/#_2","title":"\u73af\u5883\u51c6\u5907","text":"<p>Info</p> <p>\u6211\u4eec\u4f7f\u7528 VSCode + ESP-IDF \u8fdb\u884c\u5f00\u53d1\u3002\u6709\u5173\u8bbe\u7f6e\u5f00\u53d1\u73af\u5883\u7684\u8be6\u7ec6\u4fe1\u606f\u53ef\u4ee5\u5728\u4e92\u8054\u7f51\u4e0a\u627e\u5230\u3002\u6211\u5047\u8bbe\u60a8\u5df2\u7ecf\u8bbe\u7f6e\u597d\u4e86\u5f00\u53d1\u73af\u5883\u3002</p>"},{"location":"zh/KICK_START/ESP32/TEMPLATE/template/#_3","title":"\u521b\u5efa\u65b0\u9879\u76ee","text":"<ol> <li>\u542f\u52a8 VSCode\uff0c\u7136\u540e\u901a\u8fc7\u6309 <code>Ctrl+Shift+P</code>\uff08Windows/Linux\uff09\u6216 <code>Cmd+Shift+P</code>\uff08macOS\uff09\u6253\u5f00\u547d\u4ee4\u9762\u677f\u3002</li> <li>\u8f93\u5165 <code>ESP-IDF: New Project</code> \u5e76\u6309 <code>Enter</code>\u3002 </li> <li>\u8fdb\u5165\u9879\u76ee\u914d\u7f6e UI \u5e76\u586b\u5199\u6240\u9700\u4fe1\u606f\u3002 </li> <li>\u9009\u62e9\u4e00\u4e2a\u6a21\u677f\u6765\u521b\u5efa\u65b0\u9879\u76ee\u3002 </li> <li>\u5728\u65b0\u7a97\u53e3\u4e2d\u6253\u5f00\u3002  </li> </ol>"},{"location":"zh/KICK_START/ESP32/TEMPLATE/template/#_4","title":"\u6a21\u677f\u5316\u9879\u76ee\u7ed3\u6784","text":"<pre><code>sample_proj/ # \u9879\u76ee\u6839\u76ee\u5f55\n\u251c\u2500\u2500 CMakeLists.txt # \u9879\u76ee CMake \u914d\u7f6e\u6587\u4ef6\n\u251c\u2500\u2500 main/ # \u4e3b\u5e94\u7528\u7a0b\u5e8f\u76ee\u5f55\n\u2502   \u251c\u2500\u2500 CMakeLists.txt # \u5e94\u7528\u7a0b\u5e8f CMake \u914d\u7f6e\u6587\u4ef6\n\u2502   \u2514\u2500\u2500 main.c # \u5e94\u7528\u7a0b\u5e8f\u6e90\u6587\u4ef6\n\u2514\u2500\u2500 sdkconfig # \u9879\u76ee\u914d\u7f6e\u6587\u4ef6\n</code></pre>"},{"location":"zh/KICK_START/ESP32/TEMPLATE/template/#_5","title":"\u9879\u76ee\u914d\u7f6e","text":"<p>Note</p> <p>\u8fd9\u4e00\u6b65\u662f\u4e3a\u4e86\u914d\u7f6e\u9879\u76ee\u8bbe\u7f6e\u4ee5\u6700\u5927\u5316\u786c\u4ef6\u7684\u6027\u80fd\uff0c\u5373\u4f7f\u7528\u7279\u5b9a\u4e8e\u76ee\u6807\u7684\u914d\u7f6e\u800c\u4e0d\u662f\u9ed8\u8ba4\u914d\u7f6e\u3002</p> <p>Warning</p> <p>\u5728\u6253\u5f00\u9879\u76ee\u914d\u7f6e UI \u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u60a8\u5df2\u5728 VSCode \u4e2d\u6253\u5f00\u4e86\u9879\u76ee\uff0c\u5c06\u76ee\u6807\u8bbe\u7f6e\u4e3a\u5bf9\u5e94\u7684\u677f\u5b50\uff0c\u5e76\u5b89\u88c5\u4e86 ESP-IDF \u6269\u5c55\u3002</p> <ol> <li>\u901a\u8fc7\u6309 <code>Ctrl+Shift+P</code>\uff08Windows/Linux\uff09\u6216 <code>Cmd+Shift+P</code>\uff08macOS\uff09\u5e76\u8f93\u5165 <code>ESP-IDF: Configure Project</code> \u8fdb\u5165\u9879\u76ee\u914d\u7f6e UI\u3002\u6216\u8005\uff0c\u53ef\u4ee5\u70b9\u51fb VSCode \u7a97\u53e3\u5e95\u90e8\u83dc\u5355\u7684\u9f7f\u8f6e\u56fe\u6807\u3002 </li> <li>'FLASH' \u914d\u7f6e\u3002\u5728\u641c\u7d22\u680f\u4e2d\u8f93\u5165 <code>flash</code> \u5e76\u6309 <code>Enter</code>\u3002 </li> <li>'Partition Table' \u914d\u7f6e\u3002\u5728\u641c\u7d22\u680f\u4e2d\u8f93\u5165 <code>partition</code> \u5e76\u6309 <code>Enter</code>\u3002  \u8be6\u7ec6\u4fe1\u606f\u7a0d\u540e\u63d0\u4f9b</li> <li>'PSRAM' \u914d\u7f6e\u3002\u5728\u641c\u7d22\u680f\u4e2d\u8f93\u5165 <code>psram</code> \u5e76\u6309 <code>Enter</code>\u3002 </li> <li>\u66f4\u6539 CPU \u9891\u7387\u3002\u5728\u641c\u7d22\u680f\u4e2d\u8f93\u5165 <code>cpu</code> \u5e76\u6309 <code>Enter</code>\u3002\u5c06 CPU \u9891\u7387\u4fee\u6539\u4e3a 240 MHz\u3002 </li> <li>\u4fee\u6539 FreeRTOS tick \u65f6\u949f\u9891\u7387\u3002\u5728\u641c\u7d22\u680f\u4e2d\u8f93\u5165 <code>tick</code> \u5e76\u6309 <code>Enter</code>\u3002\u5c06\u9891\u7387\u4fee\u6539\u4e3a 1000\u3002 </li> <li>\u4fee\u6539\u5206\u533a\u8868\u3002\u5728\u547d\u4ee4\u9762\u677f\u4e2d\u8f93\u5165 <code>ESP-IDF: Open Partition Table Editor UI</code>\u3002 </li> <li>\u4fee\u6539\u5206\u533a\u8868\u5982\u4e0b\u6240\u793a\u3002 </li> <li>\u4fdd\u5b58\u6240\u6709\u4fee\u6539\u3002</li> </ol> <p>\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u5b8c\u6210\u4e86\u9879\u76ee\u521d\u59cb\u5316\u3002\u914d\u7f6e\u4fe1\u606f\u73b0\u5728\u4e0e\u786c\u4ef6\u677f\u4e0a\u8d44\u6e90\u4e00\u81f4\u3002</p>"},{"location":"zh/KICK_START/ESP32/TEMPLATE/template/#_6","title":"\u6a21\u677f\u7a0b\u5e8f","text":"<p>\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u7a0b\u5e8f\u6765\u6d4b\u8bd5\u677f\u5b50\u3002</p> <p>\u8f6c\u5230 main.c \u6587\u4ef6, \u9ed8\u8ba4\u5185\u5bb9\u662f\uff1a</p> <p><pre><code>#include &lt;stdio.h&gt;\n\nvoid app_main(void)\n{\n\n}\n</code></pre> \u7528\u4ee5\u4e0b\u4ee3\u7801\u66ff\u6362\uff1a</p> <pre><code>#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"nvs_flash.h\"\n#include \"esp_system.h\"\n#include \"esp_chip_info.h\"\n#include \"esp_psram.h\"\n#include \"esp_flash.h\"\n\n/**\n * @brief Entry point of the program\n * @param None\n * @retval None\n */\nvoid app_main(void)\n{\n    esp_err_t ret;\n    uint32_t flash_size;\n    esp_chip_info_t chip_info;\n\n    // Initialize NVS\n    ret = nvs_flash_init();\n    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)\n    {\n        ESP_ERROR_CHECK(nvs_flash_erase()); // Erase if needed\n        ret = nvs_flash_init();\n    }\n\n    // Get FLASH size\n    esp_flash_get_size(NULL, &amp;flash_size);\n    esp_chip_info(&amp;chip_info);\n\n    // Display CPU core count\n    printf(\"CPU Cores: %d\\n\", chip_info.cores);\n\n    // Display FLASH size\n    printf(\"Flash size: %ld MB flash\\n\", flash_size / (1024 * 1024));\n\n    // Display PSRAM size\n    printf(\"PSRAM size: %d bytes\\n\", esp_psram_get_size());\n\n    while (1)\n    {\n        printf(\"Hello-ESP32\\r\\n\");\n        vTaskDelay(1000);\n    }\n}\n</code></pre> <p>\u7136\u540e\uff0c\u786e\u4fdd\u4e32\u53e3\u6b63\u786e\uff0c\u677f\u5b50\u8bbe\u7f6e\u6b63\u786e\uff0c\u7136\u540e\u7f16\u8bd1\u5e76\u70e7\u5f55\u7a0b\u5e8f\u3002\u7136\u540e\uff0c\u4f60\u5e94\u8be5\u4f1a\u770b\u5230\u4e32\u53e3\u8f93\u51fa\u663e\u793a\u5f00\u53d1\u677f\u4fe1\u606f\u548c <code>Hello-ESP32</code> \u6d88\u606f\u3002</p>"},{"location":"zh/KICK_START/ESP32/TEMPLATE/template/#_7","title":"\u7ed3\u8bba","text":"<p>Note</p> <p>\u8fd9\u4e2a\u9879\u76ee\u5bf9DNESP32S3M/DNESP32S3\u8fdb\u884c\u4e86\u521d\u59cb\u5316\uff0c\u5e76\u4e14\u53ef\u4ee5\u4e3a\u540e\u7eed\u5f00\u53d1\u63d0\u4f9b\u4e00\u4e2a\u975e\u5e38\u6709\u7528\u7684\u6a21\u677f\u3002\u76f8\u6bd4\u8f83\u4e0eSTM32\uff0cESP32\u7684\u5f00\u53d1\u9690\u85cf\u4e86\u8bb8\u591a\u7ec6\u8282\uff0c\u540c\u65f6\u4e5f\u4f7f\u5f97\u8bbe\u7f6e\u6d41\u7a0b\u66f4\u52a0\u7b80\u5355\u3002</p> <p>Tip</p> <p>\u8fd9\u4e2a\u6a21\u677f\u5bf9DNESP32S3M\u548cDNESP32S3\u4e24\u4e2a\u677f\u5b50\u90fd\u9002\u7528\u3002</p>"},{"location":"zh/KICK_START/STM32/stm32/","title":"STM32","text":"<p>\u5373\u5c06\u63a8\u51fa ... \u8bf7\u5148\u53c2\u8003\u4ee5\u4e0b\u4ed3\u5e93:</p> <ul> <li> <p> MCU_NODE_STM32\ud83c\udfaf\ud83c\udfc6</p> <p>\u57fa\u4e8e STM32 \u7684 MCU IoT \u8282\u70b9\uff0c\u5177\u6709\u9ad8\u6027\u80fd\u8fb9\u7f18\u8ba1\u7b97</p> <p>  \u4f20\u9001\u95e8 </p> </li> </ul>"},{"location":"zh/RELEASE/release/","title":"\u53d1\u5e03","text":""},{"location":"zh/RELEASE/release/#_2","title":"\u4ee3\u7801\u4ed3\u5e93","text":"<ul> <li> <p> NexNode</p> <p>  Portal </p> </li> </ul>"},{"location":"zh/RELEASE/release/#_3","title":"\u53d1\u5e03\u8bf4\u660e","text":""},{"location":"zh/RELEASE/release/#-code-esp32-dnesp32s3m","title":"\u6587\u4ef6\u5939 - CODE-ESP32-DNESP32S3M","text":"\u5206\u652f \u72b6\u6001 \u521d\u59cb\u5316\u6a21\u677f \u2705 \u4e3b\u63a7\u5236\u529f\u80fd \u2705 \u5916\u8bbe\u529f\u80fd \ud83d\udcc6 \u6570\u5b66 + DSP + AI \ud83c\udfd7\ufe0f DNESP32S3M-INIT \u2705 \u2714\ufe0f DNESP32S3M-CORE \u2705 \u2714\ufe0f \u2714\ufe0f DNESP32S3M-IOT \ud83d\udcc6 \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f DNESP32S3M-AI \ud83c\udfd7\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f"},{"location":"zh/RELEASE/release/#-code-esp32-dnesp32s3","title":"\u6587\u4ef6\u5939 - CODE-ESP32-DNESP32S3","text":"<p>\ud83d\udcc6</p>"},{"location":"zh/RELEASE/release/#-code-stm32-fkh743m2-iit6","title":"\u6587\u4ef6\u5939 - CODE-STM32-FKH743M2-IIT6","text":"<p>\ud83d\udcc6</p>"},{"location":"zh/ROADMAP/roadmap/","title":"\u8def\u7ebf\u56fe","text":""},{"location":"zh/ROADMAP/roadmap/#_2","title":"\u67b6\u6784","text":""},{"location":"zh/ROADMAP/roadmap/#_3","title":"\u5206\u5c42\u67b6\u6784","text":"<pre><code>+------------------------------+\n| \u5e94\u7528\u5c42                        |\n+------------------------------+\n| \u4e2d\u95f4\u4ef6                        |\n+------------------------------+\n| \u9a71\u52a8\u5c42                        |\n+------------------------------+\n| \u786c\u4ef6\u5c42                        |\n+------------------------------+\n</code></pre>"},{"location":"zh/ROADMAP/roadmap/#_4","title":"\u529f\u80fd\u6a21\u5757","text":"<pre><code>\u4e3b\u63a7 + \u611f\u77e5 + \u901a\u4fe1 + \u6267\u884c + \u7535\u6e90\n</code></pre>"},{"location":"zh/ROADMAP/roadmap/#_5","title":"\u5fae\u63a7\u5236\u5668","text":"<ul> <li>ESP32</li> <li>STM32</li> </ul>"},{"location":"zh/ROADMAP/roadmap/#_6","title":"\u5f00\u53d1\u677f","text":"<p>ESP32</p> <ul> <li>DNESP32S3M </li> <li>DNESP32S3</li> </ul> <p>STM32</p> <ul> <li>FKH743M2-IIT6</li> </ul>"}]}