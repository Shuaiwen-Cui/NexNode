{"config":{"lang":["en","zh"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ESP32 IOT MCU EDGE INTELLIGENCE NODE","text":"<p>This project dedicates to the development of an IoT MCU edge intelligence node based on ESP32. If you are interested in this project, please star it and stay tuned.</p> <p></p>"},{"location":"ARCHITECTURE/ARCHITECTURE/architecture/","title":"ARCHITECTURE","text":""},{"location":"ARCHITECTURE/ARCHITECTURE/architecture/#hardware-architecture","title":"HARDWARE ARCHITECTURE","text":"<p>MAIN CONTROL + PERCEPTION + COMMUNICATION + INTERACTION + POWER SUPPLY</p> <p></p> <p></p> <p>Note</p> <p>The above is a schematic diagram of the hardware abstraction layer. The specific modules and functions are subject to the actual hardware.</p>"},{"location":"ARCHITECTURE/ARCHITECTURE/architecture/#software-architecture","title":"SOFTWARE ARCHITECTURE","text":"<p>HARDWARE LAYER + PLATFORM ABSTRACTION LAYER + SYSTEM SERVICES LAYER + APPLICATION LAYER</p> <pre><code>+------------------------------+\n| Application Layer            | &lt;-- Application Code\n+------------------------------+\n| System Services Layer        | &lt;-- OS + Middleware\n+------------------------------+\n| Platform Abstraction Layer   | &lt;-- Startup Code + HAL (register-level) + BSP (board-level)\n+------------------------------+\n| Hardware Layer               | &lt;-- Main Control + Peripherals\n+------------------------------+\n</code></pre> <p></p>"},{"location":"GET-STARTED/get-started/","title":"GET STARTED","text":"<p>Tip</p> <p>This chapter is about how to make this project from scratch.</p>"},{"location":"GET-STARTED/get-started/#project-creation","title":"PROJECT CREATION","text":"<p>Assuming you have installed the necessary tools, let's start by creating a new project. </p>"},{"location":"GET-STARTED/get-started/#step-1-create-the-new-project","title":"Step 1: Create the New Project","text":"<p>Navigate to the directory where you want to create the project and run the following command to activate the idf environment (if you have properly setup as indicated in the official guidance):</p> <pre><code>get_idf\n</code></pre> <p>Then, create the project (\"DNESP32S3-INIT\") by running the following command:</p> <pre><code>idf.py create-project DNESP32S3-INIT\n</code></pre>"},{"location":"GET-STARTED/get-started/#step-2-setup-the-target","title":"Step 2: Setup the Target","text":"<p>Then, navigate to the project directory:</p> <pre><code>cd DNESP32S3-INIT\n</code></pre> <p>Then, set the target to the development board (here, the chip we are using is ESP32-S3):</p> <pre><code>idf.py set-target esp32s3\n</code></pre>"},{"location":"GET-STARTED/get-started/#step-3-compile-and-flash-the-project","title":"Step 3: Compile and Flash the Project","text":"<p>Then, compile the project:</p> <pre><code>idf.py build\n</code></pre> <p>Then, flash the project:</p> <pre><code>idf.py flash\n</code></pre> <p>By far, we have made a quick and dirty project. Next, we will configure the project.</p>"},{"location":"GET-STARTED/get-started/#project-configuration-as-template","title":"PROJECT CONFIGURATION AS TEMPLATE","text":""},{"location":"GET-STARTED/get-started/#step-1-preprocess","title":"Step 1: Preprocess","text":"<p>Before we dive deeper, let's clean the project by conducting 'fullclean':</p> <pre><code>idf.py fullclean\n</code></pre> <p>Alternatively, you can manually delete the 'build' folder.</p> <p>For convenience, I renamed the entrance c file as <code>main.c</code>, and accordingly, I modified the <code>CMakeLists.txt</code> under the <code>main</code> folder. Then I recompiled and reflashed the project, everything looks good.</p> <p>Note that, so far, the project is compiled according to default ESP32 setup rather than the specifications of the development board, to maximize the performance of the board, we need to configure the project according to the board's specifications. You can refer to the setup guidance provided by the board manufacturer. Herein, we do this according to the guidance from Alientek.</p>"},{"location":"GET-STARTED/get-started/#step-2-adaptive-configuration","title":"Step 2: Adaptive Configuration","text":"<p>Note</p> <p>This step is to configure the project settings to maximize the power of the hardware, i.e., use target-specific configurations rather than default configurations.</p> <p>Warning</p> <p>Before you open the project configuration UI, make sure you have the project open in VSCode, set the target to your board, and have the ESP-IDF extension installed.</p> <ol> <li>Enter the project configuration UI by pressing <code>Ctrl+Shift+P</code> (Windows/Linux) or <code>Cmd+Shift+P</code> (macOS) and type <code>ESP-IDF: Configure Project</code>. Alternatively, one can click the gear icon on the bottom menu of the VSCode window. </li> <li>'FLASH' configuration. In the search bar, type <code>flash</code> and press <code>Enter</code>.  </li> <li>'Partition Table' configuration. In the search bar, type <code>partition</code> and press <code>Enter</code>.  details to be provided later</li> <li>'PSRAM' configuration. In the search bar, type <code>psram</code> and press <code>Enter</code>. </li> <li>Change the CPU frequency. In the search bar, type <code>cpu</code> and press <code>Enter</code>. Modify the CPU frequency to 240 MHz. </li> <li>Modify the FreeRTOS tick clock frequency. In the search bar, type <code>tick</code> and press <code>Enter</code>. Modify the tick clock frequency to 1000 Hz. </li> <li>Modify the partition table. In the command palette, type <code>ESP-IDF: Open Partition Table Editor UI</code>. </li> <li>Modify the partition table as shown below. </li> <li>Save the all the modifications.</li> </ol> <p>The configuration is now consistent with the hardware onboard resources. </p>"},{"location":"INSTRUCTIONS/instructions/","title":"PROJECT INSTRUCTIONS","text":"<p>Note</p> <p>This section details the how the node is built and how it should be used.</p>"},{"location":"INSTRUCTIONS/PROJECT-INITIALIZATION/project-initialization/","title":"PROJECT INITIALIZATION","text":""},{"location":"INSTRUCTIONS/PROJECT-INITIALIZATION/project-initialization/#environment-setup","title":"ENVIRONMENT SETUP","text":"<p>Info</p> <p>We use VSCode + ESP-IDF for development. Details to setup the development environment can be found on the internet. I assume you have already set up the development environment.</p>"},{"location":"INSTRUCTIONS/PROJECT-INITIALIZATION/project-initialization/#create-a-new-project","title":"CREATE A NEW PROJECT","text":"<ol> <li>Launch VSCode and then open the command palette by pressing <code>Ctrl+Shift+P</code> (Windows/Linux) or <code>Cmd+Shift+P</code> (macOS).</li> <li>Type <code>ESP-IDF: New Project</code> and press <code>Enter</code>. </li> <li>Enter the project configuration UI and fill in the required information. </li> <li>Choose a template to create a new project. </li> <li>Open in a new window.  </li> </ol>"},{"location":"INSTRUCTIONS/PROJECT-INITIALIZATION/project-initialization/#templated-project-structure","title":"TEMPLATED PROJECT STRUCTURE","text":"<pre><code>sample_proj/ # Project root directory\n\u251c\u2500\u2500 CMakeLists.txt # Project CMake configuration file\n\u251c\u2500\u2500 main/ # Main application directory\n\u2502   \u251c\u2500\u2500 CMakeLists.txt # Application CMake configuration file\n\u2502   \u2514\u2500\u2500 main.c # Application source file\n\u2514\u2500\u2500 sdkconfig # Project configuration file\n</code></pre>"},{"location":"INSTRUCTIONS/PROJECT-INITIALIZATION/project-initialization/#project-configuration","title":"PROJECT CONFIGURATION","text":"<p>Note</p> <p>This step is to configure the project settings to maximize the power of the hardware, i.e., use target-specific configurations rather than default configurations.</p> <p>Warning</p> <p>Before you open the project configuration UI, make sure you have the project open in VSCode, set the target to your board, and have the ESP-IDF extension installed.</p> <ol> <li>Enter the project configuration UI by pressing <code>Ctrl+Shift+P</code> (Windows/Linux) or <code>Cmd+Shift+P</code> (macOS) and type <code>ESP-IDF: Configure Project</code>. Alternatively, one can click the gear icon on the bottom menu of the VSCode window. </li> <li>'FLASH' configuration. In the search bar, type <code>flash</code> and press <code>Enter</code>.  </li> <li>'Partition Table' configuration. In the search bar, type <code>partition</code> and press <code>Enter</code>.  details to be provided later</li> <li>'PSRAM' configuration. In the search bar, type <code>psram</code> and press <code>Enter</code>. </li> <li>Change the CPU frequency. In the search bar, type <code>cpu</code> and press <code>Enter</code>. Modify the CPU frequency to 240 MHz. </li> <li>Modify the FreeRTOS tick clock frequency. In the search bar, type <code>tick</code> and press <code>Enter</code>. Modify the tick clock frequency to 1000 Hz. </li> <li>Modify the partition table. In the command palette, type <code>ESP-IDF: Open Partition Table Editor UI</code>. </li> <li>Modify the partition table as shown below. </li> <li>Save the all the modifications.</li> </ol> <p>By far, we have finished the project initialization. The configuration is now consistent with the hardware onboard resources. </p>"},{"location":"INSTRUCTIONS/PROJECT-INITIALIZATION/project-initialization/#template-program","title":"TEMPLATE PROGRAM","text":"<p>Now, let's create a simple program to test the board. </p> <p>Go to the main.c file and replace the content with the following code:</p> <pre><code>#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"nvs_flash.h\"\n#include \"esp_system.h\"\n#include \"esp_chip_info.h\"\n#include \"esp_psram.h\"\n#include \"esp_flash.h\"\n\n/**\n * @brief Entry point of the program\n * @param None\n * @retval None\n */\nvoid app_main(void)\n{\n    esp_err_t ret;\n    uint32_t flash_size;\n    esp_chip_info_t chip_info;\n\n    // Initialize NVS\n    ret = nvs_flash_init();\n    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)\n    {\n        ESP_ERROR_CHECK(nvs_flash_erase()); // Erase if needed\n        ret = nvs_flash_init();\n    }\n\n    // Get FLASH size\n    esp_flash_get_size(NULL, &amp;flash_size);\n    esp_chip_info(&amp;chip_info);\n\n    // Display CPU core count\n    printf(\"CPU Cores: %d\\n\", chip_info.cores);\n\n    // Display FLASH size\n    printf(\"Flash size: %ld MB flash\\n\", flash_size / (1024 * 1024));\n\n    // Display PSRAM size\n    printf(\"PSRAM size: %d bytes\\n\", esp_psram_get_size());\n\n    while (1)\n    {\n        printf(\"Hello-ESP32\\r\\n\");\n        vTaskDelay(1000);\n    }\n}\n</code></pre> <p>Then, ensure the serial port number is corrrect, the target board is selected, then click the \"fire flame\" icon to build, flash and monitor the program. Then, you should be able to see the printouts on the serial monitor. </p>"},{"location":"INSTRUCTIONS/PROJECT-INITIALIZATION/project-initialization/#conclusions","title":"CONCLUSIONS","text":"<p>Note</p> <p>This project sets up the development board DNESP32S3, and this project can serve as a useful template for future development. Compared to STM32, many low level details are hidden from the user, therefore the set up process is much simpler.</p>"},{"location":"TUTORIALS/tutorials/","title":"TUTORIALS","text":"<p>Note</p> <p>This chapter is the notes and summaries of several tutorials, aiming to learn the resources on the board.</p> <ul> <li> <p> ATK DNESP32S3</p> <p>  Portal </p> </li> </ul>"},{"location":"blog/","title":"Blog","text":""},{"location":"zh/","title":"ESP32\u5fae\u63a7\u5236\u5668\u8fb9\u7f18\u667a\u80fd\u7269\u8054\u7f51\u8282\u70b9","text":"<p>\u8fd9\u4e2a\u9879\u76ee\u81f4\u529b\u4e8e\u57fa\u4e8eESP32\u7684\u5fae\u63a7\u5236\u5668\u8fb9\u7f18\u667a\u80fd\u7269\u8054\u7f51\u8282\u70b9\u7684\u5f00\u53d1\u3002\u5982\u679c\u4f60\u5bf9\u8fd9\u4e2a\u9879\u76ee\u611f\u5174\u8da3\uff0c\u8bf7\u7ed9\u5b83\u70b9\u4e2a\u8d5e\u5e76\u4fdd\u6301\u5173\u6ce8\u3002</p> <p></p>"},{"location":"zh/ARCHITECTURE/ARCHITECTURE/architecture/","title":"\u67b6\u6784","text":""},{"location":"zh/ARCHITECTURE/ARCHITECTURE/architecture/#_2","title":"\u786c\u4ef6\u67b6\u6784","text":"<p>\u4e3b\u63a7 + \u611f\u77e5 + \u901a\u4fe1 + \u4ea4\u4e92 + \u4f9b\u7535</p> <p></p> <p></p> <p>Note</p> <p>\u4ee5\u4e0a\u4e3a\u786c\u4ef6\u62bd\u8c61\u5c42\u7684\u793a\u610f\u56fe\uff0c\u5177\u4f53\u6a21\u5757\u548c\u529f\u80fd\u4ee5\u5b9e\u9645\u786c\u4ef6\u4e3a\u51c6\u3002</p>"},{"location":"zh/ARCHITECTURE/ARCHITECTURE/architecture/#_3","title":"\u8f6f\u4ef6\u67b6\u6784","text":"<p>\u786c\u4ef6\u5c42 + \u5e73\u53f0\u62bd\u8c61\u5c42 + \u7cfb\u7edf\u670d\u52a1\u5c42 + \u5e94\u7528\u5c42</p> <pre><code>+----------------------------------------+\n| \u5e94\u7528\u5c42 (Application Layer)              | &lt;-- \u5e94\u7528\u4ee3\u7801\n+----------------------------------------+\n| \u7cfb\u7edf\u670d\u52a1\u5c42 (System Services Layer)      | &lt;-- \u64cd\u4f5c\u7cfb\u7edf + \u4e2d\u95f4\u4ef6\n+----------------------------------------+\n| \u5e73\u53f0\u62bd\u8c61\u5c42 (Platform Abstraction Layer) | &lt;-- \u542f\u52a8\u4ee3\u7801 + \u786c\u4ef6\u62bd\u8c61\u5c42 (\u5bc4\u5b58\u5668\u7ea7) + \u677f\u7ea7\u652f\u6301\u5305 (\u5f00\u53d1\u677f\u7ea7)\n+----------------------------------------+\n| \u786c\u4ef6\u5c42 (Hardware Layer)                 | &lt;-- \u4e3b\u63a7\u5355\u5143 + \u5916\u8bbe\n+----------------------------------------+\n</code></pre> <p></p>"},{"location":"zh/GET-STARTED/get-started/","title":"\u5feb\u901f\u4e0a\u624b","text":"<p>Tip</p> <p>\u672c\u8282\u65e8\u5728\u4ecb\u7ecd\u5982\u4f55\u4ece\u96f6\u5f00\u59cb\u521b\u5efa\u4e00\u4e2a\u9879\u76ee\u3002</p>"},{"location":"zh/GET-STARTED/get-started/#_2","title":"\u521b\u5efa\u9879\u76ee","text":"<p>\u5047\u8bbe\u4f60\u5df2\u7ecf\u5b89\u88c5\u4e86\u5fc5\u8981\u7684\u5de5\u5177\uff0c\u8ba9\u6211\u4eec\u5f00\u59cb\u521b\u5efa\u4e00\u4e2a\u65b0\u9879\u76ee\u3002</p>"},{"location":"zh/GET-STARTED/get-started/#1","title":"\u7b2c 1 \u6b65\uff1a\u521b\u5efa\u65b0\u9879\u76ee","text":"<p>\u5bfc\u822a\u5230\u4f60\u60f3\u8981\u521b\u5efa\u9879\u76ee\u7684\u76ee\u5f55\uff0c\u5e76\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u6fc0\u6d3b idf \u73af\u5883\uff08\u5982\u679c\u4f60\u5df2\u7ecf\u6309\u7167\u5b98\u65b9\u6307\u5bfc\u6b63\u786e\u8bbe\u7f6e\uff09\uff1a</p> <pre><code>get_idf\n</code></pre> <p>\u7136\u540e\uff0c\u901a\u8fc7\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u521b\u5efa\u9879\u76ee\uff08\"DNESP32S3-INIT\"\uff09\uff1a</p> <pre><code>idf.py create-project DNESP32S3-INIT\n</code></pre>"},{"location":"zh/GET-STARTED/get-started/#2","title":"\u7b2c 2 \u6b65\uff1a\u8bbe\u7f6e\u76ee\u6807\u8bbe\u5907","text":"<p>\u7136\u540e\uff0c\u5bfc\u822a\u5230\u9879\u76ee\u76ee\u5f55\uff1a</p> <pre><code>cd DNESP32S3-INIT\n</code></pre> <p>\u7136\u540e\uff0c\u5c06\u76ee\u6807\u8bbe\u5907\u8bbe\u7f6e\u4e3a\u5f00\u53d1\u677f\uff08\u8fd9\u91cc\uff0c\u6211\u4eec\u4f7f\u7528\u7684\u82af\u7247\u662f ESP32-S3\uff09\uff1a</p> <pre><code>idf.py set-target esp32s3\n</code></pre>"},{"location":"zh/GET-STARTED/get-started/#3","title":"\u7b2c 3 \u6b65\uff1a\u7f16\u8bd1\u548c\u70e7\u5199\u9879\u76ee","text":"<p>\u7136\u540e\uff0c\u7f16\u8bd1\u9879\u76ee\uff1a</p> <pre><code>idf.py build\n</code></pre> <p>\u7136\u540e\uff0c\u70e7\u5199\u9879\u76ee\uff1a</p> <pre><code>idf.py flash\n</code></pre> <p>\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u521b\u5efa\u4e86\u4e00\u4e2a\u5feb\u901f\u800c\u7b80\u5355\u7684\u9879\u76ee\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u914d\u7f6e\u9879\u76ee\u3002</p>"},{"location":"zh/GET-STARTED/get-started/#_3","title":"\u9879\u76ee\u914d\u7f6e\u4e3a\u6a21\u677f","text":""},{"location":"zh/GET-STARTED/get-started/#1_1","title":"\u7b2c 1 \u6b65\uff1a\u9884\u5904\u7406","text":"<p>\u5728\u6211\u4eec\u66f4\u4e3a\u6df1\u5165\u4e4b\u524d\uff0c\u6211\u4eec\u9996\u5148\u901a\u8fc7\u6267\u884c 'fullclean' \u6765\u6e05\u7406\u9879\u76ee\uff1a</p> <pre><code>idf.py fullclean\n</code></pre> <p>\u6216\u8005\uff0c\u4f60\u4e5f\u53ef\u4ee5\u624b\u52a8\u5220\u9664<code>build</code>\u6587\u4ef6\u5939\u3002</p> <p>\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u6211\u628a\u5165\u53e3\u6587\u4ef6\u6539\u540d\u4e3a<code>main.c</code>\uff0c\u76f8\u5e94\u5730\uff0c\u6211\u628a<code>main</code>\u6587\u4ef6\u5939\u4e0b\u9762\u7684 <code>CMakeLists.txt</code> \u4e5f\u505a\u4e86\u76f8\u5e94\u4fee\u6539\u3002\u4e4b\u540e\uff0c\u6211\u91cd\u65b0\u7f16\u8bd1\u548c\u70e7\u5f55\u4e86\u9879\u76ee\uff0c\u770b\u8d77\u6765\u6bd4\u8f83\u6b63\u5e38\u3002</p> <p>\u6ce8\u610f\uff0c\u5230\u76ee\u524d\u4f4d\u7f6e\uff0c\u6574\u4e2a\u9879\u76ee\u662f\u6309\u7167ESP32\u9ed8\u8ba4\u7684\u8bbe\u7f6e\u6765\u8fdb\u884c\u914d\u7f6e\u800c\u4e0d\u662f\u6839\u636e\u677f\u5b50\u7684\u5b9e\u9645\u60c5\u51b5\u6765\u914d\u7f6e\u7684\u3002\u4e3a\u4e86\u6700\u5927\u5316\u5229\u7528\u677f\u5b50\u7684\u8d44\u6e90\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u9879\u76ee\u8fdb\u884c\u914d\u7f6e\u3002\u53ef\u4ee5\u53c2\u8003\u677f\u5b50\u5236\u9020\u5546\u7684\u8bf4\u660e\u8fdb\u884c\u3002</p>"},{"location":"zh/GET-STARTED/get-started/#2_1","title":"\u7b2c 2 \u6b65\uff1a\u9488\u5bf9\u6027\u914d\u7f6e","text":"<p>Note</p> <p>\u8fd9\u4e00\u6b65\u662f\u4e3a\u4e86\u914d\u7f6e\u9879\u76ee\u8bbe\u7f6e\u4ee5\u6700\u5927\u5316\u786c\u4ef6\u7684\u6027\u80fd\uff0c\u5373\u4f7f\u7528\u7279\u5b9a\u4e8e\u76ee\u6807\u7684\u914d\u7f6e\u800c\u4e0d\u662f\u9ed8\u8ba4\u914d\u7f6e\u3002</p> <p>Warning</p> <p>\u5728\u6253\u5f00\u9879\u76ee\u914d\u7f6e UI \u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u60a8\u5df2\u5728 VSCode \u4e2d\u6253\u5f00\u4e86\u9879\u76ee\uff0c\u5c06\u76ee\u6807\u8bbe\u7f6e\u4e3a\u5bf9\u5e94\u7684\u677f\u5b50\uff0c\u5e76\u5b89\u88c5\u4e86 ESP-IDF \u6269\u5c55\u3002</p> <ol> <li>\u901a\u8fc7\u6309 <code>Ctrl+Shift+P</code>\uff08Windows/Linux\uff09\u6216 <code>Cmd+Shift+P</code>\uff08macOS\uff09\u5e76\u8f93\u5165 <code>ESP-IDF: Configure Project</code> \u8fdb\u5165\u9879\u76ee\u914d\u7f6e UI\u3002\u6216\u8005\uff0c\u53ef\u4ee5\u70b9\u51fb VSCode \u7a97\u53e3\u5e95\u90e8\u83dc\u5355\u7684\u9f7f\u8f6e\u56fe\u6807\u3002 </li> <li>'FLASH' \u914d\u7f6e\u3002\u5728\u641c\u7d22\u680f\u4e2d\u8f93\u5165 <code>flash</code> \u5e76\u6309 <code>Enter</code>\u3002 </li> <li>'Partition Table' \u914d\u7f6e\u3002\u5728\u641c\u7d22\u680f\u4e2d\u8f93\u5165 <code>partition</code> \u5e76\u6309 <code>Enter</code>\u3002  \u8be6\u7ec6\u4fe1\u606f\u7a0d\u540e\u63d0\u4f9b</li> <li>'PSRAM' \u914d\u7f6e\u3002\u5728\u641c\u7d22\u680f\u4e2d\u8f93\u5165 <code>psram</code> \u5e76\u6309 <code>Enter</code>\u3002 </li> <li>\u66f4\u6539 CPU \u9891\u7387\u3002\u5728\u641c\u7d22\u680f\u4e2d\u8f93\u5165 <code>cpu</code> \u5e76\u6309 <code>Enter</code>\u3002\u5c06 CPU \u9891\u7387\u4fee\u6539\u4e3a 240 MHz\u3002 </li> <li>\u4fee\u6539 FreeRTOS tick \u65f6\u949f\u9891\u7387\u3002\u5728\u641c\u7d22\u680f\u4e2d\u8f93\u5165 <code>tick</code> \u5e76\u6309 <code>Enter</code>\u3002\u5c06\u9891\u7387\u4fee\u6539\u4e3a 1000\u3002 </li> <li>\u4fee\u6539\u5206\u533a\u8868\u3002\u5728\u547d\u4ee4\u9762\u677f\u4e2d\u8f93\u5165 <code>ESP-IDF: Open Partition Table Editor UI</code>\u3002 </li> <li>\u4fee\u6539\u5206\u533a\u8868\u5982\u4e0b\u6240\u793a\u3002 </li> <li>\u4fdd\u5b58\u6240\u6709\u4fee\u6539\u3002</li> </ol> <p>\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u914d\u7f6e\u4fe1\u606f\u73b0\u5728\u4e0e\u786c\u4ef6\u677f\u4e0a\u8d44\u6e90\u4e00\u81f4\u3002</p>"},{"location":"zh/INSTRUCTIONS/instructions/","title":"\u9879\u76ee\u8bf4\u660e","text":"<p>Note</p> <p>\u672c\u6587\u6863\u8bb0\u5f55\u4e86\u5982\u4f55\u6784\u5efa\u8282\u70b9\u4ee5\u53ca\u5982\u4f55\u4f7f\u7528\u8282\u70b9\u3002</p>"},{"location":"zh/INSTRUCTIONS/PROJECT-INITIALIZATION/project-initialization/","title":"\u9879\u76ee\u521d\u59cb\u5316","text":""},{"location":"zh/INSTRUCTIONS/PROJECT-INITIALIZATION/project-initialization/#_2","title":"\u73af\u5883\u51c6\u5907","text":"<p>Info</p> <p>\u6211\u4eec\u4f7f\u7528 VSCode + ESP-IDF \u8fdb\u884c\u5f00\u53d1\u3002\u6709\u5173\u8bbe\u7f6e\u5f00\u53d1\u73af\u5883\u7684\u8be6\u7ec6\u4fe1\u606f\u53ef\u4ee5\u5728\u4e92\u8054\u7f51\u4e0a\u627e\u5230\u3002\u6211\u5047\u8bbe\u60a8\u5df2\u7ecf\u8bbe\u7f6e\u597d\u4e86\u5f00\u53d1\u73af\u5883\u3002</p>"},{"location":"zh/INSTRUCTIONS/PROJECT-INITIALIZATION/project-initialization/#_3","title":"\u521b\u5efa\u65b0\u9879\u76ee","text":"<ol> <li>\u542f\u52a8 VSCode\uff0c\u7136\u540e\u901a\u8fc7\u6309 <code>Ctrl+Shift+P</code>\uff08Windows/Linux\uff09\u6216 <code>Cmd+Shift+P</code>\uff08macOS\uff09\u6253\u5f00\u547d\u4ee4\u9762\u677f\u3002</li> <li>\u8f93\u5165 <code>ESP-IDF: New Project</code> \u5e76\u6309 <code>Enter</code>\u3002 </li> <li>\u8fdb\u5165\u9879\u76ee\u914d\u7f6e UI \u5e76\u586b\u5199\u6240\u9700\u4fe1\u606f\u3002 </li> <li>\u9009\u62e9\u4e00\u4e2a\u6a21\u677f\u6765\u521b\u5efa\u65b0\u9879\u76ee\u3002 </li> <li>\u5728\u65b0\u7a97\u53e3\u4e2d\u6253\u5f00\u3002  </li> </ol>"},{"location":"zh/INSTRUCTIONS/PROJECT-INITIALIZATION/project-initialization/#_4","title":"\u6a21\u677f\u5316\u9879\u76ee\u7ed3\u6784","text":"<pre><code>sample_proj/ # \u9879\u76ee\u6839\u76ee\u5f55\n\u251c\u2500\u2500 CMakeLists.txt # \u9879\u76ee CMake \u914d\u7f6e\u6587\u4ef6\n\u251c\u2500\u2500 main/ # \u4e3b\u5e94\u7528\u7a0b\u5e8f\u76ee\u5f55\n\u2502   \u251c\u2500\u2500 CMakeLists.txt # \u5e94\u7528\u7a0b\u5e8f CMake \u914d\u7f6e\u6587\u4ef6\n\u2502   \u2514\u2500\u2500 main.c # \u5e94\u7528\u7a0b\u5e8f\u6e90\u6587\u4ef6\n\u2514\u2500\u2500 sdkconfig # \u9879\u76ee\u914d\u7f6e\u6587\u4ef6\n</code></pre>"},{"location":"zh/INSTRUCTIONS/PROJECT-INITIALIZATION/project-initialization/#_5","title":"\u9879\u76ee\u914d\u7f6e","text":"<p>Note</p> <p>\u8fd9\u4e00\u6b65\u662f\u4e3a\u4e86\u914d\u7f6e\u9879\u76ee\u8bbe\u7f6e\u4ee5\u6700\u5927\u5316\u786c\u4ef6\u7684\u6027\u80fd\uff0c\u5373\u4f7f\u7528\u7279\u5b9a\u4e8e\u76ee\u6807\u7684\u914d\u7f6e\u800c\u4e0d\u662f\u9ed8\u8ba4\u914d\u7f6e\u3002</p> <p>Warning</p> <p>\u5728\u6253\u5f00\u9879\u76ee\u914d\u7f6e UI \u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u60a8\u5df2\u5728 VSCode \u4e2d\u6253\u5f00\u4e86\u9879\u76ee\uff0c\u5c06\u76ee\u6807\u8bbe\u7f6e\u4e3a\u5bf9\u5e94\u7684\u677f\u5b50\uff0c\u5e76\u5b89\u88c5\u4e86 ESP-IDF \u6269\u5c55\u3002</p> <ol> <li>\u901a\u8fc7\u6309 <code>Ctrl+Shift+P</code>\uff08Windows/Linux\uff09\u6216 <code>Cmd+Shift+P</code>\uff08macOS\uff09\u5e76\u8f93\u5165 <code>ESP-IDF: Configure Project</code> \u8fdb\u5165\u9879\u76ee\u914d\u7f6e UI\u3002\u6216\u8005\uff0c\u53ef\u4ee5\u70b9\u51fb VSCode \u7a97\u53e3\u5e95\u90e8\u83dc\u5355\u7684\u9f7f\u8f6e\u56fe\u6807\u3002 </li> <li>'FLASH' \u914d\u7f6e\u3002\u5728\u641c\u7d22\u680f\u4e2d\u8f93\u5165 <code>flash</code> \u5e76\u6309 <code>Enter</code>\u3002 </li> <li>'Partition Table' \u914d\u7f6e\u3002\u5728\u641c\u7d22\u680f\u4e2d\u8f93\u5165 <code>partition</code> \u5e76\u6309 <code>Enter</code>\u3002  \u8be6\u7ec6\u4fe1\u606f\u7a0d\u540e\u63d0\u4f9b</li> <li>'PSRAM' \u914d\u7f6e\u3002\u5728\u641c\u7d22\u680f\u4e2d\u8f93\u5165 <code>psram</code> \u5e76\u6309 <code>Enter</code>\u3002 </li> <li>\u66f4\u6539 CPU \u9891\u7387\u3002\u5728\u641c\u7d22\u680f\u4e2d\u8f93\u5165 <code>cpu</code> \u5e76\u6309 <code>Enter</code>\u3002\u5c06 CPU \u9891\u7387\u4fee\u6539\u4e3a 240 MHz\u3002 </li> <li>\u4fee\u6539 FreeRTOS tick \u65f6\u949f\u9891\u7387\u3002\u5728\u641c\u7d22\u680f\u4e2d\u8f93\u5165 <code>tick</code> \u5e76\u6309 <code>Enter</code>\u3002\u5c06\u9891\u7387\u4fee\u6539\u4e3a 1000\u3002 </li> <li>\u4fee\u6539\u5206\u533a\u8868\u3002\u5728\u547d\u4ee4\u9762\u677f\u4e2d\u8f93\u5165 <code>ESP-IDF: Open Partition Table Editor UI</code>\u3002 </li> <li>\u4fee\u6539\u5206\u533a\u8868\u5982\u4e0b\u6240\u793a\u3002 </li> <li>\u4fdd\u5b58\u6240\u6709\u4fee\u6539\u3002</li> </ol> <p>\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u5b8c\u6210\u4e86\u9879\u76ee\u521d\u59cb\u5316\u3002\u914d\u7f6e\u4fe1\u606f\u73b0\u5728\u4e0e\u786c\u4ef6\u677f\u4e0a\u8d44\u6e90\u4e00\u81f4\u3002</p>"},{"location":"zh/INSTRUCTIONS/PROJECT-INITIALIZATION/project-initialization/#_6","title":"\u6a21\u677f\u7a0b\u5e8f","text":"<p>\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u7a0b\u5e8f\u6765\u6d4b\u8bd5\u677f\u5b50\u3002</p> <p>\u8f6c\u5230 main.c \u6587\u4ef6\u5e76\u7528\u4ee5\u4e0b\u4ee3\u7801\u66ff\u6362\u5185\u5bb9\uff1a</p> <pre><code>#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"nvs_flash.h\"\n#include \"esp_system.h\"\n#include \"esp_chip_info.h\"\n#include \"esp_psram.h\"\n#include \"esp_flash.h\"\n\n/**\n * @brief Entry point of the program\n * @param None\n * @retval None\n */\nvoid app_main(void)\n{\n    esp_err_t ret;\n    uint32_t flash_size;\n    esp_chip_info_t chip_info;\n\n    // Initialize NVS\n    ret = nvs_flash_init();\n    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)\n    {\n        ESP_ERROR_CHECK(nvs_flash_erase()); // Erase if needed\n        ret = nvs_flash_init();\n    }\n\n    // Get FLASH size\n    esp_flash_get_size(NULL, &amp;flash_size);\n    esp_chip_info(&amp;chip_info);\n\n    // Display CPU core count\n    printf(\"CPU Cores: %d\\n\", chip_info.cores);\n\n    // Display FLASH size\n    printf(\"Flash size: %ld MB flash\\n\", flash_size / (1024 * 1024));\n\n    // Display PSRAM size\n    printf(\"PSRAM size: %d bytes\\n\", esp_psram_get_size());\n\n    while (1)\n    {\n        printf(\"Hello-ESP32\\r\\n\");\n        vTaskDelay(1000);\n    }\n}\n</code></pre> <p>\u7136\u540e\uff0c\u786e\u4fdd\u4e32\u53e3\u6b63\u786e\uff0c\u677f\u5b50\u8bbe\u7f6e\u6b63\u786e\uff0c\u7136\u540e\u7f16\u8bd1\u5e76\u70e7\u5f55\u7a0b\u5e8f\u3002\u7136\u540e\uff0c\u4f60\u5e94\u8be5\u4f1a\u770b\u5230\u4e32\u53e3\u8f93\u51fa\u663e\u793a\u5f00\u53d1\u677f\u4fe1\u606f\u548c <code>Hello-ESP32</code> \u6d88\u606f\u3002</p>"},{"location":"zh/INSTRUCTIONS/PROJECT-INITIALIZATION/project-initialization/#_7","title":"\u7ed3\u8bba","text":"<p>Note</p> <p>\u8fd9\u4e2a\u9879\u76ee\u5bf9DNESP32S3\u8fdb\u884c\u4e86\u521d\u59cb\u5316\uff0c\u5e76\u4e14\u53ef\u4ee5\u4e3a\u540e\u7eed\u5f00\u53d1\u63d0\u4f9b\u4e00\u4e2a\u975e\u5e38\u6709\u7528\u7684\u6a21\u677f\u3002\u76f8\u6bd4\u8f83\u4e0eSTM32\uff0cESP32\u7684\u5f00\u53d1\u9690\u85cf\u4e86\u8bb8\u591a\u7ec6\u8282\uff0c\u540c\u65f6\u4e5f\u4f7f\u5f97\u8bbe\u7f6e\u6d41\u7a0b\u66f4\u52a0\u7b80\u5355\u3002</p>"},{"location":"zh/TUTORIALS/tutorials/","title":"\u6559\u7a0b","text":"<p>Note</p> <p>\u672c\u7ae0\u662f\u7b14\u8005\u4f9d\u7167\u51e0\u4e2a\u6559\u7a0b\u8fdb\u884c\u5b66\u4e60\u7684\u7b14\u8bb0\u548c\u603b\u7ed3, \u65e8\u5728\u5b66\u4e60\u677f\u4e0a\u8d44\u6e90\u3002</p> <ul> <li> <p> ATK DNESP32S3</p> <p>  \u4f20\u9001\u95e8 </p> </li> </ul>"}]}